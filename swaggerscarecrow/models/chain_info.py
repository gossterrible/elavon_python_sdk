# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.models.address import Address
from swaggerscarecrow.models.banking_info import BankingInfo


class ChainInfo(object):

    """Implementation of the 'ChainInfo' model.

    TODO: type model description here.

    Attributes:
        chain_number (string): Name of new chain to be set up
        chain_name (string): Number of new chain to be set up
        send_statement_to_address (SendStatementToAddressEnum): Address that
            the new chain's statements will be sent to
        statement_media (StatementMediaEnum): Media type of chain's
            statements
        address (Address): TODO: type description here.
        chain_level_billing (bool): Billing level of new chain
        bank_accounts (dict): Chain's bank account information. The valid keys
            are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "chain_number": 'chainNumber',
        "chain_name": 'chainName',
        "send_statement_to_address": 'sendStatementToAddress',
        "statement_media": 'statementMedia',
        "address": 'address',
        "chain_level_billing": 'chainLevelBilling',
        "bank_accounts": 'bankAccounts'
    }

    def __init__(self,
                 chain_number=None,
                 chain_name=None,
                 send_statement_to_address=None,
                 statement_media=None,
                 address=None,
                 chain_level_billing=None,
                 bank_accounts=None):
        """Constructor for the ChainInfo class"""

        # Initialize members of the class
        self.chain_number = chain_number 
        self.chain_name = chain_name 
        self.send_statement_to_address = send_statement_to_address 
        self.statement_media = statement_media 
        self.address = address 
        self.chain_level_billing = chain_level_billing 
        self.bank_accounts = bank_accounts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        chain_number = dictionary.get("chainNumber") if dictionary.get("chainNumber") else None
        chain_name = dictionary.get("chainName") if dictionary.get("chainName") else None
        send_statement_to_address = dictionary.get("sendStatementToAddress") if dictionary.get("sendStatementToAddress") else None
        statement_media = dictionary.get("statementMedia") if dictionary.get("statementMedia") else None
        address = Address.from_dictionary(dictionary.get('address')) if dictionary.get('address') else None
        chain_level_billing = dictionary.get("chainLevelBilling") if "chainLevelBilling" in dictionary.keys() else None
        bank_accounts = BankingInfo.from_dictionary(dictionary.get('bankAccounts')) if dictionary.get('bankAccounts') else None
        # Return an object of this model
        return cls(chain_number,
                   chain_name,
                   send_statement_to_address,
                   statement_media,
                   address,
                   chain_level_billing,
                   bank_accounts)
