# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class NewCookie(object):

    """Implementation of the 'NewCookie' model.

    TODO: type model description here.

    Attributes:
        name (string): TODO: type description here.
        value (string): TODO: type description here.
        version (int): TODO: type description here.
        path (string): TODO: type description here.
        domain (string): TODO: type description here.
        comment (string): TODO: type description here.
        max_age (int): TODO: type description here.
        expiry (datetime): TODO: type description here.
        secure (bool): TODO: type description here.
        http_only (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "value": 'value',
        "version": 'version',
        "path": 'path',
        "domain": 'domain',
        "comment": 'comment',
        "max_age": 'maxAge',
        "expiry": 'expiry',
        "secure": 'secure',
        "http_only": 'httpOnly'
    }

    _optionals = [
        'name',
        'value',
        'version',
        'path',
        'domain',
        'comment',
        'max_age',
        'expiry',
        'secure',
        'http_only',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 value=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 path=APIHelper.SKIP,
                 domain=APIHelper.SKIP,
                 comment=APIHelper.SKIP,
                 max_age=APIHelper.SKIP,
                 expiry=APIHelper.SKIP,
                 secure=APIHelper.SKIP,
                 http_only=APIHelper.SKIP):
        """Constructor for the NewCookie class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if value is not APIHelper.SKIP:
            self.value = value 
        if version is not APIHelper.SKIP:
            self.version = version 
        if path is not APIHelper.SKIP:
            self.path = path 
        if domain is not APIHelper.SKIP:
            self.domain = domain 
        if comment is not APIHelper.SKIP:
            self.comment = comment 
        if max_age is not APIHelper.SKIP:
            self.max_age = max_age 
        if expiry is not APIHelper.SKIP:
            self.expiry = APIHelper.RFC3339DateTime(expiry) if expiry else None 
        if secure is not APIHelper.SKIP:
            self.secure = secure 
        if http_only is not APIHelper.SKIP:
            self.http_only = http_only 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        path = dictionary.get("path") if dictionary.get("path") else APIHelper.SKIP
        domain = dictionary.get("domain") if dictionary.get("domain") else APIHelper.SKIP
        comment = dictionary.get("comment") if dictionary.get("comment") else APIHelper.SKIP
        max_age = dictionary.get("maxAge") if dictionary.get("maxAge") else APIHelper.SKIP
        expiry = APIHelper.RFC3339DateTime.from_value(dictionary.get("expiry")).datetime if dictionary.get("expiry") else APIHelper.SKIP
        secure = dictionary.get("secure") if "secure" in dictionary.keys() else APIHelper.SKIP
        http_only = dictionary.get("httpOnly") if "httpOnly" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   value,
                   version,
                   path,
                   domain,
                   comment,
                   max_age,
                   expiry,
                   secure,
                   http_only)
