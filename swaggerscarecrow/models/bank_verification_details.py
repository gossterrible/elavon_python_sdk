# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BankVerificationDetails(object):

    """Implementation of the 'BankVerificationDetails' model.

    TODO: type model description here.

    Attributes:
        bank_name (string): Name of bank that bank verification call resolved
            to
        bank_branch (string): Name of bank branh that bank verification call
            resolved to
        status (StatusEnum): Status of bank verification response
        bank_logo_path (string): TODO: type description here.
        bank_country (string): Country code that bank verification call
            resolved to, ISO 3166-1 alpha-3 standard applies
        sort_code (string): Sort code/ABA routing number that bank
            verification call used
        account_number (string): TODO: type description here.
        has_multiple_branches (bool): Flag indicating if bank has more than
            one branch, true if YES, false if NO
        realtime_payment_flag (bool): Flag indicating if the bank can accept
            true daily/ real time payments

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_name": 'bankName',
        "bank_branch": 'bankBranch',
        "status": 'status',
        "bank_logo_path": 'bankLogoPath',
        "bank_country": 'bankCountry',
        "sort_code": 'sortCode',
        "account_number": 'accountNumber',
        "has_multiple_branches": 'hasMultipleBranches',
        "realtime_payment_flag": 'realtimePaymentFlag'
    }

    _optionals = [
        'bank_name',
        'bank_branch',
        'status',
        'bank_logo_path',
        'bank_country',
        'sort_code',
        'account_number',
        'has_multiple_branches',
        'realtime_payment_flag',
    ]

    def __init__(self,
                 bank_name=APIHelper.SKIP,
                 bank_branch=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 bank_logo_path=APIHelper.SKIP,
                 bank_country=APIHelper.SKIP,
                 sort_code=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 has_multiple_branches=APIHelper.SKIP,
                 realtime_payment_flag=APIHelper.SKIP):
        """Constructor for the BankVerificationDetails class"""

        # Initialize members of the class
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if bank_branch is not APIHelper.SKIP:
            self.bank_branch = bank_branch 
        if status is not APIHelper.SKIP:
            self.status = status 
        if bank_logo_path is not APIHelper.SKIP:
            self.bank_logo_path = bank_logo_path 
        if bank_country is not APIHelper.SKIP:
            self.bank_country = bank_country 
        if sort_code is not APIHelper.SKIP:
            self.sort_code = sort_code 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if has_multiple_branches is not APIHelper.SKIP:
            self.has_multiple_branches = has_multiple_branches 
        if realtime_payment_flag is not APIHelper.SKIP:
            self.realtime_payment_flag = realtime_payment_flag 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        bank_name = dictionary.get("bankName") if dictionary.get("bankName") else APIHelper.SKIP
        bank_branch = dictionary.get("bankBranch") if dictionary.get("bankBranch") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        bank_logo_path = dictionary.get("bankLogoPath") if dictionary.get("bankLogoPath") else APIHelper.SKIP
        bank_country = dictionary.get("bankCountry") if dictionary.get("bankCountry") else APIHelper.SKIP
        sort_code = dictionary.get("sortCode") if dictionary.get("sortCode") else APIHelper.SKIP
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else APIHelper.SKIP
        has_multiple_branches = dictionary.get("hasMultipleBranches") if "hasMultipleBranches" in dictionary.keys() else APIHelper.SKIP
        realtime_payment_flag = dictionary.get("realtimePaymentFlag") if "realtimePaymentFlag" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_name,
                   bank_branch,
                   status,
                   bank_logo_path,
                   bank_country,
                   sort_code,
                   account_number,
                   has_multiple_branches,
                   realtime_payment_flag)
