# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.additional_location_info import AdditionalLocationInfo
from swaggerscarecrow.models.apm_acquirer import ApmAcquirer
from swaggerscarecrow.models.banking_info import BankingInfo
from swaggerscarecrow.models.billing_statement import BillingStatement
from swaggerscarecrow.models.business_info import BusinessInfo
from swaggerscarecrow.models.card_pricing import CardPricing
from swaggerscarecrow.models.chain_info import ChainInfo
from swaggerscarecrow.models.date_components import DateComponents
from swaggerscarecrow.models.distribution_info import DistributionInfo
from swaggerscarecrow.models.dynamic_currency_conversion import DynamicCurrencyConversion
from swaggerscarecrow.models.eframe_info import EframeInfo
from swaggerscarecrow.models.electronic_statement import ElectronicStatement
from swaggerscarecrow.models.equipment_info import EquipmentInfo
from swaggerscarecrow.models.fee import Fee
from swaggerscarecrow.models.financial_info import FinancialInfo
from swaggerscarecrow.models.fraud_check_result import FraudCheckResult
from swaggerscarecrow.models.funding_statement import FundingStatement
from swaggerscarecrow.models.intermediary_owner_info import IntermediaryOwnerInfo
from swaggerscarecrow.models.internal_use_info import InternalUseInfo
from swaggerscarecrow.models.partner_info import PartnerInfo
from swaggerscarecrow.models.person import Person
from swaggerscarecrow.models.revenue_share_info import RevenueShareInfo
from swaggerscarecrow.models.site_survey import SiteSurvey
from swaggerscarecrow.models.value_added_info import ValueAddedInfo
from swaggerscarecrow.models.vat_invoice_statement import VatInvoiceStatement


class ScarecrowApplication(object):

    """Implementation of the 'ScarecrowApplication' model.

    TODO: type model description here.

    Attributes:
        client_id (string): Client id of application submission, to be
            provided to partners
        client_group_number (string): Client group number of application
            submission, paris with parent entity, to be provided to partners,
            required in NA
        unique_id (string): Unique identifier of application submission,
            alphanumeric. Provided by the client.The uniqueId must be wholly
            original and never repeated. The client's name followed by a
            millisecond timestamp would work well.
        banker_id (string): [EU] Identifier of banker responsible for
            submission
        banker_partner_id (string): [EU] Identifier of banker partner
            responsible for submission
        country (string): Country of application submission, ISO 3166-1
            alpha-3 standard applies
        principal (Person): TODO: type description here.
        business_info (BusinessInfo): TODO: type description here.
        financial_info (FinancialInfo): TODO: type description here.
        sales_rep_code (string): Identifier of sales representative
            responsible for submission
        additional_shareholders (list of Person): TODO: type description
            here.
        contact (Person): TODO: type description here.
        bank_accounts (dict): Bank account container. Valid keys are as
            follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
        card_pricing (CardPricing): TODO: type description here.
        fees (list of Fee): TODO: type description here.
        monetary_pricing_program (string): Pricing program also called
            MPP/NPP, to be provided to partners, required in EU
        authenticate_pricing_program (string): Pricing program also called
            APP, to be provided to partners, required in EU
        parent_entity (string): Entity that is parent to submisssion, forms a
            pair with client group, to be provided to partners
        short_name (string): [NA]
        fraud_check_result (FraudCheckResult): TODO: type description here.
        site_survey (SiteSurvey): TODO: type description here.
        dynamic_currency_conversion (DynamicCurrencyConversion): TODO: type
            description here.
        billing_statement (BillingStatement): TODO: type description here.
        funding_statement (FundingStatement): TODO: type description here.
        electronic_statement (ElectronicStatement): TODO: type description
            here.
        vat_invoice_statement (VatInvoiceStatement): TODO: type description
            here.
        billing_method (BillingMethodEnum): [NA] NETCREDIT or GROSS
        referrer_name (string): Application submission's referrer name, to be
            provided to partners, required in NA
        referrer_reference_number (string): The reference number associated
            with the referrer, known by Elavon.
        previous_processor (string): [NA] Customer's previous payment
            processor
        value_added_info (ValueAddedInfo): TODO: type description here.
        equipment_info (EquipmentInfo): In NA, it's mandatory to have at least
            one piece of equipment. For third party vendors           
            managing their own equipment, at least one Value Added Reseller
            (VAR) code must be sent.            Contact your Elavon
            representative for the VAR code(s).            In EU,
            equipmentInfo is optional and no equipment has to be sent. If you
            have any equipment            managed by Elavon, contact your
            Elavon representative for the VAR code(s).
        branch_number (string): Bank branch number associated with application
            submission
        branch_code (string): Bank branch code associated with application
            submission
        self_boarded_external (bool): [NA] Flag indicating if application is
            self boarded externally, suppresses forms of post-boarding
            contact
        employee_number (string): Number used to identify a specific employee
        rep_referral_number (string): Number used to identify a specific
            representative
        promotional_code (string): A discount/promotional code
        chain_info (ChainInfo): TODO: type description here.
        distributions (dict): Distribution container for chargebacks and
            retrievals. The valid keys are as follows: CHARGEBACK, RETRIEVAL
        additional_location_info (AdditionalLocationInfo): TODO: type
            description here.
        signed_date (DateComponents): A container that holds the date (day,
            month, and year)
        signed_type (SignedTypeEnum): [NA] How application was signed
        intermediary_owner_info (IntermediaryOwnerInfo): TODO: type
            description here.
        revenue_share_info (RevenueShareInfo): TODO: type description here.
        elavon_contract (ElavonContractEnum): [EU] Determine which Merchant
            Agreement customer will sign
        internal_use_info (InternalUseInfo): TODO: type description here.
        eframe_info (EframeInfo): TODO: type description here.
        partner_info (PartnerInfo): TODO: type description here.
        alternative_payment_methods (list of ApmAcquirer): [EU] List of
            Alternative Payment Method Acquirers container

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "client_id": 'clientId',
        "unique_id": 'uniqueId',
        "country": 'country',
        "principal": 'principal',
        "business_info": 'businessInfo',
        "financial_info": 'financialInfo',
        "sales_rep_code": 'salesRepCode',
        "contact": 'contact',
        "bank_accounts": 'bankAccounts',
        "card_pricing": 'cardPricing',
        "parent_entity": 'parentEntity',
        "client_group_number": 'clientGroupNumber',
        "banker_id": 'bankerId',
        "banker_partner_id": 'bankerPartnerId',
        "additional_shareholders": 'additionalShareholders',
        "fees": 'fees',
        "monetary_pricing_program": 'monetaryPricingProgram',
        "authenticate_pricing_program": 'authenticatePricingProgram',
        "short_name": 'shortName',
        "fraud_check_result": 'fraudCheckResult',
        "site_survey": 'siteSurvey',
        "dynamic_currency_conversion": 'dynamicCurrencyConversion',
        "billing_statement": 'billingStatement',
        "funding_statement": 'fundingStatement',
        "electronic_statement": 'electronicStatement',
        "vat_invoice_statement": 'vatInvoiceStatement',
        "billing_method": 'billingMethod',
        "referrer_name": 'referrerName',
        "referrer_reference_number": 'referrerReferenceNumber',
        "previous_processor": 'previousProcessor',
        "value_added_info": 'valueAddedInfo',
        "equipment_info": 'equipmentInfo',
        "branch_number": 'branchNumber',
        "branch_code": 'branchCode',
        "self_boarded_external": 'selfBoardedExternal',
        "employee_number": 'employeeNumber',
        "rep_referral_number": 'repReferralNumber',
        "promotional_code": 'promotionalCode',
        "chain_info": 'chainInfo',
        "distributions": 'distributions',
        "additional_location_info": 'additionalLocationInfo',
        "signed_date": 'signedDate',
        "signed_type": 'signedType',
        "intermediary_owner_info": 'intermediaryOwnerInfo',
        "revenue_share_info": 'revenueShareInfo',
        "elavon_contract": 'elavonContract',
        "internal_use_info": 'internalUseInfo',
        "eframe_info": 'eframeInfo',
        "partner_info": 'partnerInfo',
        "alternative_payment_methods": 'alternativePaymentMethods'
    }

    _optionals = [
        'client_group_number',
        'banker_id',
        'banker_partner_id',
        'additional_shareholders',
        'fees',
        'monetary_pricing_program',
        'authenticate_pricing_program',
        'short_name',
        'fraud_check_result',
        'site_survey',
        'dynamic_currency_conversion',
        'billing_statement',
        'funding_statement',
        'electronic_statement',
        'vat_invoice_statement',
        'billing_method',
        'referrer_name',
        'referrer_reference_number',
        'previous_processor',
        'value_added_info',
        'equipment_info',
        'branch_number',
        'branch_code',
        'self_boarded_external',
        'employee_number',
        'rep_referral_number',
        'promotional_code',
        'chain_info',
        'distributions',
        'additional_location_info',
        'signed_date',
        'signed_type',
        'intermediary_owner_info',
        'revenue_share_info',
        'elavon_contract',
        'internal_use_info',
        'eframe_info',
        'partner_info',
        'alternative_payment_methods',
    ]

    def __init__(self,
                 client_id=None,
                 unique_id=None,
                 country=None,
                 principal=None,
                 business_info=None,
                 financial_info=None,
                 sales_rep_code=None,
                 contact=None,
                 bank_accounts=None,
                 card_pricing=None,
                 parent_entity=None,
                 client_group_number=APIHelper.SKIP,
                 banker_id=APIHelper.SKIP,
                 banker_partner_id=APIHelper.SKIP,
                 additional_shareholders=APIHelper.SKIP,
                 fees=APIHelper.SKIP,
                 monetary_pricing_program=APIHelper.SKIP,
                 authenticate_pricing_program=APIHelper.SKIP,
                 short_name=APIHelper.SKIP,
                 fraud_check_result=APIHelper.SKIP,
                 site_survey=APIHelper.SKIP,
                 dynamic_currency_conversion=APIHelper.SKIP,
                 billing_statement=APIHelper.SKIP,
                 funding_statement=APIHelper.SKIP,
                 electronic_statement=APIHelper.SKIP,
                 vat_invoice_statement=APIHelper.SKIP,
                 billing_method=APIHelper.SKIP,
                 referrer_name=APIHelper.SKIP,
                 referrer_reference_number=APIHelper.SKIP,
                 previous_processor=APIHelper.SKIP,
                 value_added_info=APIHelper.SKIP,
                 equipment_info=APIHelper.SKIP,
                 branch_number=APIHelper.SKIP,
                 branch_code=APIHelper.SKIP,
                 self_boarded_external=APIHelper.SKIP,
                 employee_number=APIHelper.SKIP,
                 rep_referral_number=APIHelper.SKIP,
                 promotional_code=APIHelper.SKIP,
                 chain_info=APIHelper.SKIP,
                 distributions=APIHelper.SKIP,
                 additional_location_info=APIHelper.SKIP,
                 signed_date=APIHelper.SKIP,
                 signed_type=APIHelper.SKIP,
                 intermediary_owner_info=APIHelper.SKIP,
                 revenue_share_info=APIHelper.SKIP,
                 elavon_contract=APIHelper.SKIP,
                 internal_use_info=APIHelper.SKIP,
                 eframe_info=APIHelper.SKIP,
                 partner_info=APIHelper.SKIP,
                 alternative_payment_methods=APIHelper.SKIP):
        """Constructor for the ScarecrowApplication class"""

        # Initialize members of the class
        self.client_id = client_id 
        if client_group_number is not APIHelper.SKIP:
            self.client_group_number = client_group_number 
        self.unique_id = unique_id 
        if banker_id is not APIHelper.SKIP:
            self.banker_id = banker_id 
        if banker_partner_id is not APIHelper.SKIP:
            self.banker_partner_id = banker_partner_id 
        self.country = country 
        self.principal = principal 
        self.business_info = business_info 
        self.financial_info = financial_info 
        self.sales_rep_code = sales_rep_code 
        if additional_shareholders is not APIHelper.SKIP:
            self.additional_shareholders = additional_shareholders 
        self.contact = contact 
        self.bank_accounts = bank_accounts 
        self.card_pricing = card_pricing 
        if fees is not APIHelper.SKIP:
            self.fees = fees 
        if monetary_pricing_program is not APIHelper.SKIP:
            self.monetary_pricing_program = monetary_pricing_program 
        if authenticate_pricing_program is not APIHelper.SKIP:
            self.authenticate_pricing_program = authenticate_pricing_program 
        self.parent_entity = parent_entity 
        if short_name is not APIHelper.SKIP:
            self.short_name = short_name 
        if fraud_check_result is not APIHelper.SKIP:
            self.fraud_check_result = fraud_check_result 
        if site_survey is not APIHelper.SKIP:
            self.site_survey = site_survey 
        if dynamic_currency_conversion is not APIHelper.SKIP:
            self.dynamic_currency_conversion = dynamic_currency_conversion 
        if billing_statement is not APIHelper.SKIP:
            self.billing_statement = billing_statement 
        if funding_statement is not APIHelper.SKIP:
            self.funding_statement = funding_statement 
        if electronic_statement is not APIHelper.SKIP:
            self.electronic_statement = electronic_statement 
        if vat_invoice_statement is not APIHelper.SKIP:
            self.vat_invoice_statement = vat_invoice_statement 
        if billing_method is not APIHelper.SKIP:
            self.billing_method = billing_method 
        if referrer_name is not APIHelper.SKIP:
            self.referrer_name = referrer_name 
        if referrer_reference_number is not APIHelper.SKIP:
            self.referrer_reference_number = referrer_reference_number 
        if previous_processor is not APIHelper.SKIP:
            self.previous_processor = previous_processor 
        if value_added_info is not APIHelper.SKIP:
            self.value_added_info = value_added_info 
        if equipment_info is not APIHelper.SKIP:
            self.equipment_info = equipment_info 
        if branch_number is not APIHelper.SKIP:
            self.branch_number = branch_number 
        if branch_code is not APIHelper.SKIP:
            self.branch_code = branch_code 
        if self_boarded_external is not APIHelper.SKIP:
            self.self_boarded_external = self_boarded_external 
        if employee_number is not APIHelper.SKIP:
            self.employee_number = employee_number 
        if rep_referral_number is not APIHelper.SKIP:
            self.rep_referral_number = rep_referral_number 
        if promotional_code is not APIHelper.SKIP:
            self.promotional_code = promotional_code 
        if chain_info is not APIHelper.SKIP:
            self.chain_info = chain_info 
        if distributions is not APIHelper.SKIP:
            self.distributions = distributions 
        if additional_location_info is not APIHelper.SKIP:
            self.additional_location_info = additional_location_info 
        if signed_date is not APIHelper.SKIP:
            self.signed_date = signed_date 
        if signed_type is not APIHelper.SKIP:
            self.signed_type = signed_type 
        if intermediary_owner_info is not APIHelper.SKIP:
            self.intermediary_owner_info = intermediary_owner_info 
        if revenue_share_info is not APIHelper.SKIP:
            self.revenue_share_info = revenue_share_info 
        if elavon_contract is not APIHelper.SKIP:
            self.elavon_contract = elavon_contract 
        if internal_use_info is not APIHelper.SKIP:
            self.internal_use_info = internal_use_info 
        if eframe_info is not APIHelper.SKIP:
            self.eframe_info = eframe_info 
        if partner_info is not APIHelper.SKIP:
            self.partner_info = partner_info 
        if alternative_payment_methods is not APIHelper.SKIP:
            self.alternative_payment_methods = alternative_payment_methods 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        client_id = dictionary.get("clientId") if dictionary.get("clientId") else None
        unique_id = dictionary.get("uniqueId") if dictionary.get("uniqueId") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        principal = Person.from_dictionary(dictionary.get('principal')) if dictionary.get('principal') else None
        business_info = BusinessInfo.from_dictionary(dictionary.get('businessInfo')) if dictionary.get('businessInfo') else None
        financial_info = FinancialInfo.from_dictionary(dictionary.get('financialInfo')) if dictionary.get('financialInfo') else None
        sales_rep_code = dictionary.get("salesRepCode") if dictionary.get("salesRepCode") else None
        contact = Person.from_dictionary(dictionary.get('contact')) if dictionary.get('contact') else None
        bank_accounts = BankingInfo.from_dictionary(dictionary.get('bankAccounts')) if dictionary.get('bankAccounts') else None
        card_pricing = CardPricing.from_dictionary(dictionary.get('cardPricing')) if dictionary.get('cardPricing') else None
        parent_entity = dictionary.get("parentEntity") if dictionary.get("parentEntity") else None
        client_group_number = dictionary.get("clientGroupNumber") if dictionary.get("clientGroupNumber") else APIHelper.SKIP
        banker_id = dictionary.get("bankerId") if dictionary.get("bankerId") else APIHelper.SKIP
        banker_partner_id = dictionary.get("bankerPartnerId") if dictionary.get("bankerPartnerId") else APIHelper.SKIP
        additional_shareholders = None
        if dictionary.get('additionalShareholders') is not None:
            additional_shareholders = [Person.from_dictionary(x) for x in dictionary.get('additionalShareholders')]
        else:
            additional_shareholders = APIHelper.SKIP
        fees = None
        if dictionary.get('fees') is not None:
            fees = [Fee.from_dictionary(x) for x in dictionary.get('fees')]
        else:
            fees = APIHelper.SKIP
        monetary_pricing_program = dictionary.get("monetaryPricingProgram") if dictionary.get("monetaryPricingProgram") else APIHelper.SKIP
        authenticate_pricing_program = dictionary.get("authenticatePricingProgram") if dictionary.get("authenticatePricingProgram") else APIHelper.SKIP
        short_name = dictionary.get("shortName") if dictionary.get("shortName") else APIHelper.SKIP
        fraud_check_result = FraudCheckResult.from_dictionary(dictionary.get('fraudCheckResult')) if 'fraudCheckResult' in dictionary.keys() else APIHelper.SKIP 
        site_survey = SiteSurvey.from_dictionary(dictionary.get('siteSurvey')) if 'siteSurvey' in dictionary.keys() else APIHelper.SKIP 
        dynamic_currency_conversion = DynamicCurrencyConversion.from_dictionary(dictionary.get('dynamicCurrencyConversion')) if 'dynamicCurrencyConversion' in dictionary.keys() else APIHelper.SKIP 
        billing_statement = BillingStatement.from_dictionary(dictionary.get('billingStatement')) if 'billingStatement' in dictionary.keys() else APIHelper.SKIP 
        funding_statement = FundingStatement.from_dictionary(dictionary.get('fundingStatement')) if 'fundingStatement' in dictionary.keys() else APIHelper.SKIP 
        electronic_statement = ElectronicStatement.from_dictionary(dictionary.get('electronicStatement')) if 'electronicStatement' in dictionary.keys() else APIHelper.SKIP 
        vat_invoice_statement = VatInvoiceStatement.from_dictionary(dictionary.get('vatInvoiceStatement')) if 'vatInvoiceStatement' in dictionary.keys() else APIHelper.SKIP 
        billing_method = dictionary.get("billingMethod") if dictionary.get("billingMethod") else APIHelper.SKIP
        referrer_name = dictionary.get("referrerName") if dictionary.get("referrerName") else APIHelper.SKIP
        referrer_reference_number = dictionary.get("referrerReferenceNumber") if dictionary.get("referrerReferenceNumber") else APIHelper.SKIP
        previous_processor = dictionary.get("previousProcessor") if dictionary.get("previousProcessor") else APIHelper.SKIP
        value_added_info = ValueAddedInfo.from_dictionary(dictionary.get('valueAddedInfo')) if 'valueAddedInfo' in dictionary.keys() else APIHelper.SKIP 
        equipment_info = EquipmentInfo.from_dictionary(dictionary.get('equipmentInfo')) if 'equipmentInfo' in dictionary.keys() else APIHelper.SKIP 
        branch_number = dictionary.get("branchNumber") if dictionary.get("branchNumber") else APIHelper.SKIP
        branch_code = dictionary.get("branchCode") if dictionary.get("branchCode") else APIHelper.SKIP
        self_boarded_external = dictionary.get("selfBoardedExternal") if "selfBoardedExternal" in dictionary.keys() else APIHelper.SKIP
        employee_number = dictionary.get("employeeNumber") if dictionary.get("employeeNumber") else APIHelper.SKIP
        rep_referral_number = dictionary.get("repReferralNumber") if dictionary.get("repReferralNumber") else APIHelper.SKIP
        promotional_code = dictionary.get("promotionalCode") if dictionary.get("promotionalCode") else APIHelper.SKIP
        chain_info = ChainInfo.from_dictionary(dictionary.get('chainInfo')) if 'chainInfo' in dictionary.keys() else APIHelper.SKIP 
        distributions = DistributionInfo.from_dictionary(dictionary.get('distributions')) if 'distributions' in dictionary.keys() else APIHelper.SKIP 
        additional_location_info = AdditionalLocationInfo.from_dictionary(dictionary.get('additionalLocationInfo')) if 'additionalLocationInfo' in dictionary.keys() else APIHelper.SKIP 
        signed_date = DateComponents.from_dictionary(dictionary.get('signedDate')) if 'signedDate' in dictionary.keys() else APIHelper.SKIP 
        signed_type = dictionary.get("signedType") if dictionary.get("signedType") else APIHelper.SKIP
        intermediary_owner_info = IntermediaryOwnerInfo.from_dictionary(dictionary.get('intermediaryOwnerInfo')) if 'intermediaryOwnerInfo' in dictionary.keys() else APIHelper.SKIP 
        revenue_share_info = RevenueShareInfo.from_dictionary(dictionary.get('revenueShareInfo')) if 'revenueShareInfo' in dictionary.keys() else APIHelper.SKIP 
        elavon_contract = dictionary.get("elavonContract") if dictionary.get("elavonContract") else APIHelper.SKIP
        internal_use_info = InternalUseInfo.from_dictionary(dictionary.get('internalUseInfo')) if 'internalUseInfo' in dictionary.keys() else APIHelper.SKIP 
        eframe_info = EframeInfo.from_dictionary(dictionary.get('eframeInfo')) if 'eframeInfo' in dictionary.keys() else APIHelper.SKIP 
        partner_info = PartnerInfo.from_dictionary(dictionary.get('partnerInfo')) if 'partnerInfo' in dictionary.keys() else APIHelper.SKIP 
        alternative_payment_methods = None
        if dictionary.get('alternativePaymentMethods') is not None:
            alternative_payment_methods = [ApmAcquirer.from_dictionary(x) for x in dictionary.get('alternativePaymentMethods')]
        else:
            alternative_payment_methods = APIHelper.SKIP
        # Return an object of this model
        return cls(client_id,
                   unique_id,
                   country,
                   principal,
                   business_info,
                   financial_info,
                   sales_rep_code,
                   contact,
                   bank_accounts,
                   card_pricing,
                   parent_entity,
                   client_group_number,
                   banker_id,
                   banker_partner_id,
                   additional_shareholders,
                   fees,
                   monetary_pricing_program,
                   authenticate_pricing_program,
                   short_name,
                   fraud_check_result,
                   site_survey,
                   dynamic_currency_conversion,
                   billing_statement,
                   funding_statement,
                   electronic_statement,
                   vat_invoice_statement,
                   billing_method,
                   referrer_name,
                   referrer_reference_number,
                   previous_processor,
                   value_added_info,
                   equipment_info,
                   branch_number,
                   branch_code,
                   self_boarded_external,
                   employee_number,
                   rep_referral_number,
                   promotional_code,
                   chain_info,
                   distributions,
                   additional_location_info,
                   signed_date,
                   signed_type,
                   intermediary_owner_info,
                   revenue_share_info,
                   elavon_contract,
                   internal_use_info,
                   eframe_info,
                   partner_info,
                   alternative_payment_methods)
