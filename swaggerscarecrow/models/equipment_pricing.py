# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class EquipmentPricing(object):

    """Implementation of the 'EquipmentPricing' model.

    TODO: type model description here.

    Attributes:
        amount (float): The cost of the equipment
        purchase_type (PurchaseTypeEnum): TODO: type description here.
        lease_term (int): TODO: type description here.
        vendor_code (int): TODO: type description here.
        vendor_plan (string): TODO: type description here.
        start_month (StartMonth1Enum): TODO: type description here.
        start_year (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "purchase_type": 'purchaseType',
        "lease_term": 'leaseTerm',
        "vendor_code": 'vendorCode',
        "vendor_plan": 'vendorPlan',
        "start_month": 'startMonth',
        "start_year": 'startYear'
    }

    _optionals = [
        'purchase_type',
        'lease_term',
        'vendor_code',
        'vendor_plan',
        'start_month',
        'start_year',
    ]

    def __init__(self,
                 amount=None,
                 purchase_type=APIHelper.SKIP,
                 lease_term=APIHelper.SKIP,
                 vendor_code=APIHelper.SKIP,
                 vendor_plan=APIHelper.SKIP,
                 start_month=APIHelper.SKIP,
                 start_year=APIHelper.SKIP):
        """Constructor for the EquipmentPricing class"""

        # Initialize members of the class
        self.amount = amount 
        if purchase_type is not APIHelper.SKIP:
            self.purchase_type = purchase_type 
        if lease_term is not APIHelper.SKIP:
            self.lease_term = lease_term 
        if vendor_code is not APIHelper.SKIP:
            self.vendor_code = vendor_code 
        if vendor_plan is not APIHelper.SKIP:
            self.vendor_plan = vendor_plan 
        if start_month is not APIHelper.SKIP:
            self.start_month = start_month 
        if start_year is not APIHelper.SKIP:
            self.start_year = start_year 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        amount = dictionary.get("amount") if dictionary.get("amount") else None
        purchase_type = dictionary.get("purchaseType") if dictionary.get("purchaseType") else APIHelper.SKIP
        lease_term = dictionary.get("leaseTerm") if dictionary.get("leaseTerm") else APIHelper.SKIP
        vendor_code = dictionary.get("vendorCode") if dictionary.get("vendorCode") else APIHelper.SKIP
        vendor_plan = dictionary.get("vendorPlan") if dictionary.get("vendorPlan") else APIHelper.SKIP
        start_month = dictionary.get("startMonth") if dictionary.get("startMonth") else APIHelper.SKIP
        start_year = dictionary.get("startYear") if dictionary.get("startYear") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   purchase_type,
                   lease_term,
                   vendor_code,
                   vendor_plan,
                   start_month,
                   start_year)
