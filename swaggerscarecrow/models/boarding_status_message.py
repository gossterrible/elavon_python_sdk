# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BoardingStatusMessage(object):

    """Implementation of the 'BoardingStatusMessage' model.

    TODO: type model description here.

    Attributes:
        type_code (TypeCodeEnum): Type of message presented
        code (string): Number representing the status message
        description (string): Description of message

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "type_code": 'typeCode',
        "code": 'code',
        "description": 'description'
    }

    _optionals = [
        'type_code',
        'code',
        'description',
    ]

    def __init__(self,
                 type_code=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 description=APIHelper.SKIP):
        """Constructor for the BoardingStatusMessage class"""

        # Initialize members of the class
        if type_code is not APIHelper.SKIP:
            self.type_code = type_code 
        if code is not APIHelper.SKIP:
            self.code = code 
        if description is not APIHelper.SKIP:
            self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        type_code = dictionary.get("typeCode") if dictionary.get("typeCode") else APIHelper.SKIP
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(type_code,
                   code,
                   description)
