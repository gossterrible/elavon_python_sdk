# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class FilterRegistration(object):

    """Implementation of the 'FilterRegistration' model.

    TODO: type model description here.

    Attributes:
        servlet_name_mappings (list of string): TODO: type description here.
        url_pattern_mappings (list of string): TODO: type description here.
        name (string): TODO: type description here.
        class_name (string): TODO: type description here.
        init_parameters (dict): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "servlet_name_mappings": 'servletNameMappings',
        "url_pattern_mappings": 'urlPatternMappings',
        "name": 'name',
        "class_name": 'className',
        "init_parameters": 'initParameters'
    }

    _optionals = [
        'servlet_name_mappings',
        'url_pattern_mappings',
        'name',
        'class_name',
        'init_parameters',
    ]

    def __init__(self,
                 servlet_name_mappings=APIHelper.SKIP,
                 url_pattern_mappings=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 class_name=APIHelper.SKIP,
                 init_parameters=APIHelper.SKIP):
        """Constructor for the FilterRegistration class"""

        # Initialize members of the class
        if servlet_name_mappings is not APIHelper.SKIP:
            self.servlet_name_mappings = servlet_name_mappings 
        if url_pattern_mappings is not APIHelper.SKIP:
            self.url_pattern_mappings = url_pattern_mappings 
        if name is not APIHelper.SKIP:
            self.name = name 
        if class_name is not APIHelper.SKIP:
            self.class_name = class_name 
        if init_parameters is not APIHelper.SKIP:
            self.init_parameters = init_parameters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        servlet_name_mappings = dictionary.get("servletNameMappings") if dictionary.get("servletNameMappings") else APIHelper.SKIP
        url_pattern_mappings = dictionary.get("urlPatternMappings") if dictionary.get("urlPatternMappings") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        class_name = dictionary.get("className") if dictionary.get("className") else APIHelper.SKIP
        init_parameters = dictionary.get("initParameters") if dictionary.get("initParameters") else APIHelper.SKIP
        # Return an object of this model
        return cls(servlet_name_mappings,
                   url_pattern_mappings,
                   name,
                   class_name,
                   init_parameters)
