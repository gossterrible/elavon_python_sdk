# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.person_identification import PersonIdentification


class PrincipalOwnerDetail(object):

    """Implementation of the 'PrincipalOwnerDetail' model.

    TODO: type model description here.

    Attributes:
        responsible_party (bool): TODO: type description here.
        citizenship_country_code (string): TODO: type description here.
        identifications (list of PersonIdentification): TODO: type description
            here.
        date_of_birth (datetime): TODO: type description here.
        mid (string): TODO: type description here.
        percent_shares_held (string): TODO: type description here.
        share_holder_type (string): TODO: type description here.
        account_opener (bool): TODO: type description here.
        personal_guarantee (bool): TODO: type description here.
        alt_add_verify_doc_required (bool): TODO: type description here.
        alt_add_verify_doc_type (string): TODO: type description here.
        alt_add_verify_doc_txt (string): TODO: type description here.
        alt_add_verify_doc_verified (bool): TODO: type description here.
        email (string): TODO: type description here.
        verification_method (string): TODO: type description here.
        verification_date (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "responsible_party": 'responsibleParty',
        "citizenship_country_code": 'citizenshipCountryCode',
        "identifications": 'identifications',
        "date_of_birth": 'dateOfBirth',
        "mid": 'mid',
        "percent_shares_held": 'percentSharesHeld',
        "share_holder_type": 'shareHolderType',
        "account_opener": 'accountOpener',
        "personal_guarantee": 'personalGuarantee',
        "alt_add_verify_doc_required": 'altAddVerifyDocRequired',
        "alt_add_verify_doc_type": 'altAddVerifyDocType',
        "alt_add_verify_doc_txt": 'altAddVerifyDocTxt',
        "alt_add_verify_doc_verified": 'altAddVerifyDocVerified',
        "email": 'email',
        "verification_method": 'verificationMethod',
        "verification_date": 'verificationDate'
    }

    _optionals = [
        'responsible_party',
        'citizenship_country_code',
        'identifications',
        'date_of_birth',
        'mid',
        'percent_shares_held',
        'share_holder_type',
        'account_opener',
        'personal_guarantee',
        'alt_add_verify_doc_required',
        'alt_add_verify_doc_type',
        'alt_add_verify_doc_txt',
        'alt_add_verify_doc_verified',
        'email',
        'verification_method',
        'verification_date',
    ]

    def __init__(self,
                 responsible_party=APIHelper.SKIP,
                 citizenship_country_code=APIHelper.SKIP,
                 identifications=APIHelper.SKIP,
                 date_of_birth=APIHelper.SKIP,
                 mid=APIHelper.SKIP,
                 percent_shares_held=APIHelper.SKIP,
                 share_holder_type=APIHelper.SKIP,
                 account_opener=APIHelper.SKIP,
                 personal_guarantee=APIHelper.SKIP,
                 alt_add_verify_doc_required=APIHelper.SKIP,
                 alt_add_verify_doc_type=APIHelper.SKIP,
                 alt_add_verify_doc_txt=APIHelper.SKIP,
                 alt_add_verify_doc_verified=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 verification_method=APIHelper.SKIP,
                 verification_date=APIHelper.SKIP):
        """Constructor for the PrincipalOwnerDetail class"""

        # Initialize members of the class
        if responsible_party is not APIHelper.SKIP:
            self.responsible_party = responsible_party 
        if citizenship_country_code is not APIHelper.SKIP:
            self.citizenship_country_code = citizenship_country_code 
        if identifications is not APIHelper.SKIP:
            self.identifications = identifications 
        if date_of_birth is not APIHelper.SKIP:
            self.date_of_birth = APIHelper.RFC3339DateTime(date_of_birth) if date_of_birth else None 
        if mid is not APIHelper.SKIP:
            self.mid = mid 
        if percent_shares_held is not APIHelper.SKIP:
            self.percent_shares_held = percent_shares_held 
        if share_holder_type is not APIHelper.SKIP:
            self.share_holder_type = share_holder_type 
        if account_opener is not APIHelper.SKIP:
            self.account_opener = account_opener 
        if personal_guarantee is not APIHelper.SKIP:
            self.personal_guarantee = personal_guarantee 
        if alt_add_verify_doc_required is not APIHelper.SKIP:
            self.alt_add_verify_doc_required = alt_add_verify_doc_required 
        if alt_add_verify_doc_type is not APIHelper.SKIP:
            self.alt_add_verify_doc_type = alt_add_verify_doc_type 
        if alt_add_verify_doc_txt is not APIHelper.SKIP:
            self.alt_add_verify_doc_txt = alt_add_verify_doc_txt 
        if alt_add_verify_doc_verified is not APIHelper.SKIP:
            self.alt_add_verify_doc_verified = alt_add_verify_doc_verified 
        if email is not APIHelper.SKIP:
            self.email = email 
        if verification_method is not APIHelper.SKIP:
            self.verification_method = verification_method 
        if verification_date is not APIHelper.SKIP:
            self.verification_date = APIHelper.RFC3339DateTime(verification_date) if verification_date else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        responsible_party = dictionary.get("responsibleParty") if "responsibleParty" in dictionary.keys() else APIHelper.SKIP
        citizenship_country_code = dictionary.get("citizenshipCountryCode") if dictionary.get("citizenshipCountryCode") else APIHelper.SKIP
        identifications = None
        if dictionary.get('identifications') is not None:
            identifications = [PersonIdentification.from_dictionary(x) for x in dictionary.get('identifications')]
        else:
            identifications = APIHelper.SKIP
        date_of_birth = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateOfBirth")).datetime if dictionary.get("dateOfBirth") else APIHelper.SKIP
        mid = dictionary.get("mid") if dictionary.get("mid") else APIHelper.SKIP
        percent_shares_held = dictionary.get("percentSharesHeld") if dictionary.get("percentSharesHeld") else APIHelper.SKIP
        share_holder_type = dictionary.get("shareHolderType") if dictionary.get("shareHolderType") else APIHelper.SKIP
        account_opener = dictionary.get("accountOpener") if "accountOpener" in dictionary.keys() else APIHelper.SKIP
        personal_guarantee = dictionary.get("personalGuarantee") if "personalGuarantee" in dictionary.keys() else APIHelper.SKIP
        alt_add_verify_doc_required = dictionary.get("altAddVerifyDocRequired") if "altAddVerifyDocRequired" in dictionary.keys() else APIHelper.SKIP
        alt_add_verify_doc_type = dictionary.get("altAddVerifyDocType") if dictionary.get("altAddVerifyDocType") else APIHelper.SKIP
        alt_add_verify_doc_txt = dictionary.get("altAddVerifyDocTxt") if dictionary.get("altAddVerifyDocTxt") else APIHelper.SKIP
        alt_add_verify_doc_verified = dictionary.get("altAddVerifyDocVerified") if "altAddVerifyDocVerified" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        verification_method = dictionary.get("verificationMethod") if dictionary.get("verificationMethod") else APIHelper.SKIP
        verification_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("verificationDate")).datetime if dictionary.get("verificationDate") else APIHelper.SKIP
        # Return an object of this model
        return cls(responsible_party,
                   citizenship_country_code,
                   identifications,
                   date_of_birth,
                   mid,
                   percent_shares_held,
                   share_holder_type,
                   account_opener,
                   personal_guarantee,
                   alt_add_verify_doc_required,
                   alt_add_verify_doc_type,
                   alt_add_verify_doc_txt,
                   alt_add_verify_doc_verified,
                   email,
                   verification_method,
                   verification_date)
