# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.http_session_context import HttpSessionContext
from swaggerscarecrow.models.servlet_context import ServletContext


class HttpSession(object):

    """Implementation of the 'HttpSession' model.

    TODO: type model description here.

    Attributes:
        creation_time (long|int): TODO: type description here.
        id (string): TODO: type description here.
        new (bool): TODO: type description here.
        attribute_names (object): TODO: type description here.
        session_context (HttpSessionContext): TODO: type description here.
        last_accessed_time (long|int): TODO: type description here.
        value_names (list of string): TODO: type description here.
        servlet_context (ServletContext): TODO: type description here.
        max_inactive_interval (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "creation_time": 'creationTime',
        "id": 'id',
        "new": 'new',
        "attribute_names": 'attributeNames',
        "session_context": 'sessionContext',
        "last_accessed_time": 'lastAccessedTime',
        "value_names": 'valueNames',
        "servlet_context": 'servletContext',
        "max_inactive_interval": 'maxInactiveInterval'
    }

    _optionals = [
        'creation_time',
        'id',
        'new',
        'attribute_names',
        'session_context',
        'last_accessed_time',
        'value_names',
        'servlet_context',
        'max_inactive_interval',
    ]

    def __init__(self,
                 creation_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 new=APIHelper.SKIP,
                 attribute_names=APIHelper.SKIP,
                 session_context=APIHelper.SKIP,
                 last_accessed_time=APIHelper.SKIP,
                 value_names=APIHelper.SKIP,
                 servlet_context=APIHelper.SKIP,
                 max_inactive_interval=APIHelper.SKIP):
        """Constructor for the HttpSession class"""

        # Initialize members of the class
        if creation_time is not APIHelper.SKIP:
            self.creation_time = creation_time 
        if id is not APIHelper.SKIP:
            self.id = id 
        if new is not APIHelper.SKIP:
            self.new = new 
        if attribute_names is not APIHelper.SKIP:
            self.attribute_names = attribute_names 
        if session_context is not APIHelper.SKIP:
            self.session_context = session_context 
        if last_accessed_time is not APIHelper.SKIP:
            self.last_accessed_time = last_accessed_time 
        if value_names is not APIHelper.SKIP:
            self.value_names = value_names 
        if servlet_context is not APIHelper.SKIP:
            self.servlet_context = servlet_context 
        if max_inactive_interval is not APIHelper.SKIP:
            self.max_inactive_interval = max_inactive_interval 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        creation_time = dictionary.get("creationTime") if dictionary.get("creationTime") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        new = dictionary.get("new") if "new" in dictionary.keys() else APIHelper.SKIP
        attribute_names = dictionary.get("attributeNames") if dictionary.get("attributeNames") else APIHelper.SKIP
        session_context = HttpSessionContext.from_dictionary(dictionary.get('sessionContext')) if 'sessionContext' in dictionary.keys() else APIHelper.SKIP 
        last_accessed_time = dictionary.get("lastAccessedTime") if dictionary.get("lastAccessedTime") else APIHelper.SKIP
        value_names = dictionary.get("valueNames") if dictionary.get("valueNames") else APIHelper.SKIP
        servlet_context = ServletContext.from_dictionary(dictionary.get('servletContext')) if 'servletContext' in dictionary.keys() else APIHelper.SKIP 
        max_inactive_interval = dictionary.get("maxInactiveInterval") if dictionary.get("maxInactiveInterval") else APIHelper.SKIP
        # Return an object of this model
        return cls(creation_time,
                   id,
                   new,
                   attribute_names,
                   session_context,
                   last_accessed_time,
                   value_names,
                   servlet_context,
                   max_inactive_interval)
