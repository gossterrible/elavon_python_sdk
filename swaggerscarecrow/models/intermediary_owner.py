# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.address import Address
from swaggerscarecrow.models.name import Name
from swaggerscarecrow.models.phone_number import PhoneNumber


class IntermediaryOwner(object):

    """Implementation of the 'IntermediaryOwner' model.

    TODO: type model description here.

    Attributes:
        ownership_pct (string): TODO: type description here.
        business_name (string): TODO: type description here.
        owner_name (Name): TODO: type description here.
        phone (PhoneNumber): TODO: type description here.
        email_address (string): TODO: type description here.
        address (Address): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ownership_pct": 'ownershipPct',
        "business_name": 'businessName',
        "owner_name": 'ownerName',
        "phone": 'phone',
        "email_address": 'emailAddress',
        "address": 'address'
    }

    _optionals = [
        'ownership_pct',
        'business_name',
        'owner_name',
        'phone',
        'email_address',
        'address',
    ]

    def __init__(self,
                 ownership_pct=APIHelper.SKIP,
                 business_name=APIHelper.SKIP,
                 owner_name=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 email_address=APIHelper.SKIP,
                 address=APIHelper.SKIP):
        """Constructor for the IntermediaryOwner class"""

        # Initialize members of the class
        if ownership_pct is not APIHelper.SKIP:
            self.ownership_pct = ownership_pct 
        if business_name is not APIHelper.SKIP:
            self.business_name = business_name 
        if owner_name is not APIHelper.SKIP:
            self.owner_name = owner_name 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if email_address is not APIHelper.SKIP:
            self.email_address = email_address 
        if address is not APIHelper.SKIP:
            self.address = address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ownership_pct = dictionary.get("ownershipPct") if dictionary.get("ownershipPct") else APIHelper.SKIP
        business_name = dictionary.get("businessName") if dictionary.get("businessName") else APIHelper.SKIP
        owner_name = Name.from_dictionary(dictionary.get('ownerName')) if 'ownerName' in dictionary.keys() else APIHelper.SKIP 
        phone = PhoneNumber.from_dictionary(dictionary.get('phone')) if 'phone' in dictionary.keys() else APIHelper.SKIP 
        email_address = dictionary.get("emailAddress") if dictionary.get("emailAddress") else APIHelper.SKIP
        address = Address.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(ownership_pct,
                   business_name,
                   owner_name,
                   phone,
                   email_address,
                   address)
