# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.date_components import DateComponents
from swaggerscarecrow.models.equipment_item import EquipmentItem
from swaggerscarecrow.models.fusebox_info import FuseboxInfo
from swaggerscarecrow.models.terminal_service import TerminalService


class EquipmentInfo(object):

    """Implementation of the 'EquipmentInfo' model.

    In NA, it's mandatory to have at least one piece of equipment. For third
    party vendors 
              managing their own equipment, at least one Value Added Reseller
              (VAR) code must be sent. 
              Contact your Elavon representative for the VAR code(s).
              In EU, equipmentInfo is optional and no equipment has to be
              sent. If you have any equipment 
              managed by Elavon, contact your Elavon representative for the
              VAR code(s).

    Attributes:
        equipment_items (list of EquipmentItem): Equipment item listing
        terminal_services (list of TerminalService): Terminal services to be
            applied to equipment items
        training_type (TrainingTypeEnum): [NA] Type of training to be given
            for equipment
        shipping_method (ShippingMethodEnum): Shipping of equipment priority
        network (NetworkEnum): Network equipment will be connected to
        fusebox_info (FuseboxInfo): TODO: type description here.
        anticipated_start_date (DateComponents): A container that holds the
            date (day, month, and year)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "equipment_items": 'equipmentItems',
        "fusebox_info": 'fuseboxInfo',
        "terminal_services": 'terminalServices',
        "training_type": 'trainingType',
        "shipping_method": 'shippingMethod',
        "network": 'network',
        "anticipated_start_date": 'anticipatedStartDate'
    }

    _optionals = [
        'terminal_services',
        'training_type',
        'shipping_method',
        'network',
        'anticipated_start_date',
    ]

    def __init__(self,
                 equipment_items=None,
                 fusebox_info=None,
                 terminal_services=APIHelper.SKIP,
                 training_type=APIHelper.SKIP,
                 shipping_method=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 anticipated_start_date=APIHelper.SKIP):
        """Constructor for the EquipmentInfo class"""

        # Initialize members of the class
        self.equipment_items = equipment_items 
        if terminal_services is not APIHelper.SKIP:
            self.terminal_services = terminal_services 
        if training_type is not APIHelper.SKIP:
            self.training_type = training_type 
        if shipping_method is not APIHelper.SKIP:
            self.shipping_method = shipping_method 
        if network is not APIHelper.SKIP:
            self.network = network 
        self.fusebox_info = fusebox_info 
        if anticipated_start_date is not APIHelper.SKIP:
            self.anticipated_start_date = anticipated_start_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        equipment_items = None
        if dictionary.get('equipmentItems') is not None:
            equipment_items = [EquipmentItem.from_dictionary(x) for x in dictionary.get('equipmentItems')]
        fusebox_info = FuseboxInfo.from_dictionary(dictionary.get('fuseboxInfo')) if dictionary.get('fuseboxInfo') else None
        terminal_services = None
        if dictionary.get('terminalServices') is not None:
            terminal_services = [TerminalService.from_dictionary(x) for x in dictionary.get('terminalServices')]
        else:
            terminal_services = APIHelper.SKIP
        training_type = dictionary.get("trainingType") if dictionary.get("trainingType") else APIHelper.SKIP
        shipping_method = dictionary.get("shippingMethod") if dictionary.get("shippingMethod") else APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        anticipated_start_date = DateComponents.from_dictionary(dictionary.get('anticipatedStartDate')) if 'anticipatedStartDate' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(equipment_items,
                   fusebox_info,
                   terminal_services,
                   training_type,
                   shipping_method,
                   network,
                   anticipated_start_date)
