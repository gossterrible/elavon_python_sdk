# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.class_loader import *
from swaggerscarecrow.models.module_descriptor import ModuleDescriptor


class Module(object):

    """Implementation of the 'Module' model.

    TODO: type model description here.

    Attributes:
        layer (object): TODO: type description here.
        name (string): TODO: type description here.
        descriptor (ModuleDescriptor): TODO: type description here.
        class_loader (ClassLoader): TODO: type description here.
        annotations (list of object): TODO: type description here.
        declared_annotations (list of object): TODO: type description here.
        named (bool): TODO: type description here.
        packages (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "layer": 'layer',
        "name": 'name',
        "descriptor": 'descriptor',
        "class_loader": 'classLoader',
        "annotations": 'annotations',
        "declared_annotations": 'declaredAnnotations',
        "named": 'named',
        "packages": 'packages'
    }

    _optionals = [
        'layer',
        'name',
        'descriptor',
        'class_loader',
        'annotations',
        'declared_annotations',
        'named',
        'packages',
    ]

    def __init__(self,
                 layer=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 descriptor=APIHelper.SKIP,
                 class_loader=APIHelper.SKIP,
                 annotations=APIHelper.SKIP,
                 declared_annotations=APIHelper.SKIP,
                 named=APIHelper.SKIP,
                 packages=APIHelper.SKIP):
        """Constructor for the Module class"""

        # Initialize members of the class
        if layer is not APIHelper.SKIP:
            self.layer = layer 
        if name is not APIHelper.SKIP:
            self.name = name 
        if descriptor is not APIHelper.SKIP:
            self.descriptor = descriptor 
        if class_loader is not APIHelper.SKIP:
            self.class_loader = class_loader 
        if annotations is not APIHelper.SKIP:
            self.annotations = annotations 
        if declared_annotations is not APIHelper.SKIP:
            self.declared_annotations = declared_annotations 
        if named is not APIHelper.SKIP:
            self.named = named 
        if packages is not APIHelper.SKIP:
            self.packages = packages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        layer = dictionary.get("layer") if dictionary.get("layer") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        descriptor = ModuleDescriptor.from_dictionary(dictionary.get('descriptor')) if 'descriptor' in dictionary.keys() else APIHelper.SKIP 
        class_loader = ClassLoader.from_dictionary(dictionary.get('classLoader')) if 'classLoader' in dictionary.keys() else APIHelper.SKIP 
        annotations = dictionary.get("annotations") if dictionary.get("annotations") else APIHelper.SKIP
        declared_annotations = dictionary.get("declaredAnnotations") if dictionary.get("declaredAnnotations") else APIHelper.SKIP
        named = dictionary.get("named") if "named" in dictionary.keys() else APIHelper.SKIP
        packages = dictionary.get("packages") if dictionary.get("packages") else APIHelper.SKIP
        # Return an object of this model
        return cls(layer,
                   name,
                   descriptor,
                   class_loader,
                   annotations,
                   declared_annotations,
                   named,
                   packages)
