# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.address_fields import AddressFields
from swaggerscarecrow.models.person_name_fields import PersonNameFields
from swaggerscarecrow.models.phone_fields import PhoneFields
from swaggerscarecrow.models.principal_owner_detail import PrincipalOwnerDetail


class CompanyShareHolder(object):

    """Implementation of the 'CompanyShareHolder' model.

    TODO: type model description here.

    Attributes:
        name (string): TODO: type description here.
        percent_shares_held (string): TODO: type description here.
        share_holder_type (string): TODO: type description here.
        address (AddressFields): TODO: type description here.
        person_name_fields (PersonNameFields): TODO: type description here.
        phone_fields (PhoneFields): TODO: type description here.
        share_holder_identifier (string): TODO: type description here.
        pesel (string): TODO: type description here.
        principal_owner_detail (PrincipalOwnerDetail): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "percent_shares_held": 'percentSharesHeld',
        "share_holder_type": 'shareHolderType',
        "address": 'address',
        "person_name_fields": 'personNameFields',
        "phone_fields": 'phoneFields',
        "share_holder_identifier": 'shareHolderIdentifier',
        "pesel": 'pesel',
        "principal_owner_detail": 'principalOwnerDetail'
    }

    _optionals = [
        'name',
        'percent_shares_held',
        'share_holder_type',
        'address',
        'person_name_fields',
        'phone_fields',
        'share_holder_identifier',
        'pesel',
        'principal_owner_detail',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 percent_shares_held=APIHelper.SKIP,
                 share_holder_type=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 person_name_fields=APIHelper.SKIP,
                 phone_fields=APIHelper.SKIP,
                 share_holder_identifier=APIHelper.SKIP,
                 pesel=APIHelper.SKIP,
                 principal_owner_detail=APIHelper.SKIP):
        """Constructor for the CompanyShareHolder class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if percent_shares_held is not APIHelper.SKIP:
            self.percent_shares_held = percent_shares_held 
        if share_holder_type is not APIHelper.SKIP:
            self.share_holder_type = share_holder_type 
        if address is not APIHelper.SKIP:
            self.address = address 
        if person_name_fields is not APIHelper.SKIP:
            self.person_name_fields = person_name_fields 
        if phone_fields is not APIHelper.SKIP:
            self.phone_fields = phone_fields 
        if share_holder_identifier is not APIHelper.SKIP:
            self.share_holder_identifier = share_holder_identifier 
        if pesel is not APIHelper.SKIP:
            self.pesel = pesel 
        if principal_owner_detail is not APIHelper.SKIP:
            self.principal_owner_detail = principal_owner_detail 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        percent_shares_held = dictionary.get("percentSharesHeld") if dictionary.get("percentSharesHeld") else APIHelper.SKIP
        share_holder_type = dictionary.get("shareHolderType") if dictionary.get("shareHolderType") else APIHelper.SKIP
        address = AddressFields.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP 
        person_name_fields = PersonNameFields.from_dictionary(dictionary.get('personNameFields')) if 'personNameFields' in dictionary.keys() else APIHelper.SKIP 
        phone_fields = PhoneFields.from_dictionary(dictionary.get('phoneFields')) if 'phoneFields' in dictionary.keys() else APIHelper.SKIP 
        share_holder_identifier = dictionary.get("shareHolderIdentifier") if dictionary.get("shareHolderIdentifier") else APIHelper.SKIP
        pesel = dictionary.get("pesel") if dictionary.get("pesel") else APIHelper.SKIP
        principal_owner_detail = PrincipalOwnerDetail.from_dictionary(dictionary.get('principalOwnerDetail')) if 'principalOwnerDetail' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(name,
                   percent_shares_held,
                   share_holder_type,
                   address,
                   person_name_fields,
                   phone_fields,
                   share_holder_identifier,
                   pesel,
                   principal_owner_detail)
