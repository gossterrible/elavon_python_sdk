# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class OcmInfo(object):

    """Implementation of the 'OcmInfo' model.

    TODO: type model description here.

    Attributes:
        setup_type (string): OCM Service Type
        setup_fee (float): OCM setup fee to apply
        monthly_fee (float): OCM monthly fee to apply
        number_of_users (int): OCM number of users

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "setup_type": 'setupType',
        "setup_fee": 'setupFee',
        "monthly_fee": 'monthlyFee',
        "number_of_users": 'numberOfUsers'
    }

    _optionals = [
        'setup_fee',
        'monthly_fee',
        'number_of_users',
    ]

    def __init__(self,
                 setup_type=None,
                 setup_fee=APIHelper.SKIP,
                 monthly_fee=APIHelper.SKIP,
                 number_of_users=APIHelper.SKIP):
        """Constructor for the OcmInfo class"""

        # Initialize members of the class
        self.setup_type = setup_type 
        if setup_fee is not APIHelper.SKIP:
            self.setup_fee = setup_fee 
        if monthly_fee is not APIHelper.SKIP:
            self.monthly_fee = monthly_fee 
        if number_of_users is not APIHelper.SKIP:
            self.number_of_users = number_of_users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        setup_type = dictionary.get("setupType") if dictionary.get("setupType") else None
        setup_fee = dictionary.get("setupFee") if dictionary.get("setupFee") else APIHelper.SKIP
        monthly_fee = dictionary.get("monthlyFee") if dictionary.get("monthlyFee") else APIHelper.SKIP
        number_of_users = dictionary.get("numberOfUsers") if dictionary.get("numberOfUsers") else APIHelper.SKIP
        # Return an object of this model
        return cls(setup_type,
                   setup_fee,
                   monthly_fee,
                   number_of_users)
