# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class PartnerInfo(object):

    """Implementation of the 'PartnerInfo' model.

    TODO: type model description here.

    Attributes:
        partner_name (string): TODO: type description here.
        associate_id (string): TODO: type description here.
        book_of_business (string): TODO: type description here.
        correlation_id (string): TODO: type description here.
        partner_source (string): TODO: type description here.
        merchant_user_id (string): Client End User Id
        session_id (string): Fraudnet Id for tracking, required if
            merchantUserId is provided

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "merchant_user_id": 'merchantUserId',
        "session_id": 'sessionId',
        "partner_name": 'partnerName',
        "associate_id": 'associateId',
        "book_of_business": 'bookOfBusiness',
        "correlation_id": 'correlationId',
        "partner_source": 'partnerSource'
    }

    _optionals = [
        'partner_name',
        'associate_id',
        'book_of_business',
        'correlation_id',
        'partner_source',
    ]

    def __init__(self,
                 merchant_user_id=None,
                 session_id=None,
                 partner_name=APIHelper.SKIP,
                 associate_id=APIHelper.SKIP,
                 book_of_business=APIHelper.SKIP,
                 correlation_id=APIHelper.SKIP,
                 partner_source=APIHelper.SKIP):
        """Constructor for the PartnerInfo class"""

        # Initialize members of the class
        if partner_name is not APIHelper.SKIP:
            self.partner_name = partner_name 
        if associate_id is not APIHelper.SKIP:
            self.associate_id = associate_id 
        if book_of_business is not APIHelper.SKIP:
            self.book_of_business = book_of_business 
        if correlation_id is not APIHelper.SKIP:
            self.correlation_id = correlation_id 
        if partner_source is not APIHelper.SKIP:
            self.partner_source = partner_source 
        self.merchant_user_id = merchant_user_id 
        self.session_id = session_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        merchant_user_id = dictionary.get("merchantUserId") if dictionary.get("merchantUserId") else None
        session_id = dictionary.get("sessionId") if dictionary.get("sessionId") else None
        partner_name = dictionary.get("partnerName") if dictionary.get("partnerName") else APIHelper.SKIP
        associate_id = dictionary.get("associateId") if dictionary.get("associateId") else APIHelper.SKIP
        book_of_business = dictionary.get("bookOfBusiness") if dictionary.get("bookOfBusiness") else APIHelper.SKIP
        correlation_id = dictionary.get("correlationId") if dictionary.get("correlationId") else APIHelper.SKIP
        partner_source = dictionary.get("partnerSource") if dictionary.get("partnerSource") else APIHelper.SKIP
        # Return an object of this model
        return cls(merchant_user_id,
                   session_id,
                   partner_name,
                   associate_id,
                   book_of_business,
                   correlation_id,
                   partner_source)
