# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class DistributionInfo(object):

    """Implementation of the 'DistributionInfo' model.

    TODO: type model description here.

    Attributes:
        method (MethodEnum): Method of distribution
        address_type (AddressType2Enum): Physical address, applicable if
            distribution method is non-electronic
        email_address (string): Email address, applicable if distribution
            method is electronic

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "method": 'method',
        "address_type": 'addressType',
        "email_address": 'emailAddress'
    }

    _optionals = [
        'address_type',
        'email_address',
    ]

    def __init__(self,
                 method=None,
                 address_type=APIHelper.SKIP,
                 email_address=APIHelper.SKIP):
        """Constructor for the DistributionInfo class"""

        # Initialize members of the class
        self.method = method 
        if address_type is not APIHelper.SKIP:
            self.address_type = address_type 
        if email_address is not APIHelper.SKIP:
            self.email_address = email_address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        method = dictionary.get("method") if dictionary.get("method") else None
        address_type = dictionary.get("addressType") if dictionary.get("addressType") else APIHelper.SKIP
        email_address = dictionary.get("emailAddress") if dictionary.get("emailAddress") else APIHelper.SKIP
        # Return an object of this model
        return cls(method,
                   address_type,
                   email_address)
