# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.field_auto_info import FieldAutoInfo
from swaggerscarecrow.models.sales_rep_info import SalesRepInfo


class InternalUseInfo(object):

    """Implementation of the 'InternalUseInfo' model.

    TODO: type model description here.

    Attributes:
        field_auto_info (FieldAutoInfo): TODO: type description here.
        sales_rep_info (SalesRepInfo): TODO: type description here.
        tin_applied_to_all (bool): Flag for GBAPI for if this app might have
            business level mappings.  If null assume business level map mode
            is true
        ip_address (string): [NA] IP Address of the customer who signed the
            application

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_auto_info": 'fieldAutoInfo',
        "sales_rep_info": 'salesRepInfo',
        "tin_applied_to_all": 'tinAppliedToAll',
        "ip_address": 'ipAddress'
    }

    _optionals = [
        'field_auto_info',
        'sales_rep_info',
        'tin_applied_to_all',
        'ip_address',
    ]

    def __init__(self,
                 field_auto_info=APIHelper.SKIP,
                 sales_rep_info=APIHelper.SKIP,
                 tin_applied_to_all=APIHelper.SKIP,
                 ip_address=APIHelper.SKIP):
        """Constructor for the InternalUseInfo class"""

        # Initialize members of the class
        if field_auto_info is not APIHelper.SKIP:
            self.field_auto_info = field_auto_info 
        if sales_rep_info is not APIHelper.SKIP:
            self.sales_rep_info = sales_rep_info 
        if tin_applied_to_all is not APIHelper.SKIP:
            self.tin_applied_to_all = tin_applied_to_all 
        if ip_address is not APIHelper.SKIP:
            self.ip_address = ip_address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        field_auto_info = FieldAutoInfo.from_dictionary(dictionary.get('fieldAutoInfo')) if 'fieldAutoInfo' in dictionary.keys() else APIHelper.SKIP 
        sales_rep_info = SalesRepInfo.from_dictionary(dictionary.get('salesRepInfo')) if 'salesRepInfo' in dictionary.keys() else APIHelper.SKIP 
        tin_applied_to_all = dictionary.get("tinAppliedToAll") if "tinAppliedToAll" in dictionary.keys() else APIHelper.SKIP
        ip_address = dictionary.get("ipAddress") if dictionary.get("ipAddress") else APIHelper.SKIP
        # Return an object of this model
        return cls(field_auto_info,
                   sales_rep_info,
                   tin_applied_to_all,
                   ip_address)
