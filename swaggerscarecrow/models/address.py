# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.name import Name


class Address(object):

    """Implementation of the 'Address' model.

    TODO: type model description here.

    Attributes:
        street_name (string): Line one of address, name
        street_number (string): Line one of address, number
        line_two (string): Line two of address
        line_three (string): Line three of address
        city (string): City of address
        county (string): County of address
        post_code (string): Postal/Zip code of address
        country (string): Country of address, ISO 3166-1 alpha-3 standard
            applies
        state (StateEnum): State/Province of address
        classification (ClassificationEnum): [NA] Type of address
        contact_name (Name): TODO: type description here.
        location_name (string): [NA] Name of address local name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "street_name": 'streetName',
        "city": 'city',
        "country": 'country',
        "street_number": 'streetNumber',
        "line_two": 'lineTwo',
        "line_three": 'lineThree',
        "county": 'county',
        "post_code": 'postCode',
        "state": 'state',
        "classification": 'classification',
        "contact_name": 'contactName',
        "location_name": 'locationName'
    }

    _optionals = [
        'street_number',
        'line_two',
        'line_three',
        'county',
        'post_code',
        'state',
        'classification',
        'contact_name',
        'location_name',
    ]

    def __init__(self,
                 street_name=None,
                 city=None,
                 country=None,
                 street_number=APIHelper.SKIP,
                 line_two=APIHelper.SKIP,
                 line_three=APIHelper.SKIP,
                 county=APIHelper.SKIP,
                 post_code=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 classification=APIHelper.SKIP,
                 contact_name=APIHelper.SKIP,
                 location_name=APIHelper.SKIP):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.street_name = street_name 
        if street_number is not APIHelper.SKIP:
            self.street_number = street_number 
        if line_two is not APIHelper.SKIP:
            self.line_two = line_two 
        if line_three is not APIHelper.SKIP:
            self.line_three = line_three 
        self.city = city 
        if county is not APIHelper.SKIP:
            self.county = county 
        if post_code is not APIHelper.SKIP:
            self.post_code = post_code 
        self.country = country 
        if state is not APIHelper.SKIP:
            self.state = state 
        if classification is not APIHelper.SKIP:
            self.classification = classification 
        if contact_name is not APIHelper.SKIP:
            self.contact_name = contact_name 
        if location_name is not APIHelper.SKIP:
            self.location_name = location_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        street_name = dictionary.get("streetName") if dictionary.get("streetName") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        street_number = dictionary.get("streetNumber") if dictionary.get("streetNumber") else APIHelper.SKIP
        line_two = dictionary.get("lineTwo") if dictionary.get("lineTwo") else APIHelper.SKIP
        line_three = dictionary.get("lineThree") if dictionary.get("lineThree") else APIHelper.SKIP
        county = dictionary.get("county") if dictionary.get("county") else APIHelper.SKIP
        post_code = dictionary.get("postCode") if dictionary.get("postCode") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        classification = dictionary.get("classification") if dictionary.get("classification") else APIHelper.SKIP
        contact_name = Name.from_dictionary(dictionary.get('contactName')) if 'contactName' in dictionary.keys() else APIHelper.SKIP 
        location_name = dictionary.get("locationName") if dictionary.get("locationName") else APIHelper.SKIP
        # Return an object of this model
        return cls(street_name,
                   city,
                   country,
                   street_number,
                   line_two,
                   line_three,
                   county,
                   post_code,
                   state,
                   classification,
                   contact_name,
                   location_name)
