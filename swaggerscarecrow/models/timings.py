# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class Timings(object):

    """Implementation of the 'Timings' model.

    TODO: type model description here.

    Attributes:
        start_time (long|int): TODO: type description here.
        request_send_time (long|int): TODO: type description here.
        response_recv_time (long|int): TODO: type description here.
        end_time (long|int): TODO: type description here.
        total_time (long|int): TODO: type description here.
        response_time (long|int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_time": 'startTime',
        "request_send_time": 'requestSendTime',
        "response_recv_time": 'responseRecvTime',
        "end_time": 'endTime',
        "total_time": 'totalTime',
        "response_time": 'responseTime'
    }

    _optionals = [
        'start_time',
        'request_send_time',
        'response_recv_time',
        'end_time',
        'total_time',
        'response_time',
    ]

    def __init__(self,
                 start_time=APIHelper.SKIP,
                 request_send_time=APIHelper.SKIP,
                 response_recv_time=APIHelper.SKIP,
                 end_time=APIHelper.SKIP,
                 total_time=APIHelper.SKIP,
                 response_time=APIHelper.SKIP):
        """Constructor for the Timings class"""

        # Initialize members of the class
        if start_time is not APIHelper.SKIP:
            self.start_time = start_time 
        if request_send_time is not APIHelper.SKIP:
            self.request_send_time = request_send_time 
        if response_recv_time is not APIHelper.SKIP:
            self.response_recv_time = response_recv_time 
        if end_time is not APIHelper.SKIP:
            self.end_time = end_time 
        if total_time is not APIHelper.SKIP:
            self.total_time = total_time 
        if response_time is not APIHelper.SKIP:
            self.response_time = response_time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        start_time = dictionary.get("startTime") if dictionary.get("startTime") else APIHelper.SKIP
        request_send_time = dictionary.get("requestSendTime") if dictionary.get("requestSendTime") else APIHelper.SKIP
        response_recv_time = dictionary.get("responseRecvTime") if dictionary.get("responseRecvTime") else APIHelper.SKIP
        end_time = dictionary.get("endTime") if dictionary.get("endTime") else APIHelper.SKIP
        total_time = dictionary.get("totalTime") if dictionary.get("totalTime") else APIHelper.SKIP
        response_time = dictionary.get("responseTime") if dictionary.get("responseTime") else APIHelper.SKIP
        # Return an object of this model
        return cls(start_time,
                   request_send_time,
                   response_recv_time,
                   end_time,
                   total_time,
                   response_time)
