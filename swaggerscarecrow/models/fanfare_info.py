# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.enrollment_info import EnrollmentInfo
from swaggerscarecrow.models.loyalty_info import LoyaltyInfo


class FanfareInfo(object):

    """Implementation of the 'FanfareInfo' model.

    TODO: type model description here.

    Attributes:
        max_card_value (string): TODO: type description here.
        package_type (PackageTypeEnum): TODO: type description here.
        enrollment (dict): TODO: type description here.
        loyalty (dict): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "max_card_value": 'maxCardValue',
        "package_type": 'packageType',
        "enrollment": 'enrollment',
        "loyalty": 'loyalty'
    }

    _optionals = [
        'max_card_value',
        'package_type',
        'enrollment',
        'loyalty',
    ]

    def __init__(self,
                 max_card_value=APIHelper.SKIP,
                 package_type=APIHelper.SKIP,
                 enrollment=APIHelper.SKIP,
                 loyalty=APIHelper.SKIP):
        """Constructor for the FanfareInfo class"""

        # Initialize members of the class
        if max_card_value is not APIHelper.SKIP:
            self.max_card_value = max_card_value 
        if package_type is not APIHelper.SKIP:
            self.package_type = package_type 
        if enrollment is not APIHelper.SKIP:
            self.enrollment = enrollment 
        if loyalty is not APIHelper.SKIP:
            self.loyalty = loyalty 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        max_card_value = dictionary.get("maxCardValue") if dictionary.get("maxCardValue") else APIHelper.SKIP
        package_type = dictionary.get("packageType") if dictionary.get("packageType") else APIHelper.SKIP
        enrollment = EnrollmentInfo.from_dictionary(dictionary.get('enrollment')) if 'enrollment' in dictionary.keys() else APIHelper.SKIP 
        loyalty = LoyaltyInfo.from_dictionary(dictionary.get('loyalty')) if 'loyalty' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(max_card_value,
                   package_type,
                   enrollment,
                   loyalty)
