# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class AdditionalCardPricingInfo(object):

    """Implementation of the 'AdditionalCardPricingInfo' model.

    TODO: type model description here.

    Attributes:
        minimum_card_fee (float): Minimum charge fee to be applied to card
        clear_and_simple_type (string): The type of the clear and simple plan
        c_4_pricing_type (string): The type of the C4 pricing plan
        high_risk_cost_additional_loading (string): Risk loading percentage as
            it relates to Simplified MSC

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "minimum_card_fee": 'minimumCardFee',
        "clear_and_simple_type": 'clearAndSimpleType',
        "c_4_pricing_type": 'c4PricingType',
        "high_risk_cost_additional_loading": 'highRiskCostAdditionalLoading'
    }

    _optionals = [
        'minimum_card_fee',
        'clear_and_simple_type',
        'c_4_pricing_type',
        'high_risk_cost_additional_loading',
    ]

    def __init__(self,
                 minimum_card_fee=APIHelper.SKIP,
                 clear_and_simple_type=APIHelper.SKIP,
                 c_4_pricing_type=APIHelper.SKIP,
                 high_risk_cost_additional_loading=APIHelper.SKIP):
        """Constructor for the AdditionalCardPricingInfo class"""

        # Initialize members of the class
        if minimum_card_fee is not APIHelper.SKIP:
            self.minimum_card_fee = minimum_card_fee 
        if clear_and_simple_type is not APIHelper.SKIP:
            self.clear_and_simple_type = clear_and_simple_type 
        if c_4_pricing_type is not APIHelper.SKIP:
            self.c_4_pricing_type = c_4_pricing_type 
        if high_risk_cost_additional_loading is not APIHelper.SKIP:
            self.high_risk_cost_additional_loading = high_risk_cost_additional_loading 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        minimum_card_fee = dictionary.get("minimumCardFee") if dictionary.get("minimumCardFee") else APIHelper.SKIP
        clear_and_simple_type = dictionary.get("clearAndSimpleType") if dictionary.get("clearAndSimpleType") else APIHelper.SKIP
        c_4_pricing_type = dictionary.get("c4PricingType") if dictionary.get("c4PricingType") else APIHelper.SKIP
        high_risk_cost_additional_loading = dictionary.get("highRiskCostAdditionalLoading") if dictionary.get("highRiskCostAdditionalLoading") else APIHelper.SKIP
        # Return an object of this model
        return cls(minimum_card_fee,
                   clear_and_simple_type,
                   c_4_pricing_type,
                   high_risk_cost_additional_loading)
