# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.boarding_status_message import BoardingStatusMessage


class UploadedDocumentDataResponse(object):

    """Implementation of the 'UploadedDocumentDataResponse' model.

    TODO: type model description here.

    Attributes:
        document_id (string): Identifier of document passed in prior upload
            document request
        document_status (string): Status of uploaded document
        messages (BoardingStatusMessage): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "document_id": 'documentId',
        "document_status": 'documentStatus',
        "messages": 'messages'
    }

    _optionals = [
        'document_id',
        'document_status',
        'messages',
    ]

    def __init__(self,
                 document_id=APIHelper.SKIP,
                 document_status=APIHelper.SKIP,
                 messages=APIHelper.SKIP):
        """Constructor for the UploadedDocumentDataResponse class"""

        # Initialize members of the class
        if document_id is not APIHelper.SKIP:
            self.document_id = document_id 
        if document_status is not APIHelper.SKIP:
            self.document_status = document_status 
        if messages is not APIHelper.SKIP:
            self.messages = messages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        document_id = dictionary.get("documentId") if dictionary.get("documentId") else APIHelper.SKIP
        document_status = dictionary.get("documentStatus") if dictionary.get("documentStatus") else APIHelper.SKIP
        messages = BoardingStatusMessage.from_dictionary(dictionary.get('messages')) if 'messages' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(document_id,
                   document_status,
                   messages)
