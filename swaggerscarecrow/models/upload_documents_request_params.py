# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.models.image_document_data import ImageDocumentData


class UploadDocumentsRequestParams(object):

    """Implementation of the 'UploadDocumentsRequestParams' model.

    TODO: type model description here.

    Attributes:
        boarding_id (string): MID(EU)/AWB(NA) of application to upload
            documents for, MID can be used in NA if it has been generated
        client_id (string): Client id of application submission, to be
            provided to partners, and should match value present on boarding
            request
        unique_id (string): Unique identifier of application submission,
            alphanumeric. Provided by the client.The uniqueId must be wholly
            original and never repeated. The client's name followed by a
            millisecond timestamp would work well.
        country (string): Country of application submission, ISO 3166-1
            alpha-3 standard applies, and should match value present on
            boarding request
        sales_rep_number (string): Identifier of sales representative
            responsible for submission, should match value present on boarding
            request
        image_document_data (ImageDocumentData): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "boarding_id": 'boardingId',
        "client_id": 'clientId',
        "unique_id": 'uniqueId',
        "country": 'country',
        "sales_rep_number": 'salesRepNumber',
        "image_document_data": 'imageDocumentData'
    }

    def __init__(self,
                 boarding_id=None,
                 client_id=None,
                 unique_id=None,
                 country=None,
                 sales_rep_number=None,
                 image_document_data=None):
        """Constructor for the UploadDocumentsRequestParams class"""

        # Initialize members of the class
        self.boarding_id = boarding_id 
        self.client_id = client_id 
        self.unique_id = unique_id 
        self.country = country 
        self.sales_rep_number = sales_rep_number 
        self.image_document_data = image_document_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        boarding_id = dictionary.get("boardingId") if dictionary.get("boardingId") else None
        client_id = dictionary.get("clientId") if dictionary.get("clientId") else None
        unique_id = dictionary.get("uniqueId") if dictionary.get("uniqueId") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        sales_rep_number = dictionary.get("salesRepNumber") if dictionary.get("salesRepNumber") else None
        image_document_data = ImageDocumentData.from_dictionary(dictionary.get('imageDocumentData')) if dictionary.get('imageDocumentData') else None
        # Return an object of this model
        return cls(boarding_id,
                   client_id,
                   unique_id,
                   country,
                   sales_rep_number,
                   image_document_data)
