# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.additional_document_fields import AdditionalDocumentFields


class ImageDocument(object):

    """Implementation of the 'ImageDocument' model.

    TODO: type model description here.

    Attributes:
        image_id (int): Unique identifier of document
        image_type_code (string): Type of document to upload, default to
            "APPLI"
        dba_name (string): DBA name of application submission document is to
            be associated with
        scan_date (datetime): Date document was scanned
        mime_type_code (MimeTypeCodeEnum): MIME type
        image_content (list of string): Base 64 encoded document
        additional_document_fields (list of AdditionalDocumentFields):
            Additional lable specifications
        name (string): Document name
        category (CategoryEnum): Document Category

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "image_id": 'imageId',
        "image_type_code": 'imageTypeCode',
        "dba_name": 'dbaName',
        "mime_type_code": 'mimeTypeCode',
        "image_content": 'imageContent',
        "scan_date": 'scanDate',
        "additional_document_fields": 'additionalDocumentFields',
        "name": 'name',
        "category": 'category'
    }

    _optionals = [
        'scan_date',
        'additional_document_fields',
        'name',
        'category',
    ]

    def __init__(self,
                 image_id=None,
                 image_type_code=None,
                 dba_name=None,
                 mime_type_code=None,
                 image_content=None,
                 scan_date=APIHelper.SKIP,
                 additional_document_fields=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 category=APIHelper.SKIP):
        """Constructor for the ImageDocument class"""

        # Initialize members of the class
        self.image_id = image_id 
        self.image_type_code = image_type_code 
        self.dba_name = dba_name 
        if scan_date is not APIHelper.SKIP:
            self.scan_date = APIHelper.RFC3339DateTime(scan_date) if scan_date else None 
        self.mime_type_code = mime_type_code 
        self.image_content = image_content 
        if additional_document_fields is not APIHelper.SKIP:
            self.additional_document_fields = additional_document_fields 
        if name is not APIHelper.SKIP:
            self.name = name 
        if category is not APIHelper.SKIP:
            self.category = category 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        image_id = dictionary.get("imageId") if dictionary.get("imageId") else None
        image_type_code = dictionary.get("imageTypeCode") if dictionary.get("imageTypeCode") else None
        dba_name = dictionary.get("dbaName") if dictionary.get("dbaName") else None
        mime_type_code = dictionary.get("mimeTypeCode") if dictionary.get("mimeTypeCode") else None
        image_content = dictionary.get("imageContent") if dictionary.get("imageContent") else None
        scan_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("scanDate")).datetime if dictionary.get("scanDate") else APIHelper.SKIP
        additional_document_fields = None
        if dictionary.get('additionalDocumentFields') is not None:
            additional_document_fields = [AdditionalDocumentFields.from_dictionary(x) for x in dictionary.get('additionalDocumentFields')]
        else:
            additional_document_fields = APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        # Return an object of this model
        return cls(image_id,
                   image_type_code,
                   dba_name,
                   mime_type_code,
                   image_content,
                   scan_date,
                   additional_document_fields,
                   name,
                   category)
