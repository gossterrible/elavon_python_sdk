# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.models.scarecrow_application import ScarecrowApplication


class EframeRequestParams(object):

    """Implementation of the 'EframeRequestParams' model.

    TODO: type model description here.

    Attributes:
        unique_id (string): Unique identifier of application submission,
            alphanumeric. Provided by the client.The uniqueId must be wholly
            original and never repeated. The client's name followed by a
            millisecond timestamp would work well.
        boarding_id (string): AWB (NA) or ApplicationID/MID (EU)
        scarecrow_application (ScarecrowApplication): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "unique_id": 'uniqueId',
        "boarding_id": 'boardingId',
        "scarecrow_application": 'scarecrowApplication'
    }

    def __init__(self,
                 unique_id=None,
                 boarding_id=None,
                 scarecrow_application=None):
        """Constructor for the EframeRequestParams class"""

        # Initialize members of the class
        self.unique_id = unique_id 
        self.boarding_id = boarding_id 
        self.scarecrow_application = scarecrow_application 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        unique_id = dictionary.get("uniqueId") if dictionary.get("uniqueId") else None
        boarding_id = dictionary.get("boardingId") if dictionary.get("boardingId") else None
        scarecrow_application = ScarecrowApplication.from_dictionary(dictionary.get('scarecrowApplication')) if dictionary.get('scarecrowApplication') else None
        # Return an object of this model
        return cls(unique_id,
                   boarding_id,
                   scarecrow_application)
