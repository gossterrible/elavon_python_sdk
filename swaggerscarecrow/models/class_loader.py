# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.module import *
from swaggerscarecrow.models.package import Package


class ClassLoader(object):

    """Implementation of the 'ClassLoader' model.

    TODO: type model description here.

    Attributes:
        parent (ClassLoader): TODO: type description here.
        name (string): TODO: type description here.
        unnamed_module (Module): TODO: type description here.
        registered_as_parallel_capable (bool): TODO: type description here.
        defined_packages (list of Package): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "parent": 'parent',
        "name": 'name',
        "unnamed_module": 'unnamedModule',
        "registered_as_parallel_capable": 'registeredAsParallelCapable',
        "defined_packages": 'definedPackages'
    }

    _optionals = [
        'parent',
        'name',
        'unnamed_module',
        'registered_as_parallel_capable',
        'defined_packages',
    ]

    def __init__(self,
                 parent=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 unnamed_module=APIHelper.SKIP,
                 registered_as_parallel_capable=APIHelper.SKIP,
                 defined_packages=APIHelper.SKIP):
        """Constructor for the ClassLoader class"""

        # Initialize members of the class
        if parent is not APIHelper.SKIP:
            self.parent = parent 
        if name is not APIHelper.SKIP:
            self.name = name 
        if unnamed_module is not APIHelper.SKIP:
            self.unnamed_module = unnamed_module 
        if registered_as_parallel_capable is not APIHelper.SKIP:
            self.registered_as_parallel_capable = registered_as_parallel_capable 
        if defined_packages is not APIHelper.SKIP:
            self.defined_packages = defined_packages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        parent = ClassLoader.from_dictionary(dictionary.get('parent')) if 'parent' in dictionary.keys() else APIHelper.SKIP 
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        unnamed_module = Module.from_dictionary(dictionary.get('unnamedModule')) if 'unnamedModule' in dictionary.keys() else APIHelper.SKIP 
        registered_as_parallel_capable = dictionary.get("registeredAsParallelCapable") if "registeredAsParallelCapable" in dictionary.keys() else APIHelper.SKIP
        defined_packages = None
        if dictionary.get('definedPackages') is not None:
            defined_packages = [Package.from_dictionary(x) for x in dictionary.get('definedPackages')]
        else:
            defined_packages = APIHelper.SKIP
        # Return an object of this model
        return cls(parent,
                   name,
                   unnamed_module,
                   registered_as_parallel_capable,
                   defined_packages)
