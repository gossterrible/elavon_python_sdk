# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.electronic_check_service import ElectronicCheckService
from swaggerscarecrow.models.fanfare import Fanfare


class ValueAddedServices(object):

    """Implementation of the 'ValueAddedServices' model.

    TODO: type model description here.

    Attributes:
        ecs (ElectronicCheckService): TODO: type description here.
        fanfare (Fanfare): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ecs": 'ecs',
        "fanfare": 'fanfare'
    }

    _optionals = [
        'ecs',
        'fanfare',
    ]

    def __init__(self,
                 ecs=APIHelper.SKIP,
                 fanfare=APIHelper.SKIP):
        """Constructor for the ValueAddedServices class"""

        # Initialize members of the class
        if ecs is not APIHelper.SKIP:
            self.ecs = ecs 
        if fanfare is not APIHelper.SKIP:
            self.fanfare = fanfare 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ecs = ElectronicCheckService.from_dictionary(dictionary.get('ecs')) if 'ecs' in dictionary.keys() else APIHelper.SKIP 
        fanfare = Fanfare.from_dictionary(dictionary.get('fanfare')) if 'fanfare' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(ecs,
                   fanfare)
