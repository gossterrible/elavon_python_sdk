# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BoardingStatusRequestParams(object):

    """Implementation of the 'BoardingStatusRequestParams' model.

    A container that holds all the required elements needed to make a boarding
    status call

    Attributes:
        boarding_id (string): MID(EU)/AWB(NA), value is returned from a
            successful boarding
        correlation_id (string): [NA] Identifier of alternative correlation Id
            to be used in the place of boardingId
        client_id (string): Client id of application submission, to be
            provided to partners
        unique_id (string): Unique identifier of application submission,
            alphanumeric. Provided by the client.The uniqueId must be wholly
            original and never repeated. The client's name followed by a
            millisecond timestamp would work well.
        country (string): Country of application submission, ISO 3166-1
            alpha-3 standard applies
        sales_rep_code (string): Identifier of sales representative
            responsible for submission status is being requested for

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "client_id": 'clientId',
        "unique_id": 'uniqueId',
        "country": 'country',
        "sales_rep_code": 'salesRepCode',
        "boarding_id": 'boardingId',
        "correlation_id": 'correlationId'
    }

    _optionals = [
        'boarding_id',
        'correlation_id',
    ]

    def __init__(self,
                 client_id=None,
                 unique_id=None,
                 country=None,
                 sales_rep_code=None,
                 boarding_id=APIHelper.SKIP,
                 correlation_id=APIHelper.SKIP):
        """Constructor for the BoardingStatusRequestParams class"""

        # Initialize members of the class
        if boarding_id is not APIHelper.SKIP:
            self.boarding_id = boarding_id 
        if correlation_id is not APIHelper.SKIP:
            self.correlation_id = correlation_id 
        self.client_id = client_id 
        self.unique_id = unique_id 
        self.country = country 
        self.sales_rep_code = sales_rep_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        client_id = dictionary.get("clientId") if dictionary.get("clientId") else None
        unique_id = dictionary.get("uniqueId") if dictionary.get("uniqueId") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        sales_rep_code = dictionary.get("salesRepCode") if dictionary.get("salesRepCode") else None
        boarding_id = dictionary.get("boardingId") if dictionary.get("boardingId") else APIHelper.SKIP
        correlation_id = dictionary.get("correlationId") if dictionary.get("correlationId") else APIHelper.SKIP
        # Return an object of this model
        return cls(client_id,
                   unique_id,
                   country,
                   sales_rep_code,
                   boarding_id,
                   correlation_id)
