# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class AdditionalAuthPricingProgramInfo(object):

    """Implementation of the 'AdditionalAuthPricingProgramInfo' model.

    TODO: type model description here.

    Attributes:
        description (string): Description of the pricing program
        fee (float): The program fee
        auth_amount (float): The program amount

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "fee": 'fee',
        "auth_amount": 'authAmount'
    }

    _optionals = [
        'description',
        'fee',
        'auth_amount',
    ]

    def __init__(self,
                 description=APIHelper.SKIP,
                 fee=APIHelper.SKIP,
                 auth_amount=APIHelper.SKIP):
        """Constructor for the AdditionalAuthPricingProgramInfo class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if fee is not APIHelper.SKIP:
            self.fee = fee 
        if auth_amount is not APIHelper.SKIP:
            self.auth_amount = auth_amount 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        fee = dictionary.get("fee") if dictionary.get("fee") else APIHelper.SKIP
        auth_amount = dictionary.get("authAmount") if dictionary.get("authAmount") else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   fee,
                   auth_amount)
