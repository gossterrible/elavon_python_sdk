# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.group_info import GroupInfo
from swaggerscarecrow.models.scarecrow_application import ScarecrowApplication


class BoardingRequestParams(object):

    """Implementation of the 'BoardingRequestParams' model.

    TODO: type model description here.

    Attributes:
        credit_check_token (string): [EU] Token provided by credit check
            response
        group_info (GroupInfo): TODO: type description here.
        scarecrow_application (ScarecrowApplication): TODO: type description
            here.
        profile_code (string): The partner's profile code
        document_packet_id (string): The unique identifier for the document
            packet. For use with createdocumentpacket

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "scarecrow_application": 'scarecrowApplication',
        "credit_check_token": 'creditCheckToken',
        "group_info": 'groupInfo',
        "profile_code": 'profileCode',
        "document_packet_id": 'documentPacketId'
    }

    _optionals = [
        'credit_check_token',
        'group_info',
        'profile_code',
        'document_packet_id',
    ]

    def __init__(self,
                 scarecrow_application=None,
                 credit_check_token=APIHelper.SKIP,
                 group_info=APIHelper.SKIP,
                 profile_code=APIHelper.SKIP,
                 document_packet_id=APIHelper.SKIP):
        """Constructor for the BoardingRequestParams class"""

        # Initialize members of the class
        if credit_check_token is not APIHelper.SKIP:
            self.credit_check_token = credit_check_token 
        if group_info is not APIHelper.SKIP:
            self.group_info = group_info 
        self.scarecrow_application = scarecrow_application 
        if profile_code is not APIHelper.SKIP:
            self.profile_code = profile_code 
        if document_packet_id is not APIHelper.SKIP:
            self.document_packet_id = document_packet_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        scarecrow_application = ScarecrowApplication.from_dictionary(dictionary.get('scarecrowApplication')) if dictionary.get('scarecrowApplication') else None
        credit_check_token = dictionary.get("creditCheckToken") if dictionary.get("creditCheckToken") else APIHelper.SKIP
        group_info = GroupInfo.from_dictionary(dictionary.get('groupInfo')) if 'groupInfo' in dictionary.keys() else APIHelper.SKIP 
        profile_code = dictionary.get("profileCode") if dictionary.get("profileCode") else APIHelper.SKIP
        document_packet_id = dictionary.get("documentPacketId") if dictionary.get("documentPacketId") else APIHelper.SKIP
        # Return an object of this model
        return cls(scarecrow_application,
                   credit_check_token,
                   group_info,
                   profile_code,
                   document_packet_id)
