# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class FuseboxInfo(object):

    """Implementation of the 'FuseboxInfo' model.

    TODO: type model description here.

    Attributes:
        simplify_quantity (int): Simplify Quantity
        direct_quantity (int): Direct Quantity
        simplify_location (string): Simplify Location Quantity
        direct_to_fusebox_location (string): Direct to Fusebox Location

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "simplify_quantity": 'simplifyQuantity',
        "direct_quantity": 'directQuantity',
        "simplify_location": 'simplifyLocation',
        "direct_to_fusebox_location": 'directToFuseboxLocation'
    }

    def __init__(self,
                 simplify_quantity=None,
                 direct_quantity=None,
                 simplify_location=None,
                 direct_to_fusebox_location=None):
        """Constructor for the FuseboxInfo class"""

        # Initialize members of the class
        self.simplify_quantity = simplify_quantity 
        self.direct_quantity = direct_quantity 
        self.simplify_location = simplify_location 
        self.direct_to_fusebox_location = direct_to_fusebox_location 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        simplify_quantity = dictionary.get("simplifyQuantity") if dictionary.get("simplifyQuantity") else None
        direct_quantity = dictionary.get("directQuantity") if dictionary.get("directQuantity") else None
        simplify_location = dictionary.get("simplifyLocation") if dictionary.get("simplifyLocation") else None
        direct_to_fusebox_location = dictionary.get("directToFuseboxLocation") if dictionary.get("directToFuseboxLocation") else None
        # Return an object of this model
        return cls(simplify_quantity,
                   direct_quantity,
                   simplify_location,
                   direct_to_fusebox_location)
