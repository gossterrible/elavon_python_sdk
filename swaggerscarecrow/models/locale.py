# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class Locale(object):

    """Implementation of the 'Locale' model.

    TODO: type model description here.

    Attributes:
        display_name (string): TODO: type description here.
        script (string): TODO: type description here.
        country (string): TODO: type description here.
        variant (string): TODO: type description here.
        extension_keys (list of string): TODO: type description here.
        unicode_locale_attributes (list of string): TODO: type description
            here.
        unicode_locale_keys (list of string): TODO: type description here.
        iso_3_language (string): TODO: type description here.
        iso_3_country (string): TODO: type description here.
        display_language (string): TODO: type description here.
        display_script (string): TODO: type description here.
        display_country (string): TODO: type description here.
        display_variant (string): TODO: type description here.
        language (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "display_name": 'displayName',
        "script": 'script',
        "country": 'country',
        "variant": 'variant',
        "extension_keys": 'extensionKeys',
        "unicode_locale_attributes": 'unicodeLocaleAttributes',
        "unicode_locale_keys": 'unicodeLocaleKeys',
        "iso_3_language": 'iso3Language',
        "iso_3_country": 'iso3Country',
        "display_language": 'displayLanguage',
        "display_script": 'displayScript',
        "display_country": 'displayCountry',
        "display_variant": 'displayVariant',
        "language": 'language'
    }

    _optionals = [
        'display_name',
        'script',
        'country',
        'variant',
        'extension_keys',
        'unicode_locale_attributes',
        'unicode_locale_keys',
        'iso_3_language',
        'iso_3_country',
        'display_language',
        'display_script',
        'display_country',
        'display_variant',
        'language',
    ]

    def __init__(self,
                 display_name=APIHelper.SKIP,
                 script=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 variant=APIHelper.SKIP,
                 extension_keys=APIHelper.SKIP,
                 unicode_locale_attributes=APIHelper.SKIP,
                 unicode_locale_keys=APIHelper.SKIP,
                 iso_3_language=APIHelper.SKIP,
                 iso_3_country=APIHelper.SKIP,
                 display_language=APIHelper.SKIP,
                 display_script=APIHelper.SKIP,
                 display_country=APIHelper.SKIP,
                 display_variant=APIHelper.SKIP,
                 language=APIHelper.SKIP):
        """Constructor for the Locale class"""

        # Initialize members of the class
        if display_name is not APIHelper.SKIP:
            self.display_name = display_name 
        if script is not APIHelper.SKIP:
            self.script = script 
        if country is not APIHelper.SKIP:
            self.country = country 
        if variant is not APIHelper.SKIP:
            self.variant = variant 
        if extension_keys is not APIHelper.SKIP:
            self.extension_keys = extension_keys 
        if unicode_locale_attributes is not APIHelper.SKIP:
            self.unicode_locale_attributes = unicode_locale_attributes 
        if unicode_locale_keys is not APIHelper.SKIP:
            self.unicode_locale_keys = unicode_locale_keys 
        if iso_3_language is not APIHelper.SKIP:
            self.iso_3_language = iso_3_language 
        if iso_3_country is not APIHelper.SKIP:
            self.iso_3_country = iso_3_country 
        if display_language is not APIHelper.SKIP:
            self.display_language = display_language 
        if display_script is not APIHelper.SKIP:
            self.display_script = display_script 
        if display_country is not APIHelper.SKIP:
            self.display_country = display_country 
        if display_variant is not APIHelper.SKIP:
            self.display_variant = display_variant 
        if language is not APIHelper.SKIP:
            self.language = language 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        display_name = dictionary.get("displayName") if dictionary.get("displayName") else APIHelper.SKIP
        script = dictionary.get("script") if dictionary.get("script") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        variant = dictionary.get("variant") if dictionary.get("variant") else APIHelper.SKIP
        extension_keys = dictionary.get("extensionKeys") if dictionary.get("extensionKeys") else APIHelper.SKIP
        unicode_locale_attributes = dictionary.get("unicodeLocaleAttributes") if dictionary.get("unicodeLocaleAttributes") else APIHelper.SKIP
        unicode_locale_keys = dictionary.get("unicodeLocaleKeys") if dictionary.get("unicodeLocaleKeys") else APIHelper.SKIP
        iso_3_language = dictionary.get("iso3Language") if dictionary.get("iso3Language") else APIHelper.SKIP
        iso_3_country = dictionary.get("iso3Country") if dictionary.get("iso3Country") else APIHelper.SKIP
        display_language = dictionary.get("displayLanguage") if dictionary.get("displayLanguage") else APIHelper.SKIP
        display_script = dictionary.get("displayScript") if dictionary.get("displayScript") else APIHelper.SKIP
        display_country = dictionary.get("displayCountry") if dictionary.get("displayCountry") else APIHelper.SKIP
        display_variant = dictionary.get("displayVariant") if dictionary.get("displayVariant") else APIHelper.SKIP
        language = dictionary.get("language") if dictionary.get("language") else APIHelper.SKIP
        # Return an object of this model
        return cls(display_name,
                   script,
                   country,
                   variant,
                   extension_keys,
                   unicode_locale_attributes,
                   unicode_locale_keys,
                   iso_3_language,
                   iso_3_country,
                   display_language,
                   display_script,
                   display_country,
                   display_variant,
                   language)
