# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.locale import Locale
from swaggerscarecrow.models.servlet_output_stream import ServletOutputStream


class ServletResponse(object):

    """Implementation of the 'ServletResponse' model.

    TODO: type model description here.

    Attributes:
        locale (Locale): TODO: type description here.
        buffer_size (int): TODO: type description here.
        writer (object): TODO: type description here.
        character_encoding (string): TODO: type description here.
        committed (bool): TODO: type description here.
        content_type (string): TODO: type description here.
        output_stream (ServletOutputStream): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "locale": 'locale',
        "buffer_size": 'bufferSize',
        "writer": 'writer',
        "character_encoding": 'characterEncoding',
        "committed": 'committed',
        "content_type": 'contentType',
        "output_stream": 'outputStream'
    }

    _optionals = [
        'locale',
        'buffer_size',
        'writer',
        'character_encoding',
        'committed',
        'content_type',
        'output_stream',
    ]

    def __init__(self,
                 locale=APIHelper.SKIP,
                 buffer_size=APIHelper.SKIP,
                 writer=APIHelper.SKIP,
                 character_encoding=APIHelper.SKIP,
                 committed=APIHelper.SKIP,
                 content_type=APIHelper.SKIP,
                 output_stream=APIHelper.SKIP):
        """Constructor for the ServletResponse class"""

        # Initialize members of the class
        if locale is not APIHelper.SKIP:
            self.locale = locale 
        if buffer_size is not APIHelper.SKIP:
            self.buffer_size = buffer_size 
        if writer is not APIHelper.SKIP:
            self.writer = writer 
        if character_encoding is not APIHelper.SKIP:
            self.character_encoding = character_encoding 
        if committed is not APIHelper.SKIP:
            self.committed = committed 
        if content_type is not APIHelper.SKIP:
            self.content_type = content_type 
        if output_stream is not APIHelper.SKIP:
            self.output_stream = output_stream 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        locale = Locale.from_dictionary(dictionary.get('locale')) if 'locale' in dictionary.keys() else APIHelper.SKIP 
        buffer_size = dictionary.get("bufferSize") if dictionary.get("bufferSize") else APIHelper.SKIP
        writer = dictionary.get("writer") if dictionary.get("writer") else APIHelper.SKIP
        character_encoding = dictionary.get("characterEncoding") if dictionary.get("characterEncoding") else APIHelper.SKIP
        committed = dictionary.get("committed") if "committed" in dictionary.keys() else APIHelper.SKIP
        content_type = dictionary.get("contentType") if dictionary.get("contentType") else APIHelper.SKIP
        output_stream = ServletOutputStream.from_dictionary(dictionary.get('outputStream')) if 'outputStream' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(locale,
                   buffer_size,
                   writer,
                   character_encoding,
                   committed,
                   content_type,
                   output_stream)
