# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.boarding_status_message import BoardingStatusMessage


class BoardingStatusResponse(object):

    """Implementation of the 'BoardingStatusResponse' model.

    TODO: type model description here.

    Attributes:
        error (string): Error message from service
        boarding_status (BoardingStatusEnum): Status of boarded application
        application_id (string): MID (EU) or AWB (NA), MID in NA if boarding
            status is COMPLETE
        messages (list of BoardingStatusMessage): [NA] Messages from service
        pend_messages (list of BoardingStatusMessage): [NA] Pend Messages from
            service
        underwriter_notes (list of BoardingStatusMessage): [NA] Notes by
            downstream underwritter
        underwriter_contacts (list of string): [NA] Contact information for
            downstream underwritter

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error": 'error',
        "boarding_status": 'boardingStatus',
        "application_id": 'applicationId',
        "messages": 'messages',
        "pend_messages": 'pendMessages',
        "underwriter_notes": 'underwriterNotes',
        "underwriter_contacts": 'underwriterContacts'
    }

    _optionals = [
        'error',
        'boarding_status',
        'application_id',
        'messages',
        'pend_messages',
        'underwriter_notes',
        'underwriter_contacts',
    ]

    def __init__(self,
                 error=APIHelper.SKIP,
                 boarding_status=APIHelper.SKIP,
                 application_id=APIHelper.SKIP,
                 messages=APIHelper.SKIP,
                 pend_messages=APIHelper.SKIP,
                 underwriter_notes=APIHelper.SKIP,
                 underwriter_contacts=APIHelper.SKIP):
        """Constructor for the BoardingStatusResponse class"""

        # Initialize members of the class
        if error is not APIHelper.SKIP:
            self.error = error 
        if boarding_status is not APIHelper.SKIP:
            self.boarding_status = boarding_status 
        if application_id is not APIHelper.SKIP:
            self.application_id = application_id 
        if messages is not APIHelper.SKIP:
            self.messages = messages 
        if pend_messages is not APIHelper.SKIP:
            self.pend_messages = pend_messages 
        if underwriter_notes is not APIHelper.SKIP:
            self.underwriter_notes = underwriter_notes 
        if underwriter_contacts is not APIHelper.SKIP:
            self.underwriter_contacts = underwriter_contacts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        boarding_status = dictionary.get("boardingStatus") if dictionary.get("boardingStatus") else APIHelper.SKIP
        application_id = dictionary.get("applicationId") if dictionary.get("applicationId") else APIHelper.SKIP
        messages = None
        if dictionary.get('messages') is not None:
            messages = [BoardingStatusMessage.from_dictionary(x) for x in dictionary.get('messages')]
        else:
            messages = APIHelper.SKIP
        pend_messages = None
        if dictionary.get('pendMessages') is not None:
            pend_messages = [BoardingStatusMessage.from_dictionary(x) for x in dictionary.get('pendMessages')]
        else:
            pend_messages = APIHelper.SKIP
        underwriter_notes = None
        if dictionary.get('underwriterNotes') is not None:
            underwriter_notes = [BoardingStatusMessage.from_dictionary(x) for x in dictionary.get('underwriterNotes')]
        else:
            underwriter_notes = APIHelper.SKIP
        underwriter_contacts = dictionary.get("underwriterContacts") if dictionary.get("underwriterContacts") else APIHelper.SKIP
        # Return an object of this model
        return cls(error,
                   boarding_status,
                   application_id,
                   messages,
                   pend_messages,
                   underwriter_notes,
                   underwriter_contacts)
