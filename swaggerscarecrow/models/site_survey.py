# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class SiteSurvey(object):

    """Implementation of the 'SiteSurvey' model.

    TODO: type model description here.

    Attributes:
        site_survey_conducted (bool): [NA] If site survey was conducted set to
            true, else false
        location_type (LocationTypeEnum): [NA] Type of location
        site_address_same_as_dba (bool): [EU] True if site address is the same
            as the DBA address
        location_environment (LocationEnvironmentEnum): [EU] The type of site
            location
        vicinity_condition (VicinityConditionEnum): [EU] The condition of the
            site's vicinity
        location_square_meters (LocationSquareMetersEnum): [EU] The size of
            the site in square meters
        location_appearance (LocationAppearanceEnum): [EU] The site's
            appearance
        business_operating (bool): [EU] True if the business is currently
            operating at the site
        inventory_display_adequate (bool): [EU] True if the site's displayed
            inventory is adequate for the type of business
        inventory_consistent_with_business_type (bool): [EU] True if the
            site's inventory is consistent for the type of business
        card_decals_visible (bool): [EU] True if the accepted credit cards
            decals are displayed at the site
        card_decals_installed_at_visit (bool): [EU] True if the accepted
            credit cards decals were installed during the site survey

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "site_survey_conducted": 'siteSurveyConducted',
        "location_type": 'locationType',
        "site_address_same_as_dba": 'siteAddressSameAsDBA',
        "location_environment": 'locationEnvironment',
        "vicinity_condition": 'vicinityCondition',
        "location_square_meters": 'locationSquareMeters',
        "location_appearance": 'locationAppearance',
        "business_operating": 'businessOperating',
        "inventory_display_adequate": 'inventoryDisplayAdequate',
        "inventory_consistent_with_business_type": 'inventoryConsistentWithBusinessType',
        "card_decals_visible": 'cardDecalsVisible',
        "card_decals_installed_at_visit": 'cardDecalsInstalledAtVisit'
    }

    _optionals = [
        'site_survey_conducted',
        'location_type',
        'site_address_same_as_dba',
        'location_environment',
        'vicinity_condition',
        'location_square_meters',
        'location_appearance',
        'business_operating',
        'inventory_display_adequate',
        'inventory_consistent_with_business_type',
        'card_decals_visible',
        'card_decals_installed_at_visit',
    ]

    def __init__(self,
                 site_survey_conducted=APIHelper.SKIP,
                 location_type=APIHelper.SKIP,
                 site_address_same_as_dba=APIHelper.SKIP,
                 location_environment=APIHelper.SKIP,
                 vicinity_condition=APIHelper.SKIP,
                 location_square_meters=APIHelper.SKIP,
                 location_appearance=APIHelper.SKIP,
                 business_operating=APIHelper.SKIP,
                 inventory_display_adequate=APIHelper.SKIP,
                 inventory_consistent_with_business_type=APIHelper.SKIP,
                 card_decals_visible=APIHelper.SKIP,
                 card_decals_installed_at_visit=APIHelper.SKIP):
        """Constructor for the SiteSurvey class"""

        # Initialize members of the class
        if site_survey_conducted is not APIHelper.SKIP:
            self.site_survey_conducted = site_survey_conducted 
        if location_type is not APIHelper.SKIP:
            self.location_type = location_type 
        if site_address_same_as_dba is not APIHelper.SKIP:
            self.site_address_same_as_dba = site_address_same_as_dba 
        if location_environment is not APIHelper.SKIP:
            self.location_environment = location_environment 
        if vicinity_condition is not APIHelper.SKIP:
            self.vicinity_condition = vicinity_condition 
        if location_square_meters is not APIHelper.SKIP:
            self.location_square_meters = location_square_meters 
        if location_appearance is not APIHelper.SKIP:
            self.location_appearance = location_appearance 
        if business_operating is not APIHelper.SKIP:
            self.business_operating = business_operating 
        if inventory_display_adequate is not APIHelper.SKIP:
            self.inventory_display_adequate = inventory_display_adequate 
        if inventory_consistent_with_business_type is not APIHelper.SKIP:
            self.inventory_consistent_with_business_type = inventory_consistent_with_business_type 
        if card_decals_visible is not APIHelper.SKIP:
            self.card_decals_visible = card_decals_visible 
        if card_decals_installed_at_visit is not APIHelper.SKIP:
            self.card_decals_installed_at_visit = card_decals_installed_at_visit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        site_survey_conducted = dictionary.get("siteSurveyConducted") if "siteSurveyConducted" in dictionary.keys() else APIHelper.SKIP
        location_type = dictionary.get("locationType") if dictionary.get("locationType") else APIHelper.SKIP
        site_address_same_as_dba = dictionary.get("siteAddressSameAsDBA") if "siteAddressSameAsDBA" in dictionary.keys() else APIHelper.SKIP
        location_environment = dictionary.get("locationEnvironment") if dictionary.get("locationEnvironment") else APIHelper.SKIP
        vicinity_condition = dictionary.get("vicinityCondition") if dictionary.get("vicinityCondition") else APIHelper.SKIP
        location_square_meters = dictionary.get("locationSquareMeters") if dictionary.get("locationSquareMeters") else APIHelper.SKIP
        location_appearance = dictionary.get("locationAppearance") if dictionary.get("locationAppearance") else APIHelper.SKIP
        business_operating = dictionary.get("businessOperating") if "businessOperating" in dictionary.keys() else APIHelper.SKIP
        inventory_display_adequate = dictionary.get("inventoryDisplayAdequate") if "inventoryDisplayAdequate" in dictionary.keys() else APIHelper.SKIP
        inventory_consistent_with_business_type = dictionary.get("inventoryConsistentWithBusinessType") if "inventoryConsistentWithBusinessType" in dictionary.keys() else APIHelper.SKIP
        card_decals_visible = dictionary.get("cardDecalsVisible") if "cardDecalsVisible" in dictionary.keys() else APIHelper.SKIP
        card_decals_installed_at_visit = dictionary.get("cardDecalsInstalledAtVisit") if "cardDecalsInstalledAtVisit" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(site_survey_conducted,
                   location_type,
                   site_address_same_as_dba,
                   location_environment,
                   vicinity_condition,
                   location_square_meters,
                   location_appearance,
                   business_operating,
                   inventory_display_adequate,
                   inventory_consistent_with_business_type,
                   card_decals_visible,
                   card_decals_installed_at_visit)
