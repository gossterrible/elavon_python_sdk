# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.quiz_question_choice import QuizQuestionChoice


class QuizQuestion(object):

    """Implementation of the 'QuizQuestion' model.

    TODO: type model description here.

    Attributes:
        question_number (int): Quiz question number
        question_text (string): Text of quiz question
        question_choices (list of QuizQuestionChoice): List of answer choices
            for question

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "question_number": 'questionNumber',
        "question_text": 'questionText',
        "question_choices": 'questionChoices'
    }

    _optionals = [
        'question_number',
        'question_text',
        'question_choices',
    ]

    def __init__(self,
                 question_number=APIHelper.SKIP,
                 question_text=APIHelper.SKIP,
                 question_choices=APIHelper.SKIP):
        """Constructor for the QuizQuestion class"""

        # Initialize members of the class
        if question_number is not APIHelper.SKIP:
            self.question_number = question_number 
        if question_text is not APIHelper.SKIP:
            self.question_text = question_text 
        if question_choices is not APIHelper.SKIP:
            self.question_choices = question_choices 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        question_number = dictionary.get("questionNumber") if dictionary.get("questionNumber") else APIHelper.SKIP
        question_text = dictionary.get("questionText") if dictionary.get("questionText") else APIHelper.SKIP
        question_choices = None
        if dictionary.get('questionChoices') is not None:
            question_choices = [QuizQuestionChoice.from_dictionary(x) for x in dictionary.get('questionChoices')]
        else:
            question_choices = APIHelper.SKIP
        # Return an object of this model
        return cls(question_number,
                   question_text,
                   question_choices)
