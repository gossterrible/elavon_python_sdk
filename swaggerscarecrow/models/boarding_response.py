# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BoardingResponse(object):

    """Implementation of the 'BoardingResponse' model.

    TODO: type model description here.

    Attributes:
        response_id (int): TODO: type description here.
        error (string): Error message from service
        boarding_id (string): AWB (NA) or ApplicationID/MID (EU)
        merchant_id (string): MID (EU)
        chain_id (string): [NA] New chain id, generated if boarding request
            specified creation of new chain
        duplicate_request (bool): True if boarding request was a duplicate
            request
        process_error_type (ProcessErrorTypeEnum): TODO: type description
            here.
        eframe_status (EframeStatusEnum): [EU][Elavon Germany] Eframe boarding
            Status
        eframe_error (string): Error message from Eframe

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "response_id": 'responseId',
        "error": 'error',
        "boarding_id": 'boardingId',
        "merchant_id": 'merchantId',
        "chain_id": 'chainId',
        "duplicate_request": 'duplicateRequest',
        "process_error_type": 'processErrorType',
        "eframe_status": 'eframeStatus',
        "eframe_error": 'eframeError'
    }

    _optionals = [
        'response_id',
        'error',
        'boarding_id',
        'merchant_id',
        'chain_id',
        'duplicate_request',
        'process_error_type',
        'eframe_status',
        'eframe_error',
    ]

    def __init__(self,
                 response_id=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 boarding_id=APIHelper.SKIP,
                 merchant_id=APIHelper.SKIP,
                 chain_id=APIHelper.SKIP,
                 duplicate_request=APIHelper.SKIP,
                 process_error_type=APIHelper.SKIP,
                 eframe_status=APIHelper.SKIP,
                 eframe_error=APIHelper.SKIP):
        """Constructor for the BoardingResponse class"""

        # Initialize members of the class
        if response_id is not APIHelper.SKIP:
            self.response_id = response_id 
        if error is not APIHelper.SKIP:
            self.error = error 
        if boarding_id is not APIHelper.SKIP:
            self.boarding_id = boarding_id 
        if merchant_id is not APIHelper.SKIP:
            self.merchant_id = merchant_id 
        if chain_id is not APIHelper.SKIP:
            self.chain_id = chain_id 
        if duplicate_request is not APIHelper.SKIP:
            self.duplicate_request = duplicate_request 
        if process_error_type is not APIHelper.SKIP:
            self.process_error_type = process_error_type 
        if eframe_status is not APIHelper.SKIP:
            self.eframe_status = eframe_status 
        if eframe_error is not APIHelper.SKIP:
            self.eframe_error = eframe_error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        response_id = dictionary.get("responseId") if dictionary.get("responseId") else APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        boarding_id = dictionary.get("boardingId") if dictionary.get("boardingId") else APIHelper.SKIP
        merchant_id = dictionary.get("merchantId") if dictionary.get("merchantId") else APIHelper.SKIP
        chain_id = dictionary.get("chainId") if dictionary.get("chainId") else APIHelper.SKIP
        duplicate_request = dictionary.get("duplicateRequest") if "duplicateRequest" in dictionary.keys() else APIHelper.SKIP
        process_error_type = dictionary.get("processErrorType") if dictionary.get("processErrorType") else APIHelper.SKIP
        eframe_status = dictionary.get("eframeStatus") if dictionary.get("eframeStatus") else APIHelper.SKIP
        eframe_error = dictionary.get("eframeError") if dictionary.get("eframeError") else APIHelper.SKIP
        # Return an object of this model
        return cls(response_id,
                   error,
                   boarding_id,
                   merchant_id,
                   chain_id,
                   duplicate_request,
                   process_error_type,
                   eframe_status,
                   eframe_error)
