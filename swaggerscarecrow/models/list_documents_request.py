# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.banking_info import BankingInfo
from swaggerscarecrow.models.business_info import BusinessInfo
from swaggerscarecrow.models.card_pricing import CardPricing
from swaggerscarecrow.models.equipment_info import EquipmentInfo
from swaggerscarecrow.models.person import Person


class ListDocumentsRequest(object):

    """Implementation of the 'ListDocumentsRequest' model.

    TODO: type model description here.

    Attributes:
        equipment_info (EquipmentInfo): In NA, it's mandatory to have at least
            one piece of equipment. For third party vendors           
            managing their own equipment, at least one Value Added Reseller
            (VAR) code must be sent.            Contact your Elavon
            representative for the VAR code(s).            In EU,
            equipmentInfo is optional and no equipment has to be sent. If you
            have any equipment            managed by Elavon, contact your
            Elavon representative for the VAR code(s).
        card_pricing (CardPricing): TODO: type description here.
        principal (Person): TODO: type description here.
        business_info (BusinessInfo): TODO: type description here.
        bank_accounts (dict): TODO: type description here.
        direct_debit_authorized_map (dict): TODO: type description here.
        value_adds (dict): TODO: type description here.
        profile_code (string): TODO: type description here.
        has_government_incentive (bool): TODO: type description here.
        has_custom_notes (bool): TODO: type description here.
        partner_document_keys (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "equipment_info": 'equipmentInfo',
        "card_pricing": 'cardPricing',
        "principal": 'principal',
        "business_info": 'businessInfo',
        "bank_accounts": 'bankAccounts',
        "direct_debit_authorized_map": 'directDebitAuthorizedMap',
        "value_adds": 'valueAdds',
        "profile_code": 'profileCode',
        "has_government_incentive": 'hasGovernmentIncentive',
        "has_custom_notes": 'hasCustomNotes',
        "partner_document_keys": 'partnerDocumentKeys'
    }

    _optionals = [
        'equipment_info',
        'card_pricing',
        'principal',
        'business_info',
        'bank_accounts',
        'direct_debit_authorized_map',
        'value_adds',
        'profile_code',
        'has_government_incentive',
        'has_custom_notes',
        'partner_document_keys',
    ]

    def __init__(self,
                 equipment_info=APIHelper.SKIP,
                 card_pricing=APIHelper.SKIP,
                 principal=APIHelper.SKIP,
                 business_info=APIHelper.SKIP,
                 bank_accounts=APIHelper.SKIP,
                 direct_debit_authorized_map=APIHelper.SKIP,
                 value_adds=APIHelper.SKIP,
                 profile_code=APIHelper.SKIP,
                 has_government_incentive=APIHelper.SKIP,
                 has_custom_notes=APIHelper.SKIP,
                 partner_document_keys=APIHelper.SKIP):
        """Constructor for the ListDocumentsRequest class"""

        # Initialize members of the class
        if equipment_info is not APIHelper.SKIP:
            self.equipment_info = equipment_info 
        if card_pricing is not APIHelper.SKIP:
            self.card_pricing = card_pricing 
        if principal is not APIHelper.SKIP:
            self.principal = principal 
        if business_info is not APIHelper.SKIP:
            self.business_info = business_info 
        if bank_accounts is not APIHelper.SKIP:
            self.bank_accounts = bank_accounts 
        if direct_debit_authorized_map is not APIHelper.SKIP:
            self.direct_debit_authorized_map = direct_debit_authorized_map 
        if value_adds is not APIHelper.SKIP:
            self.value_adds = value_adds 
        if profile_code is not APIHelper.SKIP:
            self.profile_code = profile_code 
        if has_government_incentive is not APIHelper.SKIP:
            self.has_government_incentive = has_government_incentive 
        if has_custom_notes is not APIHelper.SKIP:
            self.has_custom_notes = has_custom_notes 
        if partner_document_keys is not APIHelper.SKIP:
            self.partner_document_keys = partner_document_keys 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        equipment_info = EquipmentInfo.from_dictionary(dictionary.get('equipmentInfo')) if 'equipmentInfo' in dictionary.keys() else APIHelper.SKIP 
        card_pricing = CardPricing.from_dictionary(dictionary.get('cardPricing')) if 'cardPricing' in dictionary.keys() else APIHelper.SKIP 
        principal = Person.from_dictionary(dictionary.get('principal')) if 'principal' in dictionary.keys() else APIHelper.SKIP 
        business_info = BusinessInfo.from_dictionary(dictionary.get('businessInfo')) if 'businessInfo' in dictionary.keys() else APIHelper.SKIP 
        bank_accounts = BankingInfo.from_dictionary(dictionary.get('bankAccounts')) if 'bankAccounts' in dictionary.keys() else APIHelper.SKIP 
        direct_debit_authorized_map = dictionary.get("directDebitAuthorizedMap") if "directDebitAuthorizedMap" in dictionary.keys() else APIHelper.SKIP
        value_adds = dictionary.get("valueAdds") if "valueAdds" in dictionary.keys() else APIHelper.SKIP
        profile_code = dictionary.get("profileCode") if dictionary.get("profileCode") else APIHelper.SKIP
        has_government_incentive = dictionary.get("hasGovernmentIncentive") if "hasGovernmentIncentive" in dictionary.keys() else APIHelper.SKIP
        has_custom_notes = dictionary.get("hasCustomNotes") if "hasCustomNotes" in dictionary.keys() else APIHelper.SKIP
        partner_document_keys = dictionary.get("partnerDocumentKeys") if dictionary.get("partnerDocumentKeys") else APIHelper.SKIP
        # Return an object of this model
        return cls(equipment_info,
                   card_pricing,
                   principal,
                   business_info,
                   bank_accounts,
                   direct_debit_authorized_map,
                   value_adds,
                   profile_code,
                   has_government_incentive,
                   has_custom_notes,
                   partner_document_keys)
