# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.address import Address
from swaggerscarecrow.models.phone_number import PhoneNumber


class ContactInfo(object):

    """Implementation of the 'ContactInfo' model.

    TODO: type model description here.

    Attributes:
        address (Address): TODO: type description here.
        additional_addresses (dict): Contact's additional addresses. The valid
            keys are as follows: PREVIOUS
        phone (PhoneNumber): TODO: type description here.
        mobile (PhoneNumber): TODO: type description here.
        fax (PhoneNumber): TODO: type description here.
        email_address (string): Contact's email address

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "additional_addresses": 'additionalAddresses',
        "phone": 'phone',
        "mobile": 'mobile',
        "fax": 'fax',
        "email_address": 'emailAddress'
    }

    _optionals = [
        'address',
        'additional_addresses',
        'phone',
        'mobile',
        'fax',
        'email_address',
    ]

    def __init__(self,
                 address=APIHelper.SKIP,
                 additional_addresses=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 mobile=APIHelper.SKIP,
                 fax=APIHelper.SKIP,
                 email_address=APIHelper.SKIP):
        """Constructor for the ContactInfo class"""

        # Initialize members of the class
        if address is not APIHelper.SKIP:
            self.address = address 
        if additional_addresses is not APIHelper.SKIP:
            self.additional_addresses = additional_addresses 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if mobile is not APIHelper.SKIP:
            self.mobile = mobile 
        if fax is not APIHelper.SKIP:
            self.fax = fax 
        if email_address is not APIHelper.SKIP:
            self.email_address = email_address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        address = Address.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP 
        additional_addresses = Address.from_dictionary(dictionary.get('additionalAddresses')) if 'additionalAddresses' in dictionary.keys() else APIHelper.SKIP 
        phone = PhoneNumber.from_dictionary(dictionary.get('phone')) if 'phone' in dictionary.keys() else APIHelper.SKIP 
        mobile = PhoneNumber.from_dictionary(dictionary.get('mobile')) if 'mobile' in dictionary.keys() else APIHelper.SKIP 
        fax = PhoneNumber.from_dictionary(dictionary.get('fax')) if 'fax' in dictionary.keys() else APIHelper.SKIP 
        email_address = dictionary.get("emailAddress") if dictionary.get("emailAddress") else APIHelper.SKIP
        # Return an object of this model
        return cls(address,
                   additional_addresses,
                   phone,
                   mobile,
                   fax,
                   email_address)
