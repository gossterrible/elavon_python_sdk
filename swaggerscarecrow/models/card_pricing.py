# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.amex_accepting_info import AmexAcceptingInfo
from swaggerscarecrow.models.card_charge import CardCharge
from swaggerscarecrow.models.debit_pricing import DebitPricing
from swaggerscarecrow.models.exception_charge import ExceptionCharge
from swaggerscarecrow.models.payment_facilitator_info import PaymentFacilitatorInfo


class CardPricing(object):

    """Implementation of the 'CardPricing' model.

    TODO: type model description here.

    Attributes:
        pricing_method (PricingMethodEnum): Method of card pricing to be
            applied
        pricing_category (PricingCategoryEnum): Business card pricing
            category
        amex_accepting_info (AmexAcceptingInfo): TODO: type description here.
        payment_facilitator_info (PaymentFacilitatorInfo): TODO: type
            description here.
        card_charges (list of CardCharge): Card charge listing
        exception_charges (list of ExceptionCharge): [EU] Card exception
            charge listing
        debit_pricing (DebitPricing): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pricing_method": 'pricingMethod',
        "pricing_category": 'pricingCategory',
        "card_charges": 'cardCharges',
        "amex_accepting_info": 'amexAcceptingInfo',
        "payment_facilitator_info": 'paymentFacilitatorInfo',
        "exception_charges": 'exceptionCharges',
        "debit_pricing": 'debitPricing'
    }

    _optionals = [
        'amex_accepting_info',
        'payment_facilitator_info',
        'exception_charges',
        'debit_pricing',
    ]

    def __init__(self,
                 pricing_method=None,
                 pricing_category=None,
                 card_charges=None,
                 amex_accepting_info=APIHelper.SKIP,
                 payment_facilitator_info=APIHelper.SKIP,
                 exception_charges=APIHelper.SKIP,
                 debit_pricing=APIHelper.SKIP):
        """Constructor for the CardPricing class"""

        # Initialize members of the class
        self.pricing_method = pricing_method 
        self.pricing_category = pricing_category 
        if amex_accepting_info is not APIHelper.SKIP:
            self.amex_accepting_info = amex_accepting_info 
        if payment_facilitator_info is not APIHelper.SKIP:
            self.payment_facilitator_info = payment_facilitator_info 
        self.card_charges = card_charges 
        if exception_charges is not APIHelper.SKIP:
            self.exception_charges = exception_charges 
        if debit_pricing is not APIHelper.SKIP:
            self.debit_pricing = debit_pricing 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        pricing_method = dictionary.get("pricingMethod") if dictionary.get("pricingMethod") else None
        pricing_category = dictionary.get("pricingCategory") if dictionary.get("pricingCategory") else None
        card_charges = None
        if dictionary.get('cardCharges') is not None:
            card_charges = [CardCharge.from_dictionary(x) for x in dictionary.get('cardCharges')]
        amex_accepting_info = AmexAcceptingInfo.from_dictionary(dictionary.get('amexAcceptingInfo')) if 'amexAcceptingInfo' in dictionary.keys() else APIHelper.SKIP 
        payment_facilitator_info = PaymentFacilitatorInfo.from_dictionary(dictionary.get('paymentFacilitatorInfo')) if 'paymentFacilitatorInfo' in dictionary.keys() else APIHelper.SKIP 
        exception_charges = None
        if dictionary.get('exceptionCharges') is not None:
            exception_charges = [ExceptionCharge.from_dictionary(x) for x in dictionary.get('exceptionCharges')]
        else:
            exception_charges = APIHelper.SKIP
        debit_pricing = DebitPricing.from_dictionary(dictionary.get('debitPricing')) if 'debitPricing' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(pricing_method,
                   pricing_category,
                   card_charges,
                   amex_accepting_info,
                   payment_facilitator_info,
                   exception_charges,
                   debit_pricing)
