# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.phone_fields import PhoneFields


class AddressFields(object):

    """Implementation of the 'AddressFields' model.

    TODO: type model description here.

    Attributes:
        simple_value (string): TODO: type description here.
        house_number (string): TODO: type description here.
        street (string): TODO: type description here.
        street_2 (string): TODO: type description here.
        city (string): TODO: type description here.
        county (string): TODO: type description here.
        province (string): TODO: type description here.
        post_code (string): TODO: type description here.
        country (string): TODO: type description here.
        country_code (string): TODO: type description here.
        address_classification (string): TODO: type description here.
        telephone (string): TODO: type description here.
        phone_fields (PhoneFields): TODO: type description here.
        location_id (string): TODO: type description here.
        address_type (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "simple_value": 'simpleValue',
        "house_number": 'houseNumber',
        "street": 'street',
        "street_2": 'street2',
        "city": 'city',
        "county": 'county',
        "province": 'province',
        "post_code": 'postCode',
        "country": 'country',
        "country_code": 'countryCode',
        "address_classification": 'addressClassification',
        "telephone": 'telephone',
        "phone_fields": 'phoneFields',
        "location_id": 'locationId',
        "address_type": 'addressType'
    }

    _optionals = [
        'simple_value',
        'house_number',
        'street',
        'street_2',
        'city',
        'county',
        'province',
        'post_code',
        'country',
        'country_code',
        'address_classification',
        'telephone',
        'phone_fields',
        'location_id',
        'address_type',
    ]

    def __init__(self,
                 simple_value=APIHelper.SKIP,
                 house_number=APIHelper.SKIP,
                 street=APIHelper.SKIP,
                 street_2=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 county=APIHelper.SKIP,
                 province=APIHelper.SKIP,
                 post_code=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 address_classification=APIHelper.SKIP,
                 telephone=APIHelper.SKIP,
                 phone_fields=APIHelper.SKIP,
                 location_id=APIHelper.SKIP,
                 address_type=APIHelper.SKIP):
        """Constructor for the AddressFields class"""

        # Initialize members of the class
        if simple_value is not APIHelper.SKIP:
            self.simple_value = simple_value 
        if house_number is not APIHelper.SKIP:
            self.house_number = house_number 
        if street is not APIHelper.SKIP:
            self.street = street 
        if street_2 is not APIHelper.SKIP:
            self.street_2 = street_2 
        if city is not APIHelper.SKIP:
            self.city = city 
        if county is not APIHelper.SKIP:
            self.county = county 
        if province is not APIHelper.SKIP:
            self.province = province 
        if post_code is not APIHelper.SKIP:
            self.post_code = post_code 
        if country is not APIHelper.SKIP:
            self.country = country 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if address_classification is not APIHelper.SKIP:
            self.address_classification = address_classification 
        if telephone is not APIHelper.SKIP:
            self.telephone = telephone 
        if phone_fields is not APIHelper.SKIP:
            self.phone_fields = phone_fields 
        if location_id is not APIHelper.SKIP:
            self.location_id = location_id 
        if address_type is not APIHelper.SKIP:
            self.address_type = address_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        simple_value = dictionary.get("simpleValue") if dictionary.get("simpleValue") else APIHelper.SKIP
        house_number = dictionary.get("houseNumber") if dictionary.get("houseNumber") else APIHelper.SKIP
        street = dictionary.get("street") if dictionary.get("street") else APIHelper.SKIP
        street_2 = dictionary.get("street2") if dictionary.get("street2") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        county = dictionary.get("county") if dictionary.get("county") else APIHelper.SKIP
        province = dictionary.get("province") if dictionary.get("province") else APIHelper.SKIP
        post_code = dictionary.get("postCode") if dictionary.get("postCode") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        address_classification = dictionary.get("addressClassification") if dictionary.get("addressClassification") else APIHelper.SKIP
        telephone = dictionary.get("telephone") if dictionary.get("telephone") else APIHelper.SKIP
        phone_fields = PhoneFields.from_dictionary(dictionary.get('phoneFields')) if 'phoneFields' in dictionary.keys() else APIHelper.SKIP 
        location_id = dictionary.get("locationId") if dictionary.get("locationId") else APIHelper.SKIP
        address_type = dictionary.get("addressType") if dictionary.get("addressType") else APIHelper.SKIP
        # Return an object of this model
        return cls(simple_value,
                   house_number,
                   street,
                   street_2,
                   city,
                   county,
                   province,
                   post_code,
                   country,
                   country_code,
                   address_classification,
                   telephone,
                   phone_fields,
                   location_id,
                   address_type)
