# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BankAccountAdditionalInfo(object):

    """Implementation of the 'BankAccountAdditionalInfo' model.

    TODO: type model description here.

    Attributes:
        bank_name (string): TODO: type description here.
        bank_branch (string): TODO: type description here.
        direct_debit_authorized (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_name": 'bankName',
        "bank_branch": 'bankBranch',
        "direct_debit_authorized": 'directDebitAuthorized'
    }

    _optionals = [
        'bank_name',
        'bank_branch',
        'direct_debit_authorized',
    ]

    def __init__(self,
                 bank_name=APIHelper.SKIP,
                 bank_branch=APIHelper.SKIP,
                 direct_debit_authorized=APIHelper.SKIP):
        """Constructor for the BankAccountAdditionalInfo class"""

        # Initialize members of the class
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if bank_branch is not APIHelper.SKIP:
            self.bank_branch = bank_branch 
        if direct_debit_authorized is not APIHelper.SKIP:
            self.direct_debit_authorized = direct_debit_authorized 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        bank_name = dictionary.get("bankName") if dictionary.get("bankName") else APIHelper.SKIP
        bank_branch = dictionary.get("bankBranch") if dictionary.get("bankBranch") else APIHelper.SKIP
        direct_debit_authorized = dictionary.get("directDebitAuthorized") if "directDebitAuthorized" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_name,
                   bank_branch,
                   direct_debit_authorized)
