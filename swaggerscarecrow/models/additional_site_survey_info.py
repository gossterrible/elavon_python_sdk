# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.date_components import DateComponents


class AdditionalSiteSurveyInfo(object):

    """Implementation of the 'AdditionalSiteSurveyInfo' model.

    TODO: type model description here.

    Attributes:
        incomplete_survey_reason_type (IncompleteSurveyReasonTypeEnum): TODO:
            type description here.
        site_survey_date (DateComponents): A container that holds the date
            (day, month, and year)
        site_survey_conducted_by (string): TODO: type description here.
        description_of_no_site_survey (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "incomplete_survey_reason_type": 'incompleteSurveyReasonType',
        "site_survey_date": 'siteSurveyDate',
        "site_survey_conducted_by": 'siteSurveyConductedBy',
        "description_of_no_site_survey": 'descriptionOfNoSiteSurvey'
    }

    _optionals = [
        'incomplete_survey_reason_type',
        'site_survey_date',
        'site_survey_conducted_by',
        'description_of_no_site_survey',
    ]

    def __init__(self,
                 incomplete_survey_reason_type=APIHelper.SKIP,
                 site_survey_date=APIHelper.SKIP,
                 site_survey_conducted_by=APIHelper.SKIP,
                 description_of_no_site_survey=APIHelper.SKIP):
        """Constructor for the AdditionalSiteSurveyInfo class"""

        # Initialize members of the class
        if incomplete_survey_reason_type is not APIHelper.SKIP:
            self.incomplete_survey_reason_type = incomplete_survey_reason_type 
        if site_survey_date is not APIHelper.SKIP:
            self.site_survey_date = site_survey_date 
        if site_survey_conducted_by is not APIHelper.SKIP:
            self.site_survey_conducted_by = site_survey_conducted_by 
        if description_of_no_site_survey is not APIHelper.SKIP:
            self.description_of_no_site_survey = description_of_no_site_survey 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        incomplete_survey_reason_type = dictionary.get("incompleteSurveyReasonType") if dictionary.get("incompleteSurveyReasonType") else APIHelper.SKIP
        site_survey_date = DateComponents.from_dictionary(dictionary.get('siteSurveyDate')) if 'siteSurveyDate' in dictionary.keys() else APIHelper.SKIP 
        site_survey_conducted_by = dictionary.get("siteSurveyConductedBy") if dictionary.get("siteSurveyConductedBy") else APIHelper.SKIP
        description_of_no_site_survey = dictionary.get("descriptionOfNoSiteSurvey") if dictionary.get("descriptionOfNoSiteSurvey") else APIHelper.SKIP
        # Return an object of this model
        return cls(incomplete_survey_reason_type,
                   site_survey_date,
                   site_survey_conducted_by,
                   description_of_no_site_survey)
