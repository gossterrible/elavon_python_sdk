# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.equipment_option import EquipmentOption


class ItemSettings(object):

    """Implementation of the 'ItemSettings' model.

    TODO: type model description here.

    Attributes:
        security_level (SecurityLevelEnum): TODO: type description here.
        semi_integrated (bool): TODO: type description here.
        connection_type (ConnectionTypeEnum): Connection type of product
        close_method (CloseMethodEnum): TODO: type description here.
        capture_method (CaptureMethodEnum): TODO: type description here.
        qir_vendor (string): TODO: type description here.
        services (dict): TODO: type description here.
        options (list of EquipmentOption): TODO: type description here.
        bundled_thresh_hold (int): TODO: type description here.
        service_pricing_code (ServicePricingCodeEnum): TODO: type description
            here.
        terminal_type (TerminalTypeEnum): TODO: type description here.
        ingenico_pay_table (bool): TODO: type description here.
        deploy_type (DeployTypeEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "connection_type": 'connectionType',
        "security_level": 'securityLevel',
        "semi_integrated": 'semiIntegrated',
        "close_method": 'closeMethod',
        "capture_method": 'captureMethod',
        "qir_vendor": 'qirVendor',
        "services": 'services',
        "options": 'options',
        "bundled_thresh_hold": 'bundledThreshHold',
        "service_pricing_code": 'servicePricingCode',
        "terminal_type": 'terminalType',
        "ingenico_pay_table": 'ingenicoPayTable',
        "deploy_type": 'deployType'
    }

    _optionals = [
        'security_level',
        'semi_integrated',
        'close_method',
        'capture_method',
        'qir_vendor',
        'services',
        'options',
        'bundled_thresh_hold',
        'service_pricing_code',
        'terminal_type',
        'ingenico_pay_table',
        'deploy_type',
    ]

    def __init__(self,
                 connection_type=None,
                 security_level=APIHelper.SKIP,
                 semi_integrated=APIHelper.SKIP,
                 close_method=APIHelper.SKIP,
                 capture_method=APIHelper.SKIP,
                 qir_vendor=APIHelper.SKIP,
                 services=APIHelper.SKIP,
                 options=APIHelper.SKIP,
                 bundled_thresh_hold=APIHelper.SKIP,
                 service_pricing_code=APIHelper.SKIP,
                 terminal_type=APIHelper.SKIP,
                 ingenico_pay_table=APIHelper.SKIP,
                 deploy_type=APIHelper.SKIP):
        """Constructor for the ItemSettings class"""

        # Initialize members of the class
        if security_level is not APIHelper.SKIP:
            self.security_level = security_level 
        if semi_integrated is not APIHelper.SKIP:
            self.semi_integrated = semi_integrated 
        self.connection_type = connection_type 
        if close_method is not APIHelper.SKIP:
            self.close_method = close_method 
        if capture_method is not APIHelper.SKIP:
            self.capture_method = capture_method 
        if qir_vendor is not APIHelper.SKIP:
            self.qir_vendor = qir_vendor 
        if services is not APIHelper.SKIP:
            self.services = services 
        if options is not APIHelper.SKIP:
            self.options = options 
        if bundled_thresh_hold is not APIHelper.SKIP:
            self.bundled_thresh_hold = bundled_thresh_hold 
        if service_pricing_code is not APIHelper.SKIP:
            self.service_pricing_code = service_pricing_code 
        if terminal_type is not APIHelper.SKIP:
            self.terminal_type = terminal_type 
        if ingenico_pay_table is not APIHelper.SKIP:
            self.ingenico_pay_table = ingenico_pay_table 
        if deploy_type is not APIHelper.SKIP:
            self.deploy_type = deploy_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        connection_type = dictionary.get("connectionType") if dictionary.get("connectionType") else None
        security_level = dictionary.get("securityLevel") if dictionary.get("securityLevel") else APIHelper.SKIP
        semi_integrated = dictionary.get("semiIntegrated") if "semiIntegrated" in dictionary.keys() else APIHelper.SKIP
        close_method = dictionary.get("closeMethod") if dictionary.get("closeMethod") else APIHelper.SKIP
        capture_method = dictionary.get("captureMethod") if dictionary.get("captureMethod") else APIHelper.SKIP
        qir_vendor = dictionary.get("qirVendor") if dictionary.get("qirVendor") else APIHelper.SKIP
        services = dictionary.get("services") if "services" in dictionary.keys() else APIHelper.SKIP
        options = None
        if dictionary.get('options') is not None:
            options = [EquipmentOption.from_dictionary(x) for x in dictionary.get('options')]
        else:
            options = APIHelper.SKIP
        bundled_thresh_hold = dictionary.get("bundledThreshHold") if dictionary.get("bundledThreshHold") else APIHelper.SKIP
        service_pricing_code = dictionary.get("servicePricingCode") if dictionary.get("servicePricingCode") else APIHelper.SKIP
        terminal_type = dictionary.get("terminalType") if dictionary.get("terminalType") else APIHelper.SKIP
        ingenico_pay_table = dictionary.get("ingenicoPayTable") if "ingenicoPayTable" in dictionary.keys() else APIHelper.SKIP
        deploy_type = dictionary.get("deployType") if dictionary.get("deployType") else APIHelper.SKIP
        # Return an object of this model
        return cls(connection_type,
                   security_level,
                   semi_integrated,
                   close_method,
                   capture_method,
                   qir_vendor,
                   services,
                   options,
                   bundled_thresh_hold,
                   service_pricing_code,
                   terminal_type,
                   ingenico_pay_table,
                   deploy_type)
