# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.company_contact_info import CompanyContactInfo
from swaggerscarecrow.models.company_identification import CompanyIdentification
from swaggerscarecrow.models.company_merchant_detail import CompanyMerchantDetail
from swaggerscarecrow.models.company_principal import CompanyPrincipal
from swaggerscarecrow.models.company_summary import CompanySummary
from swaggerscarecrow.models.company_verification import CompanyVerification
from swaggerscarecrow.models.share_capital_structure import ShareCapitalStructure
from swaggerscarecrow.models.signer_info import SignerInfo


class CompanyInfoBundle(object):

    """Implementation of the 'CompanyInfoBundle' model.

    TODO: type model description here.

    Attributes:
        signer_info (SignerInfo): TODO: type description here.
        company_summary (CompanySummary): TODO: type description here.
        company_identification (CompanyIdentification): TODO: type description
            here.
        company_contact_info (CompanyContactInfo): TODO: type description
            here.
        contact_information_other_addresses (list of CompanyContactInfo):
            TODO: type description here.
        director_and_managers (list of CompanyPrincipal): TODO: type
            description here.
        share_capital_structure (ShareCapitalStructure): TODO: type
            description here.
        company_verification (CompanyVerification): TODO: type description
            here.
        company_merchant_detail (CompanyMerchantDetail): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "signer_info": 'signerInfo',
        "company_summary": 'companySummary',
        "company_identification": 'companyIdentification',
        "company_contact_info": 'companyContactInfo',
        "contact_information_other_addresses": 'contactInformationOtherAddresses',
        "director_and_managers": 'directorAndManagers',
        "share_capital_structure": 'shareCapitalStructure',
        "company_verification": 'companyVerification',
        "company_merchant_detail": 'companyMerchantDetail'
    }

    _optionals = [
        'signer_info',
        'company_summary',
        'company_identification',
        'company_contact_info',
        'contact_information_other_addresses',
        'director_and_managers',
        'share_capital_structure',
        'company_verification',
        'company_merchant_detail',
    ]

    def __init__(self,
                 signer_info=APIHelper.SKIP,
                 company_summary=APIHelper.SKIP,
                 company_identification=APIHelper.SKIP,
                 company_contact_info=APIHelper.SKIP,
                 contact_information_other_addresses=APIHelper.SKIP,
                 director_and_managers=APIHelper.SKIP,
                 share_capital_structure=APIHelper.SKIP,
                 company_verification=APIHelper.SKIP,
                 company_merchant_detail=APIHelper.SKIP):
        """Constructor for the CompanyInfoBundle class"""

        # Initialize members of the class
        if signer_info is not APIHelper.SKIP:
            self.signer_info = signer_info 
        if company_summary is not APIHelper.SKIP:
            self.company_summary = company_summary 
        if company_identification is not APIHelper.SKIP:
            self.company_identification = company_identification 
        if company_contact_info is not APIHelper.SKIP:
            self.company_contact_info = company_contact_info 
        if contact_information_other_addresses is not APIHelper.SKIP:
            self.contact_information_other_addresses = contact_information_other_addresses 
        if director_and_managers is not APIHelper.SKIP:
            self.director_and_managers = director_and_managers 
        if share_capital_structure is not APIHelper.SKIP:
            self.share_capital_structure = share_capital_structure 
        if company_verification is not APIHelper.SKIP:
            self.company_verification = company_verification 
        if company_merchant_detail is not APIHelper.SKIP:
            self.company_merchant_detail = company_merchant_detail 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        signer_info = SignerInfo.from_dictionary(dictionary.get('signerInfo')) if 'signerInfo' in dictionary.keys() else APIHelper.SKIP 
        company_summary = CompanySummary.from_dictionary(dictionary.get('companySummary')) if 'companySummary' in dictionary.keys() else APIHelper.SKIP 
        company_identification = CompanyIdentification.from_dictionary(dictionary.get('companyIdentification')) if 'companyIdentification' in dictionary.keys() else APIHelper.SKIP 
        company_contact_info = CompanyContactInfo.from_dictionary(dictionary.get('companyContactInfo')) if 'companyContactInfo' in dictionary.keys() else APIHelper.SKIP 
        contact_information_other_addresses = None
        if dictionary.get('contactInformationOtherAddresses') is not None:
            contact_information_other_addresses = [CompanyContactInfo.from_dictionary(x) for x in dictionary.get('contactInformationOtherAddresses')]
        else:
            contact_information_other_addresses = APIHelper.SKIP
        director_and_managers = None
        if dictionary.get('directorAndManagers') is not None:
            director_and_managers = [CompanyPrincipal.from_dictionary(x) for x in dictionary.get('directorAndManagers')]
        else:
            director_and_managers = APIHelper.SKIP
        share_capital_structure = ShareCapitalStructure.from_dictionary(dictionary.get('shareCapitalStructure')) if 'shareCapitalStructure' in dictionary.keys() else APIHelper.SKIP 
        company_verification = CompanyVerification.from_dictionary(dictionary.get('companyVerification')) if 'companyVerification' in dictionary.keys() else APIHelper.SKIP 
        company_merchant_detail = CompanyMerchantDetail.from_dictionary(dictionary.get('companyMerchantDetail')) if 'companyMerchantDetail' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(signer_info,
                   company_summary,
                   company_identification,
                   company_contact_info,
                   contact_information_other_addresses,
                   director_and_managers,
                   share_capital_structure,
                   company_verification,
                   company_merchant_detail)
