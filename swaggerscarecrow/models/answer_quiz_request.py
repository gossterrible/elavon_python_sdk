# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.quiz_answer import QuizAnswer


class AnswerQuizRequest(object):

    """Implementation of the 'AnswerQuizRequest' model.

    TODO: type model description here.

    Attributes:
        id (string): The app request ID
        mid (string): The Merchant ID
        email (string): The email address
        legal_name (string): The legal name
        vat_id (string): The VAT ID
        cc_email (string): The CC email address
        opt_out (bool): OptOut
        marketing_data_consent_map (dict): The Marketing Consent
        quiz_id (int): Unique identifier of quiz, returned in successful get
            quiz response
        transaction_key (string): Unique identifier of quiz response, returned
            in get quiz response
        quiz_answers (list of QuizAnswer): Answers to quiz
        country (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "quiz_id": 'quizId',
        "transaction_key": 'transactionKey',
        "quiz_answers": 'quizAnswers',
        "id": 'id',
        "mid": 'mid',
        "email": 'email',
        "legal_name": 'legalName',
        "vat_id": 'vatId',
        "cc_email": 'ccEmail',
        "opt_out": 'optOut',
        "marketing_data_consent_map": 'marketingDataConsentMap',
        "country": 'country'
    }

    _optionals = [
        'id',
        'mid',
        'email',
        'legal_name',
        'vat_id',
        'cc_email',
        'opt_out',
        'marketing_data_consent_map',
        'country',
    ]

    def __init__(self,
                 quiz_id=None,
                 transaction_key=None,
                 quiz_answers=None,
                 id=APIHelper.SKIP,
                 mid=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 legal_name=APIHelper.SKIP,
                 vat_id=APIHelper.SKIP,
                 cc_email=APIHelper.SKIP,
                 opt_out=APIHelper.SKIP,
                 marketing_data_consent_map=APIHelper.SKIP,
                 country=APIHelper.SKIP):
        """Constructor for the AnswerQuizRequest class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if mid is not APIHelper.SKIP:
            self.mid = mid 
        if email is not APIHelper.SKIP:
            self.email = email 
        if legal_name is not APIHelper.SKIP:
            self.legal_name = legal_name 
        if vat_id is not APIHelper.SKIP:
            self.vat_id = vat_id 
        if cc_email is not APIHelper.SKIP:
            self.cc_email = cc_email 
        if opt_out is not APIHelper.SKIP:
            self.opt_out = opt_out 
        if marketing_data_consent_map is not APIHelper.SKIP:
            self.marketing_data_consent_map = marketing_data_consent_map 
        self.quiz_id = quiz_id 
        self.transaction_key = transaction_key 
        self.quiz_answers = quiz_answers 
        if country is not APIHelper.SKIP:
            self.country = country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        quiz_id = dictionary.get("quizId") if dictionary.get("quizId") else None
        transaction_key = dictionary.get("transactionKey") if dictionary.get("transactionKey") else None
        quiz_answers = None
        if dictionary.get('quizAnswers') is not None:
            quiz_answers = [QuizAnswer.from_dictionary(x) for x in dictionary.get('quizAnswers')]
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mid = dictionary.get("mid") if dictionary.get("mid") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        legal_name = dictionary.get("legalName") if dictionary.get("legalName") else APIHelper.SKIP
        vat_id = dictionary.get("vatId") if dictionary.get("vatId") else APIHelper.SKIP
        cc_email = dictionary.get("ccEmail") if dictionary.get("ccEmail") else APIHelper.SKIP
        opt_out = dictionary.get("optOut") if "optOut" in dictionary.keys() else APIHelper.SKIP
        marketing_data_consent_map = dictionary.get("marketingDataConsentMap") if "marketingDataConsentMap" in dictionary.keys() else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        # Return an object of this model
        return cls(quiz_id,
                   transaction_key,
                   quiz_answers,
                   id,
                   mid,
                   email,
                   legal_name,
                   vat_id,
                   cc_email,
                   opt_out,
                   marketing_data_consent_map,
                   country)
