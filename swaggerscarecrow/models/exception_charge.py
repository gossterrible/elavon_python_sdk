# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class ExceptionCharge(object):

    """Implementation of the 'ExceptionCharge' model.

    TODO: type model description here.

    Attributes:
        mtype (TypeEnum): Type of exception charge
        discount_rate (float): Exception charge discount rate/percentage fee
        discount_per_item (float): Exception charge discount amount/per
            transaction fee

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "discount_rate": 'discountRate',
        "discount_per_item": 'discountPerItem'
    }

    _optionals = [
        'mtype',
        'discount_rate',
        'discount_per_item',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 discount_rate=APIHelper.SKIP,
                 discount_per_item=APIHelper.SKIP):
        """Constructor for the ExceptionCharge class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if discount_rate is not APIHelper.SKIP:
            self.discount_rate = discount_rate 
        if discount_per_item is not APIHelper.SKIP:
            self.discount_per_item = discount_per_item 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        discount_rate = dictionary.get("discountRate") if dictionary.get("discountRate") else APIHelper.SKIP
        discount_per_item = dictionary.get("discountPerItem") if dictionary.get("discountPerItem") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   discount_rate,
                   discount_per_item)
