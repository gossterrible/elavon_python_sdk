# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.models.apm_pricing_tier import ApmPricingTier


class ApmAcquirerType(object):

    """Implementation of the 'ApmAcquirerType' model.

    TODO: type model description here.

    Attributes:
        type_code (string): Acquirer Type Code of the Alternative Payment
            Method Type
        per_item_amount (string): Default Per Item Amount of the Alternative
            Payment Method Type
        rate_percentage (string): Default Rate Percentage of the Alternative
            Payment Method Type
        pricing_tiers (list of ApmPricingTier): Pricing of the Alternative
            Payment Method

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "type_code": 'typeCode',
        "per_item_amount": 'perItemAmount',
        "rate_percentage": 'ratePercentage',
        "pricing_tiers": 'pricingTiers'
    }

    def __init__(self,
                 type_code=None,
                 per_item_amount=None,
                 rate_percentage=None,
                 pricing_tiers=None):
        """Constructor for the ApmAcquirerType class"""

        # Initialize members of the class
        self.type_code = type_code 
        self.per_item_amount = per_item_amount 
        self.rate_percentage = rate_percentage 
        self.pricing_tiers = pricing_tiers 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        type_code = dictionary.get("typeCode") if dictionary.get("typeCode") else None
        per_item_amount = dictionary.get("perItemAmount") if dictionary.get("perItemAmount") else None
        rate_percentage = dictionary.get("ratePercentage") if dictionary.get("ratePercentage") else None
        pricing_tiers = None
        if dictionary.get('pricingTiers') is not None:
            pricing_tiers = [ApmPricingTier.from_dictionary(x) for x in dictionary.get('pricingTiers')]
        # Return an object of this model
        return cls(type_code,
                   per_item_amount,
                   rate_percentage,
                   pricing_tiers)
