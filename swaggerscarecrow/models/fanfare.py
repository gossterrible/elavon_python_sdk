# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.fanfare_card_splits import FanfareCardSplits


class Fanfare(object):

    """Implementation of the 'Fanfare' model.

    TODO: type model description here.

    Attributes:
        setup_fee (float): TODO: type description here.
        monthly_fee (float): TODO: type description here.
        annual_fee (float): TODO: type description here.
        custom_card_upgrade_fee (float): TODO: type description here.
        included_cards (FanfareCardSplits): TODO: type description here.
        additional_cards_type (AdditionalCardsTypeEnum): TODO: type
            description here.
        additional_cards (FanfareCardSplits): TODO: type description here.
        additional_card_price (float): TODO: type description here.
        program_checkup (float): TODO: type description here.
        card_style (string): TODO: type description here.
        justification_type (JustificationTypeEnum): TODO: type description
            here.
        card_is_text (bool): TODO: type description here.
        card_text (string): TODO: type description here.
        text_case_type (TextCaseTypeEnum): TODO: type description here.
        text_color (string): TODO: type description here.
        text_font (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "setup_fee": 'setupFee',
        "monthly_fee": 'monthlyFee',
        "annual_fee": 'annualFee',
        "custom_card_upgrade_fee": 'customCardUpgradeFee',
        "included_cards": 'includedCards',
        "additional_cards_type": 'additionalCardsType',
        "additional_cards": 'additionalCards',
        "additional_card_price": 'additionalCardPrice',
        "program_checkup": 'programCheckup',
        "card_style": 'cardStyle',
        "justification_type": 'justificationType',
        "card_is_text": 'cardIsText',
        "card_text": 'cardText',
        "text_case_type": 'textCaseType',
        "text_color": 'textColor',
        "text_font": 'textFont'
    }

    _optionals = [
        'setup_fee',
        'monthly_fee',
        'annual_fee',
        'custom_card_upgrade_fee',
        'included_cards',
        'additional_cards_type',
        'additional_cards',
        'additional_card_price',
        'program_checkup',
        'card_style',
        'justification_type',
        'card_is_text',
        'card_text',
        'text_case_type',
        'text_color',
        'text_font',
    ]

    def __init__(self,
                 setup_fee=APIHelper.SKIP,
                 monthly_fee=APIHelper.SKIP,
                 annual_fee=APIHelper.SKIP,
                 custom_card_upgrade_fee=APIHelper.SKIP,
                 included_cards=APIHelper.SKIP,
                 additional_cards_type=APIHelper.SKIP,
                 additional_cards=APIHelper.SKIP,
                 additional_card_price=APIHelper.SKIP,
                 program_checkup=APIHelper.SKIP,
                 card_style=APIHelper.SKIP,
                 justification_type=APIHelper.SKIP,
                 card_is_text=APIHelper.SKIP,
                 card_text=APIHelper.SKIP,
                 text_case_type=APIHelper.SKIP,
                 text_color=APIHelper.SKIP,
                 text_font=APIHelper.SKIP):
        """Constructor for the Fanfare class"""

        # Initialize members of the class
        if setup_fee is not APIHelper.SKIP:
            self.setup_fee = setup_fee 
        if monthly_fee is not APIHelper.SKIP:
            self.monthly_fee = monthly_fee 
        if annual_fee is not APIHelper.SKIP:
            self.annual_fee = annual_fee 
        if custom_card_upgrade_fee is not APIHelper.SKIP:
            self.custom_card_upgrade_fee = custom_card_upgrade_fee 
        if included_cards is not APIHelper.SKIP:
            self.included_cards = included_cards 
        if additional_cards_type is not APIHelper.SKIP:
            self.additional_cards_type = additional_cards_type 
        if additional_cards is not APIHelper.SKIP:
            self.additional_cards = additional_cards 
        if additional_card_price is not APIHelper.SKIP:
            self.additional_card_price = additional_card_price 
        if program_checkup is not APIHelper.SKIP:
            self.program_checkup = program_checkup 
        if card_style is not APIHelper.SKIP:
            self.card_style = card_style 
        if justification_type is not APIHelper.SKIP:
            self.justification_type = justification_type 
        if card_is_text is not APIHelper.SKIP:
            self.card_is_text = card_is_text 
        if card_text is not APIHelper.SKIP:
            self.card_text = card_text 
        if text_case_type is not APIHelper.SKIP:
            self.text_case_type = text_case_type 
        if text_color is not APIHelper.SKIP:
            self.text_color = text_color 
        if text_font is not APIHelper.SKIP:
            self.text_font = text_font 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        setup_fee = dictionary.get("setupFee") if dictionary.get("setupFee") else APIHelper.SKIP
        monthly_fee = dictionary.get("monthlyFee") if dictionary.get("monthlyFee") else APIHelper.SKIP
        annual_fee = dictionary.get("annualFee") if dictionary.get("annualFee") else APIHelper.SKIP
        custom_card_upgrade_fee = dictionary.get("customCardUpgradeFee") if dictionary.get("customCardUpgradeFee") else APIHelper.SKIP
        included_cards = FanfareCardSplits.from_dictionary(dictionary.get('includedCards')) if 'includedCards' in dictionary.keys() else APIHelper.SKIP 
        additional_cards_type = dictionary.get("additionalCardsType") if dictionary.get("additionalCardsType") else APIHelper.SKIP
        additional_cards = FanfareCardSplits.from_dictionary(dictionary.get('additionalCards')) if 'additionalCards' in dictionary.keys() else APIHelper.SKIP 
        additional_card_price = dictionary.get("additionalCardPrice") if dictionary.get("additionalCardPrice") else APIHelper.SKIP
        program_checkup = dictionary.get("programCheckup") if dictionary.get("programCheckup") else APIHelper.SKIP
        card_style = dictionary.get("cardStyle") if dictionary.get("cardStyle") else APIHelper.SKIP
        justification_type = dictionary.get("justificationType") if dictionary.get("justificationType") else APIHelper.SKIP
        card_is_text = dictionary.get("cardIsText") if "cardIsText" in dictionary.keys() else APIHelper.SKIP
        card_text = dictionary.get("cardText") if dictionary.get("cardText") else APIHelper.SKIP
        text_case_type = dictionary.get("textCaseType") if dictionary.get("textCaseType") else APIHelper.SKIP
        text_color = dictionary.get("textColor") if dictionary.get("textColor") else APIHelper.SKIP
        text_font = dictionary.get("textFont") if dictionary.get("textFont") else APIHelper.SKIP
        # Return an object of this model
        return cls(setup_fee,
                   monthly_fee,
                   annual_fee,
                   custom_card_upgrade_fee,
                   included_cards,
                   additional_cards_type,
                   additional_cards,
                   additional_card_price,
                   program_checkup,
                   card_style,
                   justification_type,
                   card_is_text,
                   card_text,
                   text_case_type,
                   text_color,
                   text_font)
