# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.phone_number import PhoneNumber


class FinancialInfo(object):

    """Implementation of the 'FinancialInfo' model.

    TODO: type model description here.

    Attributes:
        avg_sale_amount (string): Average Transaction Value (ATV)
        monthly_card_sales (string): Predicted monthly credit card sales
        annual_card_sales (string): [EU] Projected yearly card sales
        annual_revenue (string): Projected yearly gross revenue
        highest_ticket_amount (string): [NA] Highest estimated ticket amount
        highest_ticket_frequency (int): [NA] Frequency with which highest
            ticket is received annually
        funding_currency (string): Funding currency of business
        card_present_acceptance_percent (string): The percentage split of card
            present transactions
        internet_acceptance_percent (string): The percentage split of
            internet/ecom transactions
        moto_acceptance_percent (string): The percentage split of
            mail-order/telephone-order transactions
        business_email_address (string): [EU] Business email contact, required
            if internetAcceptancePercent > 0
        business_website_url (string): Business URL, required if
            internetAcceptancePercent > 0
        customer_service_phone (PhoneNumber): TODO: type description here.
        not_present_delay_days (int): [NA] Card Not Present delay for
            something
        deposit_frequency (string): [EU]
        deposit_size_percent (string): [EU]
        deposit_balance_days (string): [EU]
        deposit_fulfillment_days (string): [EU]
        full_payment_percent (string): [EU]
        full_payment_fulfillment (string): [EU]
        utilize_cvv_2 (bool): [EU]
        recurring_transactions (bool): [EU]
        contract_term_type (ContractTermTypeEnum): [EU] ZERO_MONTH,
            TWELVE_MONTHS, TWENTY_FOUR_MONTHS, or THIRTY_SIX_MONTHS
        months_closed (list of MonthsClosedEnum): List containing months
            business is closed, for seasonal businesses
        monetary_billing_method (MonetaryBillingMethodEnum): [NA] string,
            CARD_DISCOUNT or DIA
        authorization_included (bool): [NA]
        annual_fee_month_start (AnnualFeeMonthStartEnum): [NA] The month in
            which annual fee is applied
        money_services (bool): [EU]
        payment_services (bool): TODO: type description here.
        third_party_processor (bool): TODO: type description here.
        non_government_non_profit (bool): [EU]
        daily_discount (bool): [NA]
        non_bank_atm (bool): Does business operate its own ATM (not associated
            with a bank)
        embassy (bool): Deprecated
        high_inter_annual_trans_ngo (bool): Deprecated

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "avg_sale_amount": 'avgSaleAmount',
        "monthly_card_sales": 'monthlyCardSales',
        "card_present_acceptance_percent": 'cardPresentAcceptancePercent',
        "internet_acceptance_percent": 'internetAcceptancePercent',
        "moto_acceptance_percent": 'motoAcceptancePercent',
        "annual_card_sales": 'annualCardSales',
        "annual_revenue": 'annualRevenue',
        "highest_ticket_amount": 'highestTicketAmount',
        "highest_ticket_frequency": 'highestTicketFrequency',
        "funding_currency": 'fundingCurrency',
        "business_email_address": 'businessEmailAddress',
        "business_website_url": 'businessWebsiteURL',
        "customer_service_phone": 'customerServicePhone',
        "not_present_delay_days": 'notPresentDelayDays',
        "deposit_frequency": 'depositFrequency',
        "deposit_size_percent": 'depositSizePercent',
        "deposit_balance_days": 'depositBalanceDays',
        "deposit_fulfillment_days": 'depositFulfillmentDays',
        "full_payment_percent": 'fullPaymentPercent',
        "full_payment_fulfillment": 'fullPaymentFulfillment',
        "utilize_cvv_2": 'utilizeCVV2',
        "recurring_transactions": 'recurringTransactions',
        "contract_term_type": 'contractTermType',
        "months_closed": 'monthsClosed',
        "monetary_billing_method": 'monetaryBillingMethod',
        "authorization_included": 'authorizationIncluded',
        "annual_fee_month_start": 'annualFeeMonthStart',
        "money_services": 'moneyServices',
        "payment_services": 'paymentServices',
        "third_party_processor": 'thirdPartyProcessor',
        "non_government_non_profit": 'nonGovernmentNonProfit',
        "daily_discount": 'dailyDiscount',
        "non_bank_atm": 'nonBankAtm',
        "embassy": 'embassy',
        "high_inter_annual_trans_ngo": 'highInterAnnualTransNgo'
    }

    _optionals = [
        'annual_card_sales',
        'annual_revenue',
        'highest_ticket_amount',
        'highest_ticket_frequency',
        'funding_currency',
        'business_email_address',
        'business_website_url',
        'customer_service_phone',
        'not_present_delay_days',
        'deposit_frequency',
        'deposit_size_percent',
        'deposit_balance_days',
        'deposit_fulfillment_days',
        'full_payment_percent',
        'full_payment_fulfillment',
        'utilize_cvv_2',
        'recurring_transactions',
        'contract_term_type',
        'months_closed',
        'monetary_billing_method',
        'authorization_included',
        'annual_fee_month_start',
        'money_services',
        'payment_services',
        'third_party_processor',
        'non_government_non_profit',
        'daily_discount',
        'non_bank_atm',
        'embassy',
        'high_inter_annual_trans_ngo',
    ]

    def __init__(self,
                 avg_sale_amount=None,
                 monthly_card_sales=None,
                 card_present_acceptance_percent=None,
                 internet_acceptance_percent=None,
                 moto_acceptance_percent=None,
                 annual_card_sales=APIHelper.SKIP,
                 annual_revenue=APIHelper.SKIP,
                 highest_ticket_amount=APIHelper.SKIP,
                 highest_ticket_frequency=APIHelper.SKIP,
                 funding_currency=APIHelper.SKIP,
                 business_email_address=APIHelper.SKIP,
                 business_website_url=APIHelper.SKIP,
                 customer_service_phone=APIHelper.SKIP,
                 not_present_delay_days=APIHelper.SKIP,
                 deposit_frequency=APIHelper.SKIP,
                 deposit_size_percent=APIHelper.SKIP,
                 deposit_balance_days=APIHelper.SKIP,
                 deposit_fulfillment_days=APIHelper.SKIP,
                 full_payment_percent=APIHelper.SKIP,
                 full_payment_fulfillment=APIHelper.SKIP,
                 utilize_cvv_2=APIHelper.SKIP,
                 recurring_transactions=APIHelper.SKIP,
                 contract_term_type=APIHelper.SKIP,
                 months_closed=APIHelper.SKIP,
                 monetary_billing_method=APIHelper.SKIP,
                 authorization_included=APIHelper.SKIP,
                 annual_fee_month_start=APIHelper.SKIP,
                 money_services=APIHelper.SKIP,
                 payment_services=APIHelper.SKIP,
                 third_party_processor=APIHelper.SKIP,
                 non_government_non_profit=APIHelper.SKIP,
                 daily_discount=APIHelper.SKIP,
                 non_bank_atm=APIHelper.SKIP,
                 embassy=APIHelper.SKIP,
                 high_inter_annual_trans_ngo=APIHelper.SKIP):
        """Constructor for the FinancialInfo class"""

        # Initialize members of the class
        self.avg_sale_amount = avg_sale_amount 
        self.monthly_card_sales = monthly_card_sales 
        if annual_card_sales is not APIHelper.SKIP:
            self.annual_card_sales = annual_card_sales 
        if annual_revenue is not APIHelper.SKIP:
            self.annual_revenue = annual_revenue 
        if highest_ticket_amount is not APIHelper.SKIP:
            self.highest_ticket_amount = highest_ticket_amount 
        if highest_ticket_frequency is not APIHelper.SKIP:
            self.highest_ticket_frequency = highest_ticket_frequency 
        if funding_currency is not APIHelper.SKIP:
            self.funding_currency = funding_currency 
        self.card_present_acceptance_percent = card_present_acceptance_percent 
        self.internet_acceptance_percent = internet_acceptance_percent 
        self.moto_acceptance_percent = moto_acceptance_percent 
        if business_email_address is not APIHelper.SKIP:
            self.business_email_address = business_email_address 
        if business_website_url is not APIHelper.SKIP:
            self.business_website_url = business_website_url 
        if customer_service_phone is not APIHelper.SKIP:
            self.customer_service_phone = customer_service_phone 
        if not_present_delay_days is not APIHelper.SKIP:
            self.not_present_delay_days = not_present_delay_days 
        if deposit_frequency is not APIHelper.SKIP:
            self.deposit_frequency = deposit_frequency 
        if deposit_size_percent is not APIHelper.SKIP:
            self.deposit_size_percent = deposit_size_percent 
        if deposit_balance_days is not APIHelper.SKIP:
            self.deposit_balance_days = deposit_balance_days 
        if deposit_fulfillment_days is not APIHelper.SKIP:
            self.deposit_fulfillment_days = deposit_fulfillment_days 
        if full_payment_percent is not APIHelper.SKIP:
            self.full_payment_percent = full_payment_percent 
        if full_payment_fulfillment is not APIHelper.SKIP:
            self.full_payment_fulfillment = full_payment_fulfillment 
        if utilize_cvv_2 is not APIHelper.SKIP:
            self.utilize_cvv_2 = utilize_cvv_2 
        if recurring_transactions is not APIHelper.SKIP:
            self.recurring_transactions = recurring_transactions 
        if contract_term_type is not APIHelper.SKIP:
            self.contract_term_type = contract_term_type 
        if months_closed is not APIHelper.SKIP:
            self.months_closed = months_closed 
        if monetary_billing_method is not APIHelper.SKIP:
            self.monetary_billing_method = monetary_billing_method 
        if authorization_included is not APIHelper.SKIP:
            self.authorization_included = authorization_included 
        if annual_fee_month_start is not APIHelper.SKIP:
            self.annual_fee_month_start = annual_fee_month_start 
        if money_services is not APIHelper.SKIP:
            self.money_services = money_services 
        if payment_services is not APIHelper.SKIP:
            self.payment_services = payment_services 
        if third_party_processor is not APIHelper.SKIP:
            self.third_party_processor = third_party_processor 
        if non_government_non_profit is not APIHelper.SKIP:
            self.non_government_non_profit = non_government_non_profit 
        if daily_discount is not APIHelper.SKIP:
            self.daily_discount = daily_discount 
        if non_bank_atm is not APIHelper.SKIP:
            self.non_bank_atm = non_bank_atm 
        if embassy is not APIHelper.SKIP:
            self.embassy = embassy 
        if high_inter_annual_trans_ngo is not APIHelper.SKIP:
            self.high_inter_annual_trans_ngo = high_inter_annual_trans_ngo 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        avg_sale_amount = dictionary.get("avgSaleAmount") if dictionary.get("avgSaleAmount") else None
        monthly_card_sales = dictionary.get("monthlyCardSales") if dictionary.get("monthlyCardSales") else None
        card_present_acceptance_percent = dictionary.get("cardPresentAcceptancePercent") if dictionary.get("cardPresentAcceptancePercent") else None
        internet_acceptance_percent = dictionary.get("internetAcceptancePercent") if dictionary.get("internetAcceptancePercent") else None
        moto_acceptance_percent = dictionary.get("motoAcceptancePercent") if dictionary.get("motoAcceptancePercent") else None
        annual_card_sales = dictionary.get("annualCardSales") if dictionary.get("annualCardSales") else APIHelper.SKIP
        annual_revenue = dictionary.get("annualRevenue") if dictionary.get("annualRevenue") else APIHelper.SKIP
        highest_ticket_amount = dictionary.get("highestTicketAmount") if dictionary.get("highestTicketAmount") else APIHelper.SKIP
        highest_ticket_frequency = dictionary.get("highestTicketFrequency") if dictionary.get("highestTicketFrequency") else APIHelper.SKIP
        funding_currency = dictionary.get("fundingCurrency") if dictionary.get("fundingCurrency") else APIHelper.SKIP
        business_email_address = dictionary.get("businessEmailAddress") if dictionary.get("businessEmailAddress") else APIHelper.SKIP
        business_website_url = dictionary.get("businessWebsiteURL") if dictionary.get("businessWebsiteURL") else APIHelper.SKIP
        customer_service_phone = PhoneNumber.from_dictionary(dictionary.get('customerServicePhone')) if 'customerServicePhone' in dictionary.keys() else APIHelper.SKIP 
        not_present_delay_days = dictionary.get("notPresentDelayDays") if dictionary.get("notPresentDelayDays") else APIHelper.SKIP
        deposit_frequency = dictionary.get("depositFrequency") if dictionary.get("depositFrequency") else APIHelper.SKIP
        deposit_size_percent = dictionary.get("depositSizePercent") if dictionary.get("depositSizePercent") else APIHelper.SKIP
        deposit_balance_days = dictionary.get("depositBalanceDays") if dictionary.get("depositBalanceDays") else APIHelper.SKIP
        deposit_fulfillment_days = dictionary.get("depositFulfillmentDays") if dictionary.get("depositFulfillmentDays") else APIHelper.SKIP
        full_payment_percent = dictionary.get("fullPaymentPercent") if dictionary.get("fullPaymentPercent") else APIHelper.SKIP
        full_payment_fulfillment = dictionary.get("fullPaymentFulfillment") if dictionary.get("fullPaymentFulfillment") else APIHelper.SKIP
        utilize_cvv_2 = dictionary.get("utilizeCVV2") if "utilizeCVV2" in dictionary.keys() else APIHelper.SKIP
        recurring_transactions = dictionary.get("recurringTransactions") if "recurringTransactions" in dictionary.keys() else APIHelper.SKIP
        contract_term_type = dictionary.get("contractTermType") if dictionary.get("contractTermType") else APIHelper.SKIP
        months_closed = dictionary.get("monthsClosed") if dictionary.get("monthsClosed") else APIHelper.SKIP
        monetary_billing_method = dictionary.get("monetaryBillingMethod") if dictionary.get("monetaryBillingMethod") else APIHelper.SKIP
        authorization_included = dictionary.get("authorizationIncluded") if "authorizationIncluded" in dictionary.keys() else APIHelper.SKIP
        annual_fee_month_start = dictionary.get("annualFeeMonthStart") if dictionary.get("annualFeeMonthStart") else APIHelper.SKIP
        money_services = dictionary.get("moneyServices") if "moneyServices" in dictionary.keys() else APIHelper.SKIP
        payment_services = dictionary.get("paymentServices") if "paymentServices" in dictionary.keys() else APIHelper.SKIP
        third_party_processor = dictionary.get("thirdPartyProcessor") if "thirdPartyProcessor" in dictionary.keys() else APIHelper.SKIP
        non_government_non_profit = dictionary.get("nonGovernmentNonProfit") if "nonGovernmentNonProfit" in dictionary.keys() else APIHelper.SKIP
        daily_discount = dictionary.get("dailyDiscount") if "dailyDiscount" in dictionary.keys() else APIHelper.SKIP
        non_bank_atm = dictionary.get("nonBankAtm") if "nonBankAtm" in dictionary.keys() else APIHelper.SKIP
        embassy = dictionary.get("embassy") if "embassy" in dictionary.keys() else APIHelper.SKIP
        high_inter_annual_trans_ngo = dictionary.get("highInterAnnualTransNgo") if "highInterAnnualTransNgo" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(avg_sale_amount,
                   monthly_card_sales,
                   card_present_acceptance_percent,
                   internet_acceptance_percent,
                   moto_acceptance_percent,
                   annual_card_sales,
                   annual_revenue,
                   highest_ticket_amount,
                   highest_ticket_frequency,
                   funding_currency,
                   business_email_address,
                   business_website_url,
                   customer_service_phone,
                   not_present_delay_days,
                   deposit_frequency,
                   deposit_size_percent,
                   deposit_balance_days,
                   deposit_fulfillment_days,
                   full_payment_percent,
                   full_payment_fulfillment,
                   utilize_cvv_2,
                   recurring_transactions,
                   contract_term_type,
                   months_closed,
                   monetary_billing_method,
                   authorization_included,
                   annual_fee_month_start,
                   money_services,
                   payment_services,
                   third_party_processor,
                   non_government_non_profit,
                   daily_discount,
                   non_bank_atm,
                   embassy,
                   high_inter_annual_trans_ngo)
