# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.pricing_tier import PricingTier


class CardCharge(object):

    """Implementation of the 'CardCharge' model.

    TODO: type model description here.

    Attributes:
        card_type (CardTypeEnum): Type of card
        minimum_fee (float): [EU] Minimum charge fee to be applied to card
        authorization_fee (float): [NA] Auth fee to be applied to card
        se_number (string): [NA] Service Establishment number of card
        service_type (ServiceTypeEnum): [EU] Service level of card
        card_funding (CardFundingEnum): [NA] Who is providing the funding for
            the card
        pricing_tiers (dict): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_type": 'cardType',
        "minimum_fee": 'minimumFee',
        "authorization_fee": 'authorizationFee',
        "se_number": 'seNumber',
        "service_type": 'serviceType',
        "card_funding": 'cardFunding',
        "pricing_tiers": 'pricingTiers'
    }

    _optionals = [
        'minimum_fee',
        'authorization_fee',
        'se_number',
        'service_type',
        'card_funding',
        'pricing_tiers',
    ]

    def __init__(self,
                 card_type=None,
                 minimum_fee=APIHelper.SKIP,
                 authorization_fee=APIHelper.SKIP,
                 se_number=APIHelper.SKIP,
                 service_type=APIHelper.SKIP,
                 card_funding=APIHelper.SKIP,
                 pricing_tiers=APIHelper.SKIP):
        """Constructor for the CardCharge class"""

        # Initialize members of the class
        self.card_type = card_type 
        if minimum_fee is not APIHelper.SKIP:
            self.minimum_fee = minimum_fee 
        if authorization_fee is not APIHelper.SKIP:
            self.authorization_fee = authorization_fee 
        if se_number is not APIHelper.SKIP:
            self.se_number = se_number 
        if service_type is not APIHelper.SKIP:
            self.service_type = service_type 
        if card_funding is not APIHelper.SKIP:
            self.card_funding = card_funding 
        if pricing_tiers is not APIHelper.SKIP:
            self.pricing_tiers = pricing_tiers 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        card_type = dictionary.get("cardType") if dictionary.get("cardType") else None
        minimum_fee = dictionary.get("minimumFee") if dictionary.get("minimumFee") else APIHelper.SKIP
        authorization_fee = dictionary.get("authorizationFee") if dictionary.get("authorizationFee") else APIHelper.SKIP
        se_number = dictionary.get("seNumber") if dictionary.get("seNumber") else APIHelper.SKIP
        service_type = dictionary.get("serviceType") if dictionary.get("serviceType") else APIHelper.SKIP
        card_funding = dictionary.get("cardFunding") if dictionary.get("cardFunding") else APIHelper.SKIP
        pricing_tiers = PricingTier.from_dictionary(dictionary.get('pricingTiers')) if 'pricingTiers' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(card_type,
                   minimum_fee,
                   authorization_fee,
                   se_number,
                   service_type,
                   card_funding,
                   pricing_tiers)
