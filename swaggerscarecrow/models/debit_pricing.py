# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.debit_network_charge import DebitNetworkCharge


class DebitPricing(object):

    """Implementation of the 'DebitPricing' model.

    TODO: type model description here.

    Attributes:
        pricing_method (PricingMethod1Enum): Debit network pricing method
        authorization_method (AuthorizationMethodEnum): Debit network
            authorization method
        surcharge_amount (float): Debit surcharge amount
        surcharge_percent (string): Debit surcharge percentage
        debit_network_charges (list of DebitNetworkCharge): Debit network
            charges listing
        pinless_setup (bool): Debit pinless setup

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pricing_method": 'pricingMethod',
        "authorization_method": 'authorizationMethod',
        "debit_network_charges": 'debitNetworkCharges',
        "surcharge_amount": 'surchargeAmount',
        "surcharge_percent": 'surchargePercent',
        "pinless_setup": 'pinlessSetup'
    }

    _optionals = [
        'surcharge_amount',
        'surcharge_percent',
        'pinless_setup',
    ]

    def __init__(self,
                 pricing_method=None,
                 authorization_method=None,
                 debit_network_charges=None,
                 surcharge_amount=APIHelper.SKIP,
                 surcharge_percent=APIHelper.SKIP,
                 pinless_setup=APIHelper.SKIP):
        """Constructor for the DebitPricing class"""

        # Initialize members of the class
        self.pricing_method = pricing_method 
        self.authorization_method = authorization_method 
        if surcharge_amount is not APIHelper.SKIP:
            self.surcharge_amount = surcharge_amount 
        if surcharge_percent is not APIHelper.SKIP:
            self.surcharge_percent = surcharge_percent 
        self.debit_network_charges = debit_network_charges 
        if pinless_setup is not APIHelper.SKIP:
            self.pinless_setup = pinless_setup 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        pricing_method = dictionary.get("pricingMethod") if dictionary.get("pricingMethod") else None
        authorization_method = dictionary.get("authorizationMethod") if dictionary.get("authorizationMethod") else None
        debit_network_charges = None
        if dictionary.get('debitNetworkCharges') is not None:
            debit_network_charges = [DebitNetworkCharge.from_dictionary(x) for x in dictionary.get('debitNetworkCharges')]
        surcharge_amount = dictionary.get("surchargeAmount") if dictionary.get("surchargeAmount") else APIHelper.SKIP
        surcharge_percent = dictionary.get("surchargePercent") if dictionary.get("surchargePercent") else APIHelper.SKIP
        pinless_setup = dictionary.get("pinlessSetup") if "pinlessSetup" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(pricing_method,
                   authorization_method,
                   debit_network_charges,
                   surcharge_amount,
                   surcharge_percent,
                   pinless_setup)
