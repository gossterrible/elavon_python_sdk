# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.address_fields import AddressFields
from swaggerscarecrow.models.phone_fields import PhoneFields


class CompanyContactInfo(object):

    """Implementation of the 'CompanyContactInfo' model.

    TODO: type model description here.

    Attributes:
        telephone (string): TODO: type description here.
        email_addresses (list of string): TODO: type description here.
        web_pages (list of string): TODO: type description here.
        address (AddressFields): TODO: type description here.
        phone_fields (PhoneFields): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "telephone": 'telephone',
        "email_addresses": 'emailAddresses',
        "web_pages": 'webPages',
        "address": 'address',
        "phone_fields": 'phoneFields'
    }

    _optionals = [
        'telephone',
        'email_addresses',
        'web_pages',
        'address',
        'phone_fields',
    ]

    def __init__(self,
                 telephone=APIHelper.SKIP,
                 email_addresses=APIHelper.SKIP,
                 web_pages=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 phone_fields=APIHelper.SKIP):
        """Constructor for the CompanyContactInfo class"""

        # Initialize members of the class
        if telephone is not APIHelper.SKIP:
            self.telephone = telephone 
        if email_addresses is not APIHelper.SKIP:
            self.email_addresses = email_addresses 
        if web_pages is not APIHelper.SKIP:
            self.web_pages = web_pages 
        if address is not APIHelper.SKIP:
            self.address = address 
        if phone_fields is not APIHelper.SKIP:
            self.phone_fields = phone_fields 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        telephone = dictionary.get("telephone") if dictionary.get("telephone") else APIHelper.SKIP
        email_addresses = dictionary.get("emailAddresses") if dictionary.get("emailAddresses") else APIHelper.SKIP
        web_pages = dictionary.get("webPages") if dictionary.get("webPages") else APIHelper.SKIP
        address = AddressFields.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP 
        phone_fields = PhoneFields.from_dictionary(dictionary.get('phoneFields')) if 'phoneFields' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(telephone,
                   email_addresses,
                   web_pages,
                   address,
                   phone_fields)
