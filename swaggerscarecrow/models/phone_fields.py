# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class PhoneFields(object):

    """Implementation of the 'PhoneFields' model.

    TODO: type model description here.

    Attributes:
        simple_value (string): TODO: type description here.
        country_dial_code (string): TODO: type description here.
        area_code (string): TODO: type description here.
        prefix (string): TODO: type description here.
        line_number (string): TODO: type description here.
        prefix_and_number (string): TODO: type description here.
        extension (string): TODO: type description here.
        phonetype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "simple_value": 'simpleValue',
        "country_dial_code": 'countryDialCode',
        "area_code": 'areaCode',
        "prefix": 'prefix',
        "line_number": 'lineNumber',
        "prefix_and_number": 'prefixAndNumber',
        "extension": 'extension',
        "phonetype": 'phonetype'
    }

    _optionals = [
        'simple_value',
        'country_dial_code',
        'area_code',
        'prefix',
        'line_number',
        'prefix_and_number',
        'extension',
        'phonetype',
    ]

    def __init__(self,
                 simple_value=APIHelper.SKIP,
                 country_dial_code=APIHelper.SKIP,
                 area_code=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 line_number=APIHelper.SKIP,
                 prefix_and_number=APIHelper.SKIP,
                 extension=APIHelper.SKIP,
                 phonetype=APIHelper.SKIP):
        """Constructor for the PhoneFields class"""

        # Initialize members of the class
        if simple_value is not APIHelper.SKIP:
            self.simple_value = simple_value 
        if country_dial_code is not APIHelper.SKIP:
            self.country_dial_code = country_dial_code 
        if area_code is not APIHelper.SKIP:
            self.area_code = area_code 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        if line_number is not APIHelper.SKIP:
            self.line_number = line_number 
        if prefix_and_number is not APIHelper.SKIP:
            self.prefix_and_number = prefix_and_number 
        if extension is not APIHelper.SKIP:
            self.extension = extension 
        if phonetype is not APIHelper.SKIP:
            self.phonetype = phonetype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        simple_value = dictionary.get("simpleValue") if dictionary.get("simpleValue") else APIHelper.SKIP
        country_dial_code = dictionary.get("countryDialCode") if dictionary.get("countryDialCode") else APIHelper.SKIP
        area_code = dictionary.get("areaCode") if dictionary.get("areaCode") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else APIHelper.SKIP
        line_number = dictionary.get("lineNumber") if dictionary.get("lineNumber") else APIHelper.SKIP
        prefix_and_number = dictionary.get("prefixAndNumber") if dictionary.get("prefixAndNumber") else APIHelper.SKIP
        extension = dictionary.get("extension") if dictionary.get("extension") else APIHelper.SKIP
        phonetype = dictionary.get("phonetype") if dictionary.get("phonetype") else APIHelper.SKIP
        # Return an object of this model
        return cls(simple_value,
                   country_dial_code,
                   area_code,
                   prefix,
                   line_number,
                   prefix_and_number,
                   extension,
                   phonetype)
