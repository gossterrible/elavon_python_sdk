# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.date_components import DateComponents


class HempGrowerInfo(object):

    """Implementation of the 'HempGrowerInfo' model.

    TODO: type model description here.

    Attributes:
        operations_description (string): [NA] Description of type and nature
            of hemp growers operation
        is_licensed (bool): [NA] Flag indicating whether the customer is a
            licensed hemp grower
        license_expiration_date (DateComponents): A container that holds the
            date (day, month, and year)
        additional_mrb_activity (bool): [NA] Flag indicating whether the
            customer engages in Marijuana Related Business (MRB) beyond hemp
            growing
        cannabis_revenue_percentage_range
            (CannabisRevenuePercentageRangeEnum): [NA] Approximate range of
            percent of business revenue derived from cannabis related sales

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "operations_description": 'operationsDescription',
        "is_licensed": 'isLicensed',
        "additional_mrb_activity": 'additionalMRBActivity',
        "license_expiration_date": 'licenseExpirationDate',
        "cannabis_revenue_percentage_range": 'cannabisRevenuePercentageRange'
    }

    _optionals = [
        'license_expiration_date',
        'cannabis_revenue_percentage_range',
    ]

    def __init__(self,
                 operations_description=None,
                 is_licensed=None,
                 additional_mrb_activity=None,
                 license_expiration_date=APIHelper.SKIP,
                 cannabis_revenue_percentage_range=APIHelper.SKIP):
        """Constructor for the HempGrowerInfo class"""

        # Initialize members of the class
        self.operations_description = operations_description 
        self.is_licensed = is_licensed 
        if license_expiration_date is not APIHelper.SKIP:
            self.license_expiration_date = license_expiration_date 
        self.additional_mrb_activity = additional_mrb_activity 
        if cannabis_revenue_percentage_range is not APIHelper.SKIP:
            self.cannabis_revenue_percentage_range = cannabis_revenue_percentage_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        operations_description = dictionary.get("operationsDescription") if dictionary.get("operationsDescription") else None
        is_licensed = dictionary.get("isLicensed") if "isLicensed" in dictionary.keys() else None
        additional_mrb_activity = dictionary.get("additionalMRBActivity") if "additionalMRBActivity" in dictionary.keys() else None
        license_expiration_date = DateComponents.from_dictionary(dictionary.get('licenseExpirationDate')) if 'licenseExpirationDate' in dictionary.keys() else APIHelper.SKIP 
        cannabis_revenue_percentage_range = dictionary.get("cannabisRevenuePercentageRange") if dictionary.get("cannabisRevenuePercentageRange") else APIHelper.SKIP
        # Return an object of this model
        return cls(operations_description,
                   is_licensed,
                   additional_mrb_activity,
                   license_expiration_date,
                   cannabis_revenue_percentage_range)
