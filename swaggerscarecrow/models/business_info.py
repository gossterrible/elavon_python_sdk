# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.address import Address
from swaggerscarecrow.models.credit_decision_info import CreditDecisionInfo
from swaggerscarecrow.models.date_components import DateComponents
from swaggerscarecrow.models.hemp_grower_info import HempGrowerInfo
from swaggerscarecrow.models.pci_info import PCIInfo
from swaggerscarecrow.models.vat_info import VatInfo
from swaggerscarecrow.models.verification_info import VerificationInfo


class BusinessInfo(object):

    """Implementation of the 'BusinessInfo' model.

    TODO: type model description here.

    Attributes:
        dba_name (string): Doing Business As name for business
        dba_name_extended (string): Doing Business As name for business,
            character limit extended
        business_address (Address): TODO: type description here.
        legal_name (string): Certified legal name of business
        legal_name_extended (string): Certified legal name of business,
            character limit extended
        legal_name_marked (list of string): Certified legal name of business,
            permits accented characters, required in POL
        additional_addresses (dict): Container of other addresses, legal
            required.The valid keys are as follows: BUSINESS, LEGAL, SHIPPING,
            MAILING, PRINCIPAL, PREVIOUS, STATEMENT
        ownership_type (OwnershipTypeEnum): Type of business
        registration_number (string): [EU] Registration number of business,
            required for LIMITED_LIBABILITY_PARTNERSHIP, LIMITED_COMPANY, or
            PUBLIC_LIMITED_COMPANY
        tax_id (string): Business tax ID. For testing a valid tax ID, use
            format 78742xxxx where 'xxxx' represents a series of four random,
            non-repeating, non-sequential numbers
        tax_id_type (TaxIDTypeEnum): [NA] Type of tax id provieded
        vat_info (VatInfo): TODO: type description here.
        tax_form_type (TaxFormTypeEnum): [NA] Type of tax form provided
        tax_class_type (TaxClassTypeEnum): [NA] Type of business's tax
            classification
        customer_membership_number (string): [NA] Business membership number
            (ex. COSTCO)
        product_description (string): Description of product/service business
            provides
        mcc_code (string): Extended MCC code business qualifies as
        establishment_year (string): Year business was established
        current_ownership_years (string): Years business has been in control
            of current ownership
        current_ownership_months (string): Months business has been in control
            of current ownership
        government_owned_entity (bool): [EU] Indicate if more than 50% of the
            business is owned by the government. This field is mandatory for
            all ownership types.
        communication_language (string): Language to be used for legal
            documents and communication between business and customer, ISO
            639-1 standard applies
        pos_language (string): Language to be used for equipment displays, ISO
            639-1 standard applies
        store_number (string): [EU] Business store number
        association_codes (list of string): [EU] Elavon promotion/assocation
            code listing
        opt_out (bool): [EU] Elavon marketing opt out flag, true if opt out
            YES, false if opt out NO
        sign_date (DateComponents): A container that holds the date (day,
            month, and year)
        pci_info (PCIInfo): TODO: type description here.
        employer_id (string): [NA] Employer id
        country_of_origin (string): Country of business origin, ISO 3166-1
            alpha-3 standard applies
        exemption_type (ExemptionTypeEnum): [NA] Exemption type of business
            (AML)
        owner_exemption_type (OwnerExemptionTypeEnum): [NA] Exemption type of
            owner (AML)
        number_of_partners (NumberOfPartnersEnum): [EU] Number of partners
            business has, applicable if business is any kind of PARTNERSHIP
        relationship_mgr_code (string): [EU] Relationship manager code
        country_of_primary_operation (string): Country of business primary
            operation, ISO 3166-1 alpha-3 standard applies
        bearer_shares (bool): [NA] Flag indicating if business has bearer
            shares, true if YES, false if NO
        legal_status (LegalStatusEnum): [NA] Business entity legal status
        verifications (dict): [NA] Anti-Money Laundering (AML) oriented
            documentation info for the business. The valid keys are as
            follows: BUSINESS, LEGAL, SHIPPING, MAILING, PRINCIPAL, PREVIOUS,
            STATEMENT
        industry_class (IndustryClassEnum): [NA] Business industry
            classification
        no_plates (bool): [NA] Flag indicating if plates are to be delivered
            to business, true if no delivery, false if yes to delivery (NA)
        agent_number (string): [NA] Agent number
        location_mid_range (LocationMidRangeEnum): [EU] 10 character MID range
            for Nordics.
        hemp_grower_info (HempGrowerInfo): TODO: type description here.
        credit_decision_info (CreditDecisionInfo): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dba_name": 'dbaName',
        "dba_name_extended": 'dbaNameExtended',
        "business_address": 'businessAddress',
        "legal_name": 'legalName',
        "legal_name_extended": 'legalNameExtended',
        "additional_addresses": 'additionalAddresses',
        "ownership_type": 'ownershipType',
        "product_description": 'productDescription',
        "mcc_code": 'mccCode',
        "establishment_year": 'establishmentYear',
        "current_ownership_years": 'currentOwnershipYears',
        "current_ownership_months": 'currentOwnershipMonths',
        "communication_language": 'communicationLanguage',
        "pos_language": 'posLanguage',
        "legal_name_marked": 'legalNameMarked',
        "registration_number": 'registrationNumber',
        "tax_id": 'taxID',
        "tax_id_type": 'taxIDType',
        "vat_info": 'vatInfo',
        "tax_form_type": 'taxFormType',
        "tax_class_type": 'taxClassType',
        "customer_membership_number": 'customerMembershipNumber',
        "government_owned_entity": 'governmentOwnedEntity',
        "store_number": 'storeNumber',
        "association_codes": 'associationCodes',
        "opt_out": 'optOut',
        "sign_date": 'signDate',
        "pci_info": 'pciInfo',
        "employer_id": 'employerId',
        "country_of_origin": 'countryOfOrigin',
        "exemption_type": 'exemptionType',
        "owner_exemption_type": 'ownerExemptionType',
        "number_of_partners": 'numberOfPartners',
        "relationship_mgr_code": 'relationshipMgrCode',
        "country_of_primary_operation": 'countryOfPrimaryOperation',
        "bearer_shares": 'bearerShares',
        "legal_status": 'legalStatus',
        "verifications": 'verifications',
        "industry_class": 'industryClass',
        "no_plates": 'noPlates',
        "agent_number": 'agentNumber',
        "location_mid_range": 'locationMidRange',
        "hemp_grower_info": 'hempGrowerInfo',
        "credit_decision_info": 'creditDecisionInfo'
    }

    _optionals = [
        'legal_name_marked',
        'registration_number',
        'tax_id',
        'tax_id_type',
        'vat_info',
        'tax_form_type',
        'tax_class_type',
        'customer_membership_number',
        'government_owned_entity',
        'store_number',
        'association_codes',
        'opt_out',
        'sign_date',
        'pci_info',
        'employer_id',
        'country_of_origin',
        'exemption_type',
        'owner_exemption_type',
        'number_of_partners',
        'relationship_mgr_code',
        'country_of_primary_operation',
        'bearer_shares',
        'legal_status',
        'verifications',
        'industry_class',
        'no_plates',
        'agent_number',
        'location_mid_range',
        'hemp_grower_info',
        'credit_decision_info',
    ]

    def __init__(self,
                 dba_name=None,
                 dba_name_extended=None,
                 business_address=None,
                 legal_name=None,
                 legal_name_extended=None,
                 additional_addresses=None,
                 ownership_type=None,
                 product_description=None,
                 mcc_code=None,
                 establishment_year=None,
                 current_ownership_years=None,
                 current_ownership_months=None,
                 communication_language=None,
                 pos_language=None,
                 legal_name_marked=APIHelper.SKIP,
                 registration_number=APIHelper.SKIP,
                 tax_id=APIHelper.SKIP,
                 tax_id_type=APIHelper.SKIP,
                 vat_info=APIHelper.SKIP,
                 tax_form_type=APIHelper.SKIP,
                 tax_class_type=APIHelper.SKIP,
                 customer_membership_number=APIHelper.SKIP,
                 government_owned_entity=APIHelper.SKIP,
                 store_number=APIHelper.SKIP,
                 association_codes=APIHelper.SKIP,
                 opt_out=APIHelper.SKIP,
                 sign_date=APIHelper.SKIP,
                 pci_info=APIHelper.SKIP,
                 employer_id=APIHelper.SKIP,
                 country_of_origin=APIHelper.SKIP,
                 exemption_type=APIHelper.SKIP,
                 owner_exemption_type=APIHelper.SKIP,
                 number_of_partners=APIHelper.SKIP,
                 relationship_mgr_code=APIHelper.SKIP,
                 country_of_primary_operation=APIHelper.SKIP,
                 bearer_shares=APIHelper.SKIP,
                 legal_status=APIHelper.SKIP,
                 verifications=APIHelper.SKIP,
                 industry_class=APIHelper.SKIP,
                 no_plates=APIHelper.SKIP,
                 agent_number=APIHelper.SKIP,
                 location_mid_range=APIHelper.SKIP,
                 hemp_grower_info=APIHelper.SKIP,
                 credit_decision_info=APIHelper.SKIP):
        """Constructor for the BusinessInfo class"""

        # Initialize members of the class
        self.dba_name = dba_name 
        self.dba_name_extended = dba_name_extended 
        self.business_address = business_address 
        self.legal_name = legal_name 
        self.legal_name_extended = legal_name_extended 
        if legal_name_marked is not APIHelper.SKIP:
            self.legal_name_marked = legal_name_marked 
        self.additional_addresses = additional_addresses 
        self.ownership_type = ownership_type 
        if registration_number is not APIHelper.SKIP:
            self.registration_number = registration_number 
        if tax_id is not APIHelper.SKIP:
            self.tax_id = tax_id 
        if tax_id_type is not APIHelper.SKIP:
            self.tax_id_type = tax_id_type 
        if vat_info is not APIHelper.SKIP:
            self.vat_info = vat_info 
        if tax_form_type is not APIHelper.SKIP:
            self.tax_form_type = tax_form_type 
        if tax_class_type is not APIHelper.SKIP:
            self.tax_class_type = tax_class_type 
        if customer_membership_number is not APIHelper.SKIP:
            self.customer_membership_number = customer_membership_number 
        self.product_description = product_description 
        self.mcc_code = mcc_code 
        self.establishment_year = establishment_year 
        self.current_ownership_years = current_ownership_years 
        self.current_ownership_months = current_ownership_months 
        if government_owned_entity is not APIHelper.SKIP:
            self.government_owned_entity = government_owned_entity 
        self.communication_language = communication_language 
        self.pos_language = pos_language 
        if store_number is not APIHelper.SKIP:
            self.store_number = store_number 
        if association_codes is not APIHelper.SKIP:
            self.association_codes = association_codes 
        if opt_out is not APIHelper.SKIP:
            self.opt_out = opt_out 
        if sign_date is not APIHelper.SKIP:
            self.sign_date = sign_date 
        if pci_info is not APIHelper.SKIP:
            self.pci_info = pci_info 
        if employer_id is not APIHelper.SKIP:
            self.employer_id = employer_id 
        if country_of_origin is not APIHelper.SKIP:
            self.country_of_origin = country_of_origin 
        if exemption_type is not APIHelper.SKIP:
            self.exemption_type = exemption_type 
        if owner_exemption_type is not APIHelper.SKIP:
            self.owner_exemption_type = owner_exemption_type 
        if number_of_partners is not APIHelper.SKIP:
            self.number_of_partners = number_of_partners 
        if relationship_mgr_code is not APIHelper.SKIP:
            self.relationship_mgr_code = relationship_mgr_code 
        if country_of_primary_operation is not APIHelper.SKIP:
            self.country_of_primary_operation = country_of_primary_operation 
        if bearer_shares is not APIHelper.SKIP:
            self.bearer_shares = bearer_shares 
        if legal_status is not APIHelper.SKIP:
            self.legal_status = legal_status 
        if verifications is not APIHelper.SKIP:
            self.verifications = verifications 
        if industry_class is not APIHelper.SKIP:
            self.industry_class = industry_class 
        if no_plates is not APIHelper.SKIP:
            self.no_plates = no_plates 
        if agent_number is not APIHelper.SKIP:
            self.agent_number = agent_number 
        if location_mid_range is not APIHelper.SKIP:
            self.location_mid_range = location_mid_range 
        if hemp_grower_info is not APIHelper.SKIP:
            self.hemp_grower_info = hemp_grower_info 
        if credit_decision_info is not APIHelper.SKIP:
            self.credit_decision_info = credit_decision_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dba_name = dictionary.get("dbaName") if dictionary.get("dbaName") else None
        dba_name_extended = dictionary.get("dbaNameExtended") if dictionary.get("dbaNameExtended") else None
        business_address = Address.from_dictionary(dictionary.get('businessAddress')) if dictionary.get('businessAddress') else None
        legal_name = dictionary.get("legalName") if dictionary.get("legalName") else None
        legal_name_extended = dictionary.get("legalNameExtended") if dictionary.get("legalNameExtended") else None
        additional_addresses = Address.from_dictionary(dictionary.get('additionalAddresses')) if dictionary.get('additionalAddresses') else None
        ownership_type = dictionary.get("ownershipType") if dictionary.get("ownershipType") else None
        product_description = dictionary.get("productDescription") if dictionary.get("productDescription") else None
        mcc_code = dictionary.get("mccCode") if dictionary.get("mccCode") else None
        establishment_year = dictionary.get("establishmentYear") if dictionary.get("establishmentYear") else None
        current_ownership_years = dictionary.get("currentOwnershipYears") if dictionary.get("currentOwnershipYears") else None
        current_ownership_months = dictionary.get("currentOwnershipMonths") if dictionary.get("currentOwnershipMonths") else None
        communication_language = dictionary.get("communicationLanguage") if dictionary.get("communicationLanguage") else None
        pos_language = dictionary.get("posLanguage") if dictionary.get("posLanguage") else None
        legal_name_marked = dictionary.get("legalNameMarked") if dictionary.get("legalNameMarked") else APIHelper.SKIP
        registration_number = dictionary.get("registrationNumber") if dictionary.get("registrationNumber") else APIHelper.SKIP
        tax_id = dictionary.get("taxID") if dictionary.get("taxID") else APIHelper.SKIP
        tax_id_type = dictionary.get("taxIDType") if dictionary.get("taxIDType") else APIHelper.SKIP
        vat_info = VatInfo.from_dictionary(dictionary.get('vatInfo')) if 'vatInfo' in dictionary.keys() else APIHelper.SKIP 
        tax_form_type = dictionary.get("taxFormType") if dictionary.get("taxFormType") else APIHelper.SKIP
        tax_class_type = dictionary.get("taxClassType") if dictionary.get("taxClassType") else APIHelper.SKIP
        customer_membership_number = dictionary.get("customerMembershipNumber") if dictionary.get("customerMembershipNumber") else APIHelper.SKIP
        government_owned_entity = dictionary.get("governmentOwnedEntity") if "governmentOwnedEntity" in dictionary.keys() else APIHelper.SKIP
        store_number = dictionary.get("storeNumber") if dictionary.get("storeNumber") else APIHelper.SKIP
        association_codes = dictionary.get("associationCodes") if dictionary.get("associationCodes") else APIHelper.SKIP
        opt_out = dictionary.get("optOut") if "optOut" in dictionary.keys() else APIHelper.SKIP
        sign_date = DateComponents.from_dictionary(dictionary.get('signDate')) if 'signDate' in dictionary.keys() else APIHelper.SKIP 
        pci_info = PCIInfo.from_dictionary(dictionary.get('pciInfo')) if 'pciInfo' in dictionary.keys() else APIHelper.SKIP 
        employer_id = dictionary.get("employerId") if dictionary.get("employerId") else APIHelper.SKIP
        country_of_origin = dictionary.get("countryOfOrigin") if dictionary.get("countryOfOrigin") else APIHelper.SKIP
        exemption_type = dictionary.get("exemptionType") if dictionary.get("exemptionType") else APIHelper.SKIP
        owner_exemption_type = dictionary.get("ownerExemptionType") if dictionary.get("ownerExemptionType") else APIHelper.SKIP
        number_of_partners = dictionary.get("numberOfPartners") if dictionary.get("numberOfPartners") else APIHelper.SKIP
        relationship_mgr_code = dictionary.get("relationshipMgrCode") if dictionary.get("relationshipMgrCode") else APIHelper.SKIP
        country_of_primary_operation = dictionary.get("countryOfPrimaryOperation") if dictionary.get("countryOfPrimaryOperation") else APIHelper.SKIP
        bearer_shares = dictionary.get("bearerShares") if "bearerShares" in dictionary.keys() else APIHelper.SKIP
        legal_status = dictionary.get("legalStatus") if dictionary.get("legalStatus") else APIHelper.SKIP
        verifications = VerificationInfo.from_dictionary(dictionary.get('verifications')) if 'verifications' in dictionary.keys() else APIHelper.SKIP 
        industry_class = dictionary.get("industryClass") if dictionary.get("industryClass") else APIHelper.SKIP
        no_plates = dictionary.get("noPlates") if "noPlates" in dictionary.keys() else APIHelper.SKIP
        agent_number = dictionary.get("agentNumber") if dictionary.get("agentNumber") else APIHelper.SKIP
        location_mid_range = dictionary.get("locationMidRange") if dictionary.get("locationMidRange") else APIHelper.SKIP
        hemp_grower_info = HempGrowerInfo.from_dictionary(dictionary.get('hempGrowerInfo')) if 'hempGrowerInfo' in dictionary.keys() else APIHelper.SKIP 
        credit_decision_info = CreditDecisionInfo.from_dictionary(dictionary.get('creditDecisionInfo')) if 'creditDecisionInfo' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(dba_name,
                   dba_name_extended,
                   business_address,
                   legal_name,
                   legal_name_extended,
                   additional_addresses,
                   ownership_type,
                   product_description,
                   mcc_code,
                   establishment_year,
                   current_ownership_years,
                   current_ownership_months,
                   communication_language,
                   pos_language,
                   legal_name_marked,
                   registration_number,
                   tax_id,
                   tax_id_type,
                   vat_info,
                   tax_form_type,
                   tax_class_type,
                   customer_membership_number,
                   government_owned_entity,
                   store_number,
                   association_codes,
                   opt_out,
                   sign_date,
                   pci_info,
                   employer_id,
                   country_of_origin,
                   exemption_type,
                   owner_exemption_type,
                   number_of_partners,
                   relationship_mgr_code,
                   country_of_primary_operation,
                   bearer_shares,
                   legal_status,
                   verifications,
                   industry_class,
                   no_plates,
                   agent_number,
                   location_mid_range,
                   hemp_grower_info,
                   credit_decision_info)
