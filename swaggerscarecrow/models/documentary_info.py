# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.date_components import DateComponents


class DocumentaryInfo(object):

    """Implementation of the 'DocumentaryInfo' model.

    TODO: type model description here.

    Attributes:
        documentary (bool): Flag indicating if personal documentary info is to
            be provided, true if Yes, false if NO
        documentary_verifier (DocumentaryVerifierEnum): Verifier of
            documentary information
        documentary_issuer (string): Issuer of documentary information
        documentary_type (DocumentaryTypeEnum): Type of documentation
            provided
        id_number (string): Id number of documentation provided
        issue_date (DateComponents): A container that holds the date (day,
            month, and year)
        expiry_date (DateComponents): A container that holds the date (day,
            month, and year)
        issuing_state (IssuingState1Enum): State of documentation issuance
        foreign_issuing_state (string): Foreign state of documentation
            issuance, applicable if State enumeration doesn't contain choice

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "documentary": 'documentary',
        "documentary_verifier": 'documentaryVerifier',
        "documentary_issuer": 'documentaryIssuer',
        "documentary_type": 'documentaryType',
        "id_number": 'idNumber',
        "issue_date": 'issueDate',
        "expiry_date": 'expiryDate',
        "issuing_state": 'issuingState',
        "foreign_issuing_state": 'foreignIssuingState'
    }

    _optionals = [
        'documentary_verifier',
        'documentary_issuer',
        'documentary_type',
        'id_number',
        'issue_date',
        'expiry_date',
        'issuing_state',
        'foreign_issuing_state',
    ]

    def __init__(self,
                 documentary=None,
                 documentary_verifier=APIHelper.SKIP,
                 documentary_issuer=APIHelper.SKIP,
                 documentary_type=APIHelper.SKIP,
                 id_number=APIHelper.SKIP,
                 issue_date=APIHelper.SKIP,
                 expiry_date=APIHelper.SKIP,
                 issuing_state=APIHelper.SKIP,
                 foreign_issuing_state=APIHelper.SKIP):
        """Constructor for the DocumentaryInfo class"""

        # Initialize members of the class
        self.documentary = documentary 
        if documentary_verifier is not APIHelper.SKIP:
            self.documentary_verifier = documentary_verifier 
        if documentary_issuer is not APIHelper.SKIP:
            self.documentary_issuer = documentary_issuer 
        if documentary_type is not APIHelper.SKIP:
            self.documentary_type = documentary_type 
        if id_number is not APIHelper.SKIP:
            self.id_number = id_number 
        if issue_date is not APIHelper.SKIP:
            self.issue_date = issue_date 
        if expiry_date is not APIHelper.SKIP:
            self.expiry_date = expiry_date 
        if issuing_state is not APIHelper.SKIP:
            self.issuing_state = issuing_state 
        if foreign_issuing_state is not APIHelper.SKIP:
            self.foreign_issuing_state = foreign_issuing_state 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        documentary = dictionary.get("documentary") if "documentary" in dictionary.keys() else None
        documentary_verifier = dictionary.get("documentaryVerifier") if dictionary.get("documentaryVerifier") else APIHelper.SKIP
        documentary_issuer = dictionary.get("documentaryIssuer") if dictionary.get("documentaryIssuer") else APIHelper.SKIP
        documentary_type = dictionary.get("documentaryType") if dictionary.get("documentaryType") else APIHelper.SKIP
        id_number = dictionary.get("idNumber") if dictionary.get("idNumber") else APIHelper.SKIP
        issue_date = DateComponents.from_dictionary(dictionary.get('issueDate')) if 'issueDate' in dictionary.keys() else APIHelper.SKIP 
        expiry_date = DateComponents.from_dictionary(dictionary.get('expiryDate')) if 'expiryDate' in dictionary.keys() else APIHelper.SKIP 
        issuing_state = dictionary.get("issuingState") if dictionary.get("issuingState") else APIHelper.SKIP
        foreign_issuing_state = dictionary.get("foreignIssuingState") if dictionary.get("foreignIssuingState") else APIHelper.SKIP
        # Return an object of this model
        return cls(documentary,
                   documentary_verifier,
                   documentary_issuer,
                   documentary_type,
                   id_number,
                   issue_date,
                   expiry_date,
                   issuing_state,
                   foreign_issuing_state)
