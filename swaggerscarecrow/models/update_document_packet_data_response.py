# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.signer_response import SignerResponse


class UpdateDocumentPacketDataResponse(object):

    """Implementation of the 'UpdateDocumentPacketDataResponse' model.

    TODO: type model description here.

    Attributes:
        response_id (int): TODO: type description here.
        error (string): If processing error occurs, will contain information,
            else will be empty or null
        document_packet_id (string): The unique identifier for the document
            packet
        signer_responses (list of SignerResponse): The signer containing
            signer information

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "response_id": 'responseId',
        "error": 'error',
        "document_packet_id": 'documentPacketId',
        "signer_responses": 'signerResponses'
    }

    _optionals = [
        'response_id',
        'error',
        'document_packet_id',
        'signer_responses',
    ]

    def __init__(self,
                 response_id=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 document_packet_id=APIHelper.SKIP,
                 signer_responses=APIHelper.SKIP):
        """Constructor for the UpdateDocumentPacketDataResponse class"""

        # Initialize members of the class
        if response_id is not APIHelper.SKIP:
            self.response_id = response_id 
        if error is not APIHelper.SKIP:
            self.error = error 
        if document_packet_id is not APIHelper.SKIP:
            self.document_packet_id = document_packet_id 
        if signer_responses is not APIHelper.SKIP:
            self.signer_responses = signer_responses 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        response_id = dictionary.get("responseId") if dictionary.get("responseId") else APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        document_packet_id = dictionary.get("documentPacketId") if dictionary.get("documentPacketId") else APIHelper.SKIP
        signer_responses = None
        if dictionary.get('signerResponses') is not None:
            signer_responses = [SignerResponse.from_dictionary(x) for x in dictionary.get('signerResponses')]
        else:
            signer_responses = APIHelper.SKIP
        # Return an object of this model
        return cls(response_id,
                   error,
                   document_packet_id,
                   signer_responses)
