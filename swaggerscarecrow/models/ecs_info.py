# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class EcsInfo(object):

    """Implementation of the 'EcsInfo' model.

    TODO: type model description here.

    Attributes:
        processing_acceptance_type (ProcessingAcceptanceTypeEnum): ECS
            processing acceptance
        service_level_type (ServiceLevelTypeEnum): ECS service level
        annual_check_volume (float): Predicted annual check volume to be given
            though service
        average_check_amount (float): Predicted average check amount to be
            given though service
        max_check_amount (int): Max checks allowed though service
        per_transaction (float): Per transaction fee applied to service
        discount_rate (float): Fee percentage to be applied to service
        monthly_minimum (float): Per transaction fee applied to service
        per_return_fee (float): Per returns fee applied to service
        nsf_service_processing_fee (float): Processing fee for addtional NSF
            service
        nsf_service_fee (float): Up front fee for addtional NSF service
        collection (bool): Boolean indicating if ECS collection service is
            desired, true if YES, false if NO
        enquire_reporting (bool): Boolean indicating if ECS Enquire reporting
            service is desired, true if YES, false if NO
        service_provider_type (ServiceProviderTypeEnum): ECS service provider.
            If not provided, will board as ENCIRCLE DIRECT

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "processing_acceptance_type": 'processingAcceptanceType',
        "service_level_type": 'serviceLevelType',
        "annual_check_volume": 'annualCheckVolume',
        "average_check_amount": 'averageCheckAmount',
        "max_check_amount": 'maxCheckAmount',
        "per_transaction": 'perTransaction',
        "discount_rate": 'discountRate',
        "monthly_minimum": 'monthlyMinimum',
        "per_return_fee": 'perReturnFee',
        "nsf_service_processing_fee": 'nsfServiceProcessingFee',
        "nsf_service_fee": 'nsfServiceFee',
        "collection": 'collection',
        "enquire_reporting": 'enquireReporting',
        "service_provider_type": 'serviceProviderType'
    }

    _optionals = [
        'service_level_type',
        'annual_check_volume',
        'average_check_amount',
        'max_check_amount',
        'per_transaction',
        'discount_rate',
        'monthly_minimum',
        'per_return_fee',
        'nsf_service_processing_fee',
        'nsf_service_fee',
        'collection',
        'enquire_reporting',
        'service_provider_type',
    ]

    def __init__(self,
                 processing_acceptance_type=None,
                 service_level_type=APIHelper.SKIP,
                 annual_check_volume=APIHelper.SKIP,
                 average_check_amount=APIHelper.SKIP,
                 max_check_amount=APIHelper.SKIP,
                 per_transaction=APIHelper.SKIP,
                 discount_rate=APIHelper.SKIP,
                 monthly_minimum=APIHelper.SKIP,
                 per_return_fee=APIHelper.SKIP,
                 nsf_service_processing_fee=APIHelper.SKIP,
                 nsf_service_fee=APIHelper.SKIP,
                 collection=APIHelper.SKIP,
                 enquire_reporting=APIHelper.SKIP,
                 service_provider_type=APIHelper.SKIP):
        """Constructor for the EcsInfo class"""

        # Initialize members of the class
        self.processing_acceptance_type = processing_acceptance_type 
        if service_level_type is not APIHelper.SKIP:
            self.service_level_type = service_level_type 
        if annual_check_volume is not APIHelper.SKIP:
            self.annual_check_volume = annual_check_volume 
        if average_check_amount is not APIHelper.SKIP:
            self.average_check_amount = average_check_amount 
        if max_check_amount is not APIHelper.SKIP:
            self.max_check_amount = max_check_amount 
        if per_transaction is not APIHelper.SKIP:
            self.per_transaction = per_transaction 
        if discount_rate is not APIHelper.SKIP:
            self.discount_rate = discount_rate 
        if monthly_minimum is not APIHelper.SKIP:
            self.monthly_minimum = monthly_minimum 
        if per_return_fee is not APIHelper.SKIP:
            self.per_return_fee = per_return_fee 
        if nsf_service_processing_fee is not APIHelper.SKIP:
            self.nsf_service_processing_fee = nsf_service_processing_fee 
        if nsf_service_fee is not APIHelper.SKIP:
            self.nsf_service_fee = nsf_service_fee 
        if collection is not APIHelper.SKIP:
            self.collection = collection 
        if enquire_reporting is not APIHelper.SKIP:
            self.enquire_reporting = enquire_reporting 
        if service_provider_type is not APIHelper.SKIP:
            self.service_provider_type = service_provider_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        processing_acceptance_type = dictionary.get("processingAcceptanceType") if dictionary.get("processingAcceptanceType") else None
        service_level_type = dictionary.get("serviceLevelType") if dictionary.get("serviceLevelType") else APIHelper.SKIP
        annual_check_volume = dictionary.get("annualCheckVolume") if dictionary.get("annualCheckVolume") else APIHelper.SKIP
        average_check_amount = dictionary.get("averageCheckAmount") if dictionary.get("averageCheckAmount") else APIHelper.SKIP
        max_check_amount = dictionary.get("maxCheckAmount") if dictionary.get("maxCheckAmount") else APIHelper.SKIP
        per_transaction = dictionary.get("perTransaction") if dictionary.get("perTransaction") else APIHelper.SKIP
        discount_rate = dictionary.get("discountRate") if dictionary.get("discountRate") else APIHelper.SKIP
        monthly_minimum = dictionary.get("monthlyMinimum") if dictionary.get("monthlyMinimum") else APIHelper.SKIP
        per_return_fee = dictionary.get("perReturnFee") if dictionary.get("perReturnFee") else APIHelper.SKIP
        nsf_service_processing_fee = dictionary.get("nsfServiceProcessingFee") if dictionary.get("nsfServiceProcessingFee") else APIHelper.SKIP
        nsf_service_fee = dictionary.get("nsfServiceFee") if dictionary.get("nsfServiceFee") else APIHelper.SKIP
        collection = dictionary.get("collection") if "collection" in dictionary.keys() else APIHelper.SKIP
        enquire_reporting = dictionary.get("enquireReporting") if "enquireReporting" in dictionary.keys() else APIHelper.SKIP
        service_provider_type = dictionary.get("serviceProviderType") if dictionary.get("serviceProviderType") else APIHelper.SKIP
        # Return an object of this model
        return cls(processing_acceptance_type,
                   service_level_type,
                   annual_check_volume,
                   average_check_amount,
                   max_check_amount,
                   per_transaction,
                   discount_rate,
                   monthly_minimum,
                   per_return_fee,
                   nsf_service_processing_fee,
                   nsf_service_fee,
                   collection,
                   enquire_reporting,
                   service_provider_type)
