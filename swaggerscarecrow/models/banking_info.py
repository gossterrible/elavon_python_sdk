# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class BankingInfo(object):

    """Implementation of the 'BankingInfo' model.

    TODO: type model description here.

    Attributes:
        account_name (string): Account holder name, required in EU
        bank_name (string): Name of bank account is associated with
        urgent_payment (bool): [EU] Flag indicating Urgent Payments service
        funding_method (FundingMethodEnum): NETCREDIT or GROSS
        account_number (string): Account number
        sort_code (string): Account Sort Code in EU, Account ABA Routing
            Number in NA
        iban (string): [EU] Account IBAN, required in cases where Sort Code +
            Account Number not Present
        swift_code (string): [EU] SWIFT/BIC code
        bank_creditor_id (string): [EU] Bank Creditor Id
        bank_direct (bool): [EU]  Bank Direct Flag. Boolean true if yes, false
            if no
        country (string): Country of bank account, should match application's
            root country, ISO 3166-1 alpha-3 standard applies
        tape_id (string): [NA] Tape Id of account, required in NA
        true_daily (bool): [NA] True Daily Flag. Boolean true if yes, false if
            no
        use_chain_account_number (bool): Use Chain Account Number Flag,
            Boolean true if yes, false if no

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "funding_method": 'fundingMethod',
        "account_number": 'accountNumber',
        "sort_code": 'sortCode',
        "account_name": 'accountName',
        "bank_name": 'bankName',
        "urgent_payment": 'urgentPayment',
        "iban": 'iban',
        "swift_code": 'swiftCode',
        "bank_creditor_id": 'bankCreditorId',
        "bank_direct": 'bankDirect',
        "country": 'country',
        "tape_id": 'tapeId',
        "true_daily": 'trueDaily',
        "use_chain_account_number": 'useChainAccountNumber'
    }

    _optionals = [
        'account_name',
        'bank_name',
        'urgent_payment',
        'iban',
        'swift_code',
        'bank_creditor_id',
        'bank_direct',
        'country',
        'tape_id',
        'true_daily',
        'use_chain_account_number',
    ]

    def __init__(self,
                 funding_method=None,
                 account_number=None,
                 sort_code=None,
                 account_name=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 urgent_payment=APIHelper.SKIP,
                 iban=APIHelper.SKIP,
                 swift_code=APIHelper.SKIP,
                 bank_creditor_id=APIHelper.SKIP,
                 bank_direct=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 tape_id=APIHelper.SKIP,
                 true_daily=APIHelper.SKIP,
                 use_chain_account_number=APIHelper.SKIP):
        """Constructor for the BankingInfo class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if urgent_payment is not APIHelper.SKIP:
            self.urgent_payment = urgent_payment 
        self.funding_method = funding_method 
        self.account_number = account_number 
        self.sort_code = sort_code 
        if iban is not APIHelper.SKIP:
            self.iban = iban 
        if swift_code is not APIHelper.SKIP:
            self.swift_code = swift_code 
        if bank_creditor_id is not APIHelper.SKIP:
            self.bank_creditor_id = bank_creditor_id 
        if bank_direct is not APIHelper.SKIP:
            self.bank_direct = bank_direct 
        if country is not APIHelper.SKIP:
            self.country = country 
        if tape_id is not APIHelper.SKIP:
            self.tape_id = tape_id 
        if true_daily is not APIHelper.SKIP:
            self.true_daily = true_daily 
        if use_chain_account_number is not APIHelper.SKIP:
            self.use_chain_account_number = use_chain_account_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        funding_method = dictionary.get("fundingMethod") if dictionary.get("fundingMethod") else None
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else None
        sort_code = dictionary.get("sortCode") if dictionary.get("sortCode") else None
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        bank_name = dictionary.get("bankName") if dictionary.get("bankName") else APIHelper.SKIP
        urgent_payment = dictionary.get("urgentPayment") if "urgentPayment" in dictionary.keys() else APIHelper.SKIP
        iban = dictionary.get("iban") if dictionary.get("iban") else APIHelper.SKIP
        swift_code = dictionary.get("swiftCode") if dictionary.get("swiftCode") else APIHelper.SKIP
        bank_creditor_id = dictionary.get("bankCreditorId") if dictionary.get("bankCreditorId") else APIHelper.SKIP
        bank_direct = dictionary.get("bankDirect") if "bankDirect" in dictionary.keys() else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        tape_id = dictionary.get("tapeId") if dictionary.get("tapeId") else APIHelper.SKIP
        true_daily = dictionary.get("trueDaily") if "trueDaily" in dictionary.keys() else APIHelper.SKIP
        use_chain_account_number = dictionary.get("useChainAccountNumber") if "useChainAccountNumber" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(funding_method,
                   account_number,
                   sort_code,
                   account_name,
                   bank_name,
                   urgent_payment,
                   iban,
                   swift_code,
                   bank_creditor_id,
                   bank_direct,
                   country,
                   tape_id,
                   true_daily,
                   use_chain_account_number)
