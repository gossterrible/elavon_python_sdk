# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.quiz_question import QuizQuestion


class GetQuizResponse(object):

    """Implementation of the 'GetQuizResponse' model.

    TODO: type model description here.

    Attributes:
        response_id (int): TODO: type description here.
        quiz_initial_response_type (QuizInitialResponseTypeEnum): Status of
            quiz response
        transaction_key (string): Unique identifier of quiz response, to be
            used in anser request quiz if successful response is given
        quiz_id (int): Unique identifier of quiz, to be used in answer request
            quiz if successful response is given
        quiz_questions (list of QuizQuestion): Quiz questions, given if
            request was successful
        error (string): Error message from service

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "response_id": 'responseId',
        "quiz_initial_response_type": 'quizInitialResponseType',
        "transaction_key": 'transactionKey',
        "quiz_id": 'quizId',
        "quiz_questions": 'quizQuestions',
        "error": 'error'
    }

    _optionals = [
        'response_id',
        'quiz_initial_response_type',
        'transaction_key',
        'quiz_id',
        'quiz_questions',
        'error',
    ]

    def __init__(self,
                 response_id=APIHelper.SKIP,
                 quiz_initial_response_type=APIHelper.SKIP,
                 transaction_key=APIHelper.SKIP,
                 quiz_id=APIHelper.SKIP,
                 quiz_questions=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the GetQuizResponse class"""

        # Initialize members of the class
        if response_id is not APIHelper.SKIP:
            self.response_id = response_id 
        if quiz_initial_response_type is not APIHelper.SKIP:
            self.quiz_initial_response_type = quiz_initial_response_type 
        if transaction_key is not APIHelper.SKIP:
            self.transaction_key = transaction_key 
        if quiz_id is not APIHelper.SKIP:
            self.quiz_id = quiz_id 
        if quiz_questions is not APIHelper.SKIP:
            self.quiz_questions = quiz_questions 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        response_id = dictionary.get("responseId") if dictionary.get("responseId") else APIHelper.SKIP
        quiz_initial_response_type = dictionary.get("quizInitialResponseType") if dictionary.get("quizInitialResponseType") else APIHelper.SKIP
        transaction_key = dictionary.get("transactionKey") if dictionary.get("transactionKey") else APIHelper.SKIP
        quiz_id = dictionary.get("quizId") if dictionary.get("quizId") else APIHelper.SKIP
        quiz_questions = None
        if dictionary.get('quizQuestions') is not None:
            quiz_questions = [QuizQuestion.from_dictionary(x) for x in dictionary.get('quizQuestions')]
        else:
            quiz_questions = APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        # Return an object of this model
        return cls(response_id,
                   quiz_initial_response_type,
                   transaction_key,
                   quiz_id,
                   quiz_questions,
                   error)
