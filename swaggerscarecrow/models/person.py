# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.models.alternate_address_info import AlternateAddressInfo
from swaggerscarecrow.models.contact_info import ContactInfo
from swaggerscarecrow.models.date_components import DateComponents
from swaggerscarecrow.models.documentary_info import DocumentaryInfo
from swaggerscarecrow.models.identification import Identification
from swaggerscarecrow.models.name import Name


class Person(object):

    """Implementation of the 'Person' model.

    TODO: type model description here.

    Attributes:
        name (Name): TODO: type description here.
        contact_info (ContactInfo): TODO: type description here.
        dob (DateComponents): A container that holds the date (day, month, and
            year)
        positions (dict): Boolean map representing positions of person, if
            position applies true should be value given for position key. The
            valid keys are as follows: OFFICER, PARTNER, DIRECTOR, OWNER,
            SECRETARY, OTHER, BENEFICIAL_OWNER, AUTHORIZED_SIGNER, SOLE_PROP
        ownership_pct (string): Ownership percentage of person
        ids (list of Identification): Id listing of person
        title_type (TitleTypeEnum): [NA] Title type of person
        title (string): Free text of person's title, should title type not
            provide correct option (NA OTHER)
        signing_personal_guarantee (bool): [NA] Flag indicating if person is
            signing personal gurantee, true if YES, false if NO
        responsible_party (bool): Flag indicating if person is a responsible
            party of the business, true if YES, false if NO
        related_party (bool): Flag indicating if person is a related party of
            the business, true if YES, false if NO
        residing_country (string): Current country of residence of person, ISO
            3166-1 alpha-3 standard applies
        primary_nationality (string): Primary citizenship/nationality of
            person, ISO 3166-1 alpha-3 standard applies
        secondary_nationality (string): Secondary citizenship/nationality of
            person, ISO 3166-1 alpha-3 standard applies
        documentary_info (DocumentaryInfo): TODO: type description here.
        alternate_address_info (AlternateAddressInfo): Used to hold
            information about an alternative business address
        is_new_owner (bool): [EU] Flag indicating if person is a new owner of
            the buisness, true if YES, false if NO
        directional_ownership_type (DirectionalOwnershipTypeEnum): [EU]
            Indicator if person has direct or indirect ownership of business
        signing_agreement (bool): Flag indicating if person if signing the
            agreement, true if YES, false if NO
        us_person (bool): [NA] Flag indicating if person is a US citizen, true
            if YES, false if NO

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "positions": 'positions',
        "contact_info": 'contactInfo',
        "dob": 'dob',
        "ownership_pct": 'ownershipPct',
        "ids": 'ids',
        "title_type": 'titleType',
        "title": 'title',
        "signing_personal_guarantee": 'signingPersonalGuarantee',
        "responsible_party": 'responsibleParty',
        "related_party": 'relatedParty',
        "residing_country": 'residingCountry',
        "primary_nationality": 'primaryNationality',
        "secondary_nationality": 'secondaryNationality',
        "documentary_info": 'documentaryInfo',
        "alternate_address_info": 'alternateAddressInfo',
        "is_new_owner": 'isNewOwner',
        "directional_ownership_type": 'directionalOwnershipType',
        "signing_agreement": 'signingAgreement',
        "us_person": 'usPerson'
    }

    _optionals = [
        'contact_info',
        'dob',
        'ownership_pct',
        'ids',
        'title_type',
        'title',
        'signing_personal_guarantee',
        'responsible_party',
        'related_party',
        'residing_country',
        'primary_nationality',
        'secondary_nationality',
        'documentary_info',
        'alternate_address_info',
        'is_new_owner',
        'directional_ownership_type',
        'signing_agreement',
        'us_person',
    ]

    def __init__(self,
                 name=None,
                 positions=None,
                 contact_info=APIHelper.SKIP,
                 dob=APIHelper.SKIP,
                 ownership_pct=APIHelper.SKIP,
                 ids=APIHelper.SKIP,
                 title_type=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 signing_personal_guarantee=APIHelper.SKIP,
                 responsible_party=APIHelper.SKIP,
                 related_party=APIHelper.SKIP,
                 residing_country=APIHelper.SKIP,
                 primary_nationality=APIHelper.SKIP,
                 secondary_nationality=APIHelper.SKIP,
                 documentary_info=APIHelper.SKIP,
                 alternate_address_info=APIHelper.SKIP,
                 is_new_owner=APIHelper.SKIP,
                 directional_ownership_type=APIHelper.SKIP,
                 signing_agreement=APIHelper.SKIP,
                 us_person=APIHelper.SKIP):
        """Constructor for the Person class"""

        # Initialize members of the class
        self.name = name 
        if contact_info is not APIHelper.SKIP:
            self.contact_info = contact_info 
        if dob is not APIHelper.SKIP:
            self.dob = dob 
        self.positions = positions 
        if ownership_pct is not APIHelper.SKIP:
            self.ownership_pct = ownership_pct 
        if ids is not APIHelper.SKIP:
            self.ids = ids 
        if title_type is not APIHelper.SKIP:
            self.title_type = title_type 
        if title is not APIHelper.SKIP:
            self.title = title 
        if signing_personal_guarantee is not APIHelper.SKIP:
            self.signing_personal_guarantee = signing_personal_guarantee 
        if responsible_party is not APIHelper.SKIP:
            self.responsible_party = responsible_party 
        if related_party is not APIHelper.SKIP:
            self.related_party = related_party 
        if residing_country is not APIHelper.SKIP:
            self.residing_country = residing_country 
        if primary_nationality is not APIHelper.SKIP:
            self.primary_nationality = primary_nationality 
        if secondary_nationality is not APIHelper.SKIP:
            self.secondary_nationality = secondary_nationality 
        if documentary_info is not APIHelper.SKIP:
            self.documentary_info = documentary_info 
        if alternate_address_info is not APIHelper.SKIP:
            self.alternate_address_info = alternate_address_info 
        if is_new_owner is not APIHelper.SKIP:
            self.is_new_owner = is_new_owner 
        if directional_ownership_type is not APIHelper.SKIP:
            self.directional_ownership_type = directional_ownership_type 
        if signing_agreement is not APIHelper.SKIP:
            self.signing_agreement = signing_agreement 
        if us_person is not APIHelper.SKIP:
            self.us_person = us_person 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        positions = dictionary.get("positions") if "positions" in dictionary.keys() else None
        contact_info = ContactInfo.from_dictionary(dictionary.get('contactInfo')) if 'contactInfo' in dictionary.keys() else APIHelper.SKIP 
        dob = DateComponents.from_dictionary(dictionary.get('dob')) if 'dob' in dictionary.keys() else APIHelper.SKIP 
        ownership_pct = dictionary.get("ownershipPct") if dictionary.get("ownershipPct") else APIHelper.SKIP
        ids = None
        if dictionary.get('ids') is not None:
            ids = [Identification.from_dictionary(x) for x in dictionary.get('ids')]
        else:
            ids = APIHelper.SKIP
        title_type = dictionary.get("titleType") if dictionary.get("titleType") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        signing_personal_guarantee = dictionary.get("signingPersonalGuarantee") if "signingPersonalGuarantee" in dictionary.keys() else APIHelper.SKIP
        responsible_party = dictionary.get("responsibleParty") if "responsibleParty" in dictionary.keys() else APIHelper.SKIP
        related_party = dictionary.get("relatedParty") if "relatedParty" in dictionary.keys() else APIHelper.SKIP
        residing_country = dictionary.get("residingCountry") if dictionary.get("residingCountry") else APIHelper.SKIP
        primary_nationality = dictionary.get("primaryNationality") if dictionary.get("primaryNationality") else APIHelper.SKIP
        secondary_nationality = dictionary.get("secondaryNationality") if dictionary.get("secondaryNationality") else APIHelper.SKIP
        documentary_info = DocumentaryInfo.from_dictionary(dictionary.get('documentaryInfo')) if 'documentaryInfo' in dictionary.keys() else APIHelper.SKIP 
        alternate_address_info = AlternateAddressInfo.from_dictionary(dictionary.get('alternateAddressInfo')) if 'alternateAddressInfo' in dictionary.keys() else APIHelper.SKIP 
        is_new_owner = dictionary.get("isNewOwner") if "isNewOwner" in dictionary.keys() else APIHelper.SKIP
        directional_ownership_type = dictionary.get("directionalOwnershipType") if dictionary.get("directionalOwnershipType") else APIHelper.SKIP
        signing_agreement = dictionary.get("signingAgreement") if "signingAgreement" in dictionary.keys() else APIHelper.SKIP
        us_person = dictionary.get("usPerson") if "usPerson" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   positions,
                   contact_info,
                   dob,
                   ownership_pct,
                   ids,
                   title_type,
                   title,
                   signing_personal_guarantee,
                   responsible_party,
                   related_party,
                   residing_country,
                   primary_nationality,
                   secondary_nationality,
                   documentary_info,
                   alternate_address_info,
                   is_new_owner,
                   directional_ownership_type,
                   signing_agreement,
                   us_person)
