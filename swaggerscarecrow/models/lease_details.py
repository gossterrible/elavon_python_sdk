# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class LeaseDetails(object):

    """Implementation of the 'LeaseDetails' model.

    TODO: type model description here.

    Attributes:
        alternate_price (float): TODO: type description here.
        pricing_plan (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alternate_price": 'alternatePrice',
        "pricing_plan": 'pricingPlan'
    }

    _optionals = [
        'alternate_price',
        'pricing_plan',
    ]

    def __init__(self,
                 alternate_price=APIHelper.SKIP,
                 pricing_plan=APIHelper.SKIP):
        """Constructor for the LeaseDetails class"""

        # Initialize members of the class
        if alternate_price is not APIHelper.SKIP:
            self.alternate_price = alternate_price 
        if pricing_plan is not APIHelper.SKIP:
            self.pricing_plan = pricing_plan 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        alternate_price = dictionary.get("alternatePrice") if dictionary.get("alternatePrice") else APIHelper.SKIP
        pricing_plan = dictionary.get("pricingPlan") if dictionary.get("pricingPlan") else APIHelper.SKIP
        # Return an object of this model
        return cls(alternate_price,
                   pricing_plan)
