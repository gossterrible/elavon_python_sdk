# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.models.document_packet_data import DocumentPacketData
from swaggerscarecrow.models.signer import Signer


class CreateDocumentPacketRequest(object):

    """Implementation of the 'CreateDocumentPacketRequest' model.

    TODO: type model description here.

    Attributes:
        profile_code (string): The partner's profile code
        signers (list of Signer): The document signers
        document_packet_data (DocumentPacketData): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "profile_code": 'profileCode',
        "signers": 'signers',
        "document_packet_data": 'documentPacketData'
    }

    def __init__(self,
                 profile_code=None,
                 signers=None,
                 document_packet_data=None):
        """Constructor for the CreateDocumentPacketRequest class"""

        # Initialize members of the class
        self.profile_code = profile_code 
        self.signers = signers 
        self.document_packet_data = document_packet_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        profile_code = dictionary.get("profileCode") if dictionary.get("profileCode") else None
        signers = None
        if dictionary.get('signers') is not None:
            signers = [Signer.from_dictionary(x) for x in dictionary.get('signers')]
        document_packet_data = DocumentPacketData.from_dictionary(dictionary.get('documentPacketData')) if dictionary.get('documentPacketData') else None
        # Return an object of this model
        return cls(profile_code,
                   signers,
                   document_packet_data)
