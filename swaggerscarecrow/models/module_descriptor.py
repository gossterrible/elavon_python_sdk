# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerscarecrow.api_helper import APIHelper


class ModuleDescriptor(object):

    """Implementation of the 'ModuleDescriptor' model.

    TODO: type model description here.

    Attributes:
        open (bool): TODO: type description here.
        automatic (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open": 'open',
        "automatic": 'automatic'
    }

    _optionals = [
        'open',
        'automatic',
    ]

    def __init__(self,
                 open=APIHelper.SKIP,
                 automatic=APIHelper.SKIP):
        """Constructor for the ModuleDescriptor class"""

        # Initialize members of the class
        if open is not APIHelper.SKIP:
            self.open = open 
        if automatic is not APIHelper.SKIP:
            self.automatic = automatic 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        open = dictionary.get("open") if "open" in dictionary.keys() else APIHelper.SKIP
        automatic = dictionary.get("automatic") if "automatic" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(open,
                   automatic)
