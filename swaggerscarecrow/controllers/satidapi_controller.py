# -*- coding: utf-8 -*-

"""
swaggerscarecrow

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerscarecrow.api_helper import APIHelper
from swaggerscarecrow.configuration import Server
from swaggerscarecrow.controllers.base_controller import BaseController
from swaggerscarecrow.models.upload_document_response import UploadDocumentResponse
from swaggerscarecrow.models.boarding_response import BoardingResponse
from swaggerscarecrow.models.validate_zip_code_request import ValidateZipCodeRequest
from swaggerscarecrow.models.verify_bank_account_response import VerifyBankAccountResponse
from swaggerscarecrow.models.refersh_signer_user_sessions_response import RefershSignerUserSessionsResponse
from swaggerscarecrow.models.response import Response
from swaggerscarecrow.models.list_documents_response import ListDocumentsResponse
from swaggerscarecrow.models.get_documents_response import GetDocumentsResponse
from swaggerscarecrow.models.generate_packet_documents_response import GeneratePacketDocumentsResponse
from swaggerscarecrow.models.get_quiz_response import GetQuizResponse
from swaggerscarecrow.models.answer_quiz_response import AnswerQuizResponse
from swaggerscarecrow.models.boarding_status_response import BoardingStatusResponse
from swaggerscarecrow.models.get_terminal_ids_response import GetTerminalIdsResponse
from swaggerscarecrow.models.create_group_document_packet_response import CreateGroupDocumentPacketResponse
from swaggerscarecrow.models.append_group_document_packet_response import AppendGroupDocumentPacketResponse
from swaggerscarecrow.models.create_document_packet_response import CreateDocumentPacketResponse
from swaggerscarecrow.models.credit_check_response import CreditCheckResponse
from swaggerscarecrow.models.update_document_packet_data_response import UpdateDocumentPacketDataResponse
from swaggerscarecrow.models.check_document_signing_status_response import CheckDocumentSigningStatusResponse
from swaggerscarecrow.models.delete_document_packet_response import DeleteDocumentPacketResponse
from swaggerscarecrow.models.delete_group_document_packet_response import DeleteGroupDocumentPacketResponse
from swaggerscarecrow.models.update_document_packet_response import UpdateDocumentPacketResponse
from swaggerscarecrow.models.execute_group_document_packet_response import ExecuteGroupDocumentPacketResponse
from swaggerscarecrow.models.get_document_response import GetDocumentResponse
from swaggerscarecrow.exceptions.api_exception import APIException


class SATIDAPIController(BaseController):

    """A Controller to access Endpoints in the swaggerscarecrow API."""
    def __init__(self, config, auth_managers):
        super(SATIDAPIController, self).__init__(config, auth_managers)

    def upload_documents(self,
                         version_number,
                         body):
        """Does a POST request to /v{versionNumber}/uploadDocuments.

        Upload Documents

        Args:
            version_number (int): TODO: type description here.
            body (UploadDocumentsRequestParams): TODO: type description here.

        Returns:
            UploadDocumentResponse: Response from the API. Standard Upload
                Document Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/uploadDocuments'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, UploadDocumentResponse.from_dictionary)

        return decoded

    def board(self,
              version_number,
              body):
        """Does a POST request to /v{versionNumber}/board.

        Boarding

        Args:
            version_number (int): TODO: type description here.
            body (BoardingRequestParams): TODO: type description here.

        Returns:
            BoardingResponse: Response from the API. Standard Boarding
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/board'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BoardingResponse.from_dictionary)

        return decoded

    def postal_validate(self,
                        version_number,
                        body):
        """Does a POST request to /v{versionNumber}/postal.

        Validate Postal Code

        Args:
            version_number (int): TODO: type description here.
            body (ValidateZipCodeRequest): TODO: type description here.

        Returns:
            ValidateZipCodeRequest: Response from the API. Standard Validate
                ZipCode Request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/postal'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ValidateZipCodeRequest.from_dictionary)

        return decoded

    def bank_validate(self,
                      version_number,
                      body):
        """Does a POST request to /v{versionNumber}/bank.

        Validate Bank Account

        Args:
            version_number (int): TODO: type description here.
            body (BankingInfo): TODO: type description here.

        Returns:
            VerifyBankAccountResponse: Response from the API. Standard Verify
                Bank Account Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/bank'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerifyBankAccountResponse.from_dictionary)

        return decoded

    def refresh_signer_user_sessions(self,
                                     body):
        """Does a POST request to /refreshsignerusersessions.

        Refresh the session for signers of a document packet

        Args:
            body (RefreshSignerUsersSessionsRequest): TODO: type description
                here.

        Returns:
            RefershSignerUserSessionsResponse: Response from the API. List of
                signer who's session was updated

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/refreshsignerusersessions'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RefershSignerUserSessionsResponse.from_dictionary)

        return decoded

    def regenerate_packet_documents(self,
                                    body):
        """Does a POST request to /regeneratesignedpacket.

        Regenerate signed Packet Content in event of failure

        Args:
            body (RegenerateDocumentPacketRequest): TODO: type description
                here.

        Returns:
            Response: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/regeneratesignedpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Response.from_dictionary)

        return decoded

    def list_packet_presented_documents(self,
                                        body):
        """Does a POST request to /listpacketdocuments.

        List Packet Documents to present to the user

        Args:
            body (ListPacketDocumentsRequest): TODO: type description here.

        Returns:
            ListDocumentsResponse: Response from the API. Standard List 
                Packet Presented Documents Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/listpacketdocuments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ListDocumentsResponse.from_dictionary)

        return decoded

    def get_signed_document_packet_content(self,
                                           body):
        """Does a POST request to /getsignedpacket.

        Get signed document packet content

        Args:
            body (GetSignedDocumentPacketRequest): TODO: type description
                here.

        Returns:
            GetDocumentsResponse: Response from the API. Standard Get Unsiged
                Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/getsignedpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetDocumentsResponse.from_dictionary)

        return decoded

    def generate_packet_documents(self,
                                  body):
        """Does a POST request to /generatepacketdocuments.

        Trigger generation of document in packet for submission

        Args:
            body (GeneratePacketDocumentsRequest): TODO: type description
                here.

        Returns:
            GeneratePacketDocumentsResponse: Response from the API. Standard
                Generate Packet Documents Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/generatepacketdocuments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GeneratePacketDocumentsResponse.from_dictionary)

        return decoded

    def board_xsd_schema(self,
                         version_number,
                         iso_3_country):
        """Does a GET request to /v{versionNumber}/{iso3Country}/board/schema.xsd.

        Get Boarding Schema

        Args:
            version_number (int): TODO: type description here.
            iso_3_country (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/{iso3Country}/board/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True},
            'iso3Country': {'value': iso_3_country, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def credit_check_xsd_schema(self,
                                version_number,
                                iso_3_country):
        """Does a GET request to /v{versionNumber}/{iso3Country}/creditcheck/schema.xsd.

        Get Credit Check Schema

        Args:
            version_number (int): TODO: type description here.
            iso_3_country (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/{iso3Country}/creditcheck/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True},
            'iso3Country': {'value': iso_3_country, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def board_status_xsd_schema(self,
                                version_number):
        """Does a GET request to /v{versionNumber}/boardstatus/schema.xsd.

        Get Boarding Status Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/boardstatus/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def upload_document_xsd_schema(self,
                                   version_number):
        """Does a GET request to /v{versionNumber}/uploadDocuments/schema.xsd.

        Get Upload Documents Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/uploadDocuments/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def post_code_xsd_schema(self,
                             version_number):
        """Does a GET request to /v{versionNumber}/postal/schema.xsd.

        Get Postal Code Validation Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/postal/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def bank_xsd_schema(self,
                        version_number):
        """Does a GET request to /v{versionNumber}/bank/schema.xsd.

        Get Bank Account Validation Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/bank/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def get_quiz_xsd_schema(self,
                            version_number):
        """Does a GET request to /v{versionNumber}/getquiz/schema.xsd.

        Get Quiz Request Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/getquiz/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def answer_quiz_xsd_schema(self,
                               version_number):
        """Does a GET request to /v{versionNumber}/answerquiz/schema.xsd.

        Get Quiz Answer Schema

        Args:
            version_number (int): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/answerquiz/schema.xsd'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 0:
            raise APIException('successful operation', _response)
        self.validate_response(_response)

    def get_quiz(self,
                 version_number,
                 body):
        """Does a POST request to /v{versionNumber}/getquiz.

        Request KYC Quiz

        Args:
            version_number (int): TODO: type description here.
            body (GetQuizRequest): TODO: type description here.

        Returns:
            GetQuizResponse: Response from the API. Standard Get Quiz
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/getquiz'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetQuizResponse.from_dictionary)

        return decoded

    def answer_quiz(self,
                    version_number,
                    body):
        """Does a POST request to /v{versionNumber}/answerquiz.

        Answer KYC Quiz

        Args:
            version_number (int): TODO: type description here.
            body (AnswerQuizRequest): TODO: type description here.

        Returns:
            AnswerQuizResponse: Response from the API. Standard Answer Quiz
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/answerquiz'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AnswerQuizResponse.from_dictionary)

        return decoded

    def list_presented_documents(self,
                                 body):
        """Does a POST request to /listdocuments.

        List Documents to present to the user

        Args:
            body (ListDocumentsRequest): TODO: type description here.

        Returns:
            ListDocumentsResponse: Response from the API. Standard List
                Presented Documents Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/listdocuments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ListDocumentsResponse.from_dictionary)

        return decoded

    def get_presented_documents(self,
                                body):
        """Does a POST request to /getdocuments.

        Get all documents to present to the user

        Args:
            body (GetDocumentsRequest): TODO: type description here.

        Returns:
            GetDocumentsResponse: Response from the API. Standard Get
                Presented Documents Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/getdocuments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetDocumentsResponse.from_dictionary)

        return decoded

    def board_status(self,
                     version_number,
                     body):
        """Does a POST request to /v{versionNumber}/boardstatus.

        Boarding Status

        Args:
            version_number (int): TODO: type description here.
            body (BoardingStatusRequestParams): TODO: type description here.

        Returns:
            BoardingStatusResponse: Response from the API. Standard Boarding
                Status Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/boardstatus'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BoardingStatusResponse.from_dictionary)

        return decoded

    def get_terminal_ids(self,
                         body):
        """Does a POST request to /getterminalids.

        Get terminal ids and related information for MID

        Args:
            body (GetTerminalIdsRequest): TODO: type description here.

        Returns:
            GetTerminalIdsResponse: Response from the API. Standard Get
                Terminal Ids

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/getterminalids'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetTerminalIdsResponse.from_dictionary)

        return decoded

    def create_group_document_packet(self,
                                     body):
        """Does a POST request to /creategroupdocumentpacket.

        Create Group Document Packet

        Args:
            body (CreateGroupDocumentPacketRequest): TODO: type description
                here.

        Returns:
            CreateGroupDocumentPacketResponse: Response from the API. Standard
                Create Group Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/creategroupdocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateGroupDocumentPacketResponse.from_dictionary)

        return decoded

    def append_group_document_packet(self,
                                     body):
        """Does a POST request to /appendgroupdocumentpacket.

        Append to Group Document Packet

        Args:
            body (AppendGroupDocumentPacketRequest): TODO: type description
                here.

        Returns:
            AppendGroupDocumentPacketResponse: Response from the API. Standard
                Append Group Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/appendgroupdocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AppendGroupDocumentPacketResponse.from_dictionary)

        return decoded

    def create_document_packet(self,
                               body):
        """Does a POST request to /createdocumentpacket.

        Create a document packet

        Args:
            body (CreateDocumentPacketRequest): TODO: type description here.

        Returns:
            CreateDocumentPacketResponse: Response from the API. Standard
                Create Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/createdocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateDocumentPacketResponse.from_dictionary)

        return decoded

    def credit_check(self,
                     version_number,
                     body):
        """Does a POST request to /v{versionNumber}/creditcheck.

        Credit Check

        Args:
            version_number (int): TODO: type description here.
            body (ScarecrowApplication): TODO: type description here.

        Returns:
            CreditCheckResponse: Response from the API. Standard Credit Check
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v{versionNumber}/creditcheck'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'versionNumber': {'value': version_number, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreditCheckResponse.from_dictionary)

        return decoded

    def update_document_packet_data(self,
                                    body):
        """Does a POST request to /updatedocumentpacketdata.

        Update document packet

        Args:
            body (UpdateDocumentPacketDataRequest): TODO: type description
                here.

        Returns:
            UpdateDocumentPacketDataResponse: Response from the API. Standard
                Update Document Packet Data Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/updatedocumentpacketdata'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, UpdateDocumentPacketDataResponse.from_dictionary)

        return decoded

    def check_document_signing_status(self,
                                      body):
        """Does a POST request to /checkdocumentsignerstatus.

        Check the signing status of one or more signer of a packet

        Args:
            body (CheckDocumentSigningStatusRequest): TODO: type description
                here.

        Returns:
            CheckDocumentSigningStatusResponse: Response from the API.
                Standard Check Document Signing Status Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/checkdocumentsignerstatus'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CheckDocumentSigningStatusResponse.from_dictionary)

        return decoded

    def delete_document_packet(self,
                               body):
        """Does a POST request to /deletedocumentpacket.

        Delete a Document Packet

        Args:
            body (DeleteDocumentPacketRequest): TODO: type description here.

        Returns:
            DeleteDocumentPacketResponse: Response from the API. Standard
                Delete a Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/deletedocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, DeleteDocumentPacketResponse.from_dictionary)

        return decoded

    def delete_group_document_packet(self,
                                     body):
        """Does a POST request to /deletegroupdocumentpacket.

        Delete Group Document Packet

        Args:
            body (DeleteGroupDocumentPacketRequest): TODO: type description
                here.

        Returns:
            DeleteGroupDocumentPacketResponse: Response from the API. Standard
                Delete Group DocumentPacket

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/deletegroupdocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, DeleteGroupDocumentPacketResponse.from_dictionary)

        return decoded

    def update_document_packet(self,
                               body):
        """Does a POST request to /updatedocumentpacket.

        Update Document Packet

        Args:
            body (UpdateDocumentPacketRequest): TODO: type description here.

        Returns:
            UpdateDocumentPacketResponse: Response from the API. Standard
                Update Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/updatedocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, UpdateDocumentPacketResponse.from_dictionary)

        return decoded

    def execute_group_document_packet(self,
                                      body):
        """Does a POST request to /executegroupdocumentpacket.

        Execute Document Packet

        Args:
            body (ExecuteGroupDocumentPacketRequest): TODO: type description
                here.

        Returns:
            ExecuteGroupDocumentPacketResponse: Response from the API.
                Standard Execute Group Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/executegroupdocumentpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ExecuteGroupDocumentPacketResponse.from_dictionary)

        return decoded

    def get_unsigned_document_content(self,
                                      body):
        """Does a POST request to /getunsigneddocument.

        Get unsigned document packet singular document

        Args:
            body (GetUnsignedDocumentRequest): TODO: type description here.

        Returns:
            GetDocumentResponse: Response from the API. Standard Get Unsiged
                Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/getunsigneddocument'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetDocumentResponse.from_dictionary)

        return decoded

    def get_unsigned_documents_packet_content(self,
                                              body):
        """Does a POST request to /getunsignedpacket.

        Get unsigned document packet full content

        Args:
            body (GetUnsignedDocumentsPacketRequest): TODO: type description
                here.

        Returns:
            GetDocumentsResponse: Response from the API. Standard Get Unsiged
                Document Packet Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/getunsignedpacket'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'basicAuth')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Unauthorized', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetDocumentsResponse.from_dictionary)

        return decoded
