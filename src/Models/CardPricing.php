<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class CardPricing implements \JsonSerializable
{
    /**
     * @var string
     */
    private $pricingMethod;

    /**
     * @var string
     */
    private $pricingCategory;

    /**
     * @var AmexAcceptingInfo|null
     */
    private $amexAcceptingInfo;

    /**
     * @var PaymentFacilitatorInfo|null
     */
    private $paymentFacilitatorInfo;

    /**
     * @var CardCharge[]
     */
    private $cardCharges;

    /**
     * @var ExceptionCharge[]|null
     */
    private $exceptionCharges;

    /**
     * @var DebitPricing|null
     */
    private $debitPricing;

    /**
     * @param string $pricingMethod
     * @param string $pricingCategory
     * @param CardCharge[] $cardCharges
     */
    public function __construct(string $pricingMethod, string $pricingCategory, array $cardCharges)
    {
        $this->pricingMethod = $pricingMethod;
        $this->pricingCategory = $pricingCategory;
        $this->cardCharges = $cardCharges;
    }

    /**
     * Returns Pricing Method.
     * Method of card pricing to be applied
     */
    public function getPricingMethod(): string
    {
        return $this->pricingMethod;
    }

    /**
     * Sets Pricing Method.
     * Method of card pricing to be applied
     *
     * @required
     * @maps pricingMethod
     * @factory \SwaggerScarecrowLib\Models\PricingMethodEnum::checkValue
     */
    public function setPricingMethod(string $pricingMethod): void
    {
        $this->pricingMethod = $pricingMethod;
    }

    /**
     * Returns Pricing Category.
     * Business card pricing category
     */
    public function getPricingCategory(): string
    {
        return $this->pricingCategory;
    }

    /**
     * Sets Pricing Category.
     * Business card pricing category
     *
     * @required
     * @maps pricingCategory
     * @factory \SwaggerScarecrowLib\Models\PricingCategoryEnum::checkValue
     */
    public function setPricingCategory(string $pricingCategory): void
    {
        $this->pricingCategory = $pricingCategory;
    }

    /**
     * Returns Amex Accepting Info.
     */
    public function getAmexAcceptingInfo(): ?AmexAcceptingInfo
    {
        return $this->amexAcceptingInfo;
    }

    /**
     * Sets Amex Accepting Info.
     *
     * @maps amexAcceptingInfo
     */
    public function setAmexAcceptingInfo(?AmexAcceptingInfo $amexAcceptingInfo): void
    {
        $this->amexAcceptingInfo = $amexAcceptingInfo;
    }

    /**
     * Returns Payment Facilitator Info.
     */
    public function getPaymentFacilitatorInfo(): ?PaymentFacilitatorInfo
    {
        return $this->paymentFacilitatorInfo;
    }

    /**
     * Sets Payment Facilitator Info.
     *
     * @maps paymentFacilitatorInfo
     */
    public function setPaymentFacilitatorInfo(?PaymentFacilitatorInfo $paymentFacilitatorInfo): void
    {
        $this->paymentFacilitatorInfo = $paymentFacilitatorInfo;
    }

    /**
     * Returns Card Charges.
     * Card charge listing
     *
     * @return CardCharge[]
     */
    public function getCardCharges(): array
    {
        return $this->cardCharges;
    }

    /**
     * Sets Card Charges.
     * Card charge listing
     *
     * @required
     * @maps cardCharges
     *
     * @param CardCharge[] $cardCharges
     */
    public function setCardCharges(array $cardCharges): void
    {
        $this->cardCharges = $cardCharges;
    }

    /**
     * Returns Exception Charges.
     * [EU] Card exception charge listing
     *
     * @return ExceptionCharge[]|null
     */
    public function getExceptionCharges(): ?array
    {
        return $this->exceptionCharges;
    }

    /**
     * Sets Exception Charges.
     * [EU] Card exception charge listing
     *
     * @maps exceptionCharges
     *
     * @param ExceptionCharge[]|null $exceptionCharges
     */
    public function setExceptionCharges(?array $exceptionCharges): void
    {
        $this->exceptionCharges = $exceptionCharges;
    }

    /**
     * Returns Debit Pricing.
     */
    public function getDebitPricing(): ?DebitPricing
    {
        return $this->debitPricing;
    }

    /**
     * Sets Debit Pricing.
     *
     * @maps debitPricing
     */
    public function setDebitPricing(?DebitPricing $debitPricing): void
    {
        $this->debitPricing = $debitPricing;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['pricingMethod']              = PricingMethodEnum::checkValue($this->pricingMethod);
        $json['pricingCategory']            = PricingCategoryEnum::checkValue($this->pricingCategory);
        if (isset($this->amexAcceptingInfo)) {
            $json['amexAcceptingInfo']      = $this->amexAcceptingInfo;
        }
        if (isset($this->paymentFacilitatorInfo)) {
            $json['paymentFacilitatorInfo'] = $this->paymentFacilitatorInfo;
        }
        $json['cardCharges']                = $this->cardCharges;
        if (isset($this->exceptionCharges)) {
            $json['exceptionCharges']       = $this->exceptionCharges;
        }
        if (isset($this->debitPricing)) {
            $json['debitPricing']           = $this->debitPricing;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
