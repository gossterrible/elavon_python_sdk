<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class VerificationInfo implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $documentary;

    /**
     * @var string|null
     */
    private $issuingCountry;

    /**
     * @var string|null
     */
    private $issuingState;

    /**
     * @var string|null
     */
    private $sitePersonMet;

    /**
     * @var DateComponents|null
     */
    private $siteVisitDate;

    /**
     * @var string|null
     */
    private $idNumber;

    /**
     * @var DateComponents|null
     */
    private $issueDate;

    /**
     * @var DateComponents|null
     */
    private $expiryDate;

    /**
     * @var string|null
     */
    private $documentType;

    /**
     * @param bool $documentary
     */
    public function __construct(bool $documentary)
    {
        $this->documentary = $documentary;
    }

    /**
     * Returns Documentary.
     * Flag indicating if business or legal documentary/verification info is to be provided, true if Yes,
     * false if NO
     */
    public function getDocumentary(): bool
    {
        return $this->documentary;
    }

    /**
     * Sets Documentary.
     * Flag indicating if business or legal documentary/verification info is to be provided, true if Yes,
     * false if NO
     *
     * @required
     * @maps documentary
     */
    public function setDocumentary(bool $documentary): void
    {
        $this->documentary = $documentary;
    }

    /**
     * Returns Issuing Country.
     * Country of documentation issuance, ISO 3166-1 alpha-3 standard applies
     */
    public function getIssuingCountry(): ?string
    {
        return $this->issuingCountry;
    }

    /**
     * Sets Issuing Country.
     * Country of documentation issuance, ISO 3166-1 alpha-3 standard applies
     *
     * @maps issuingCountry
     */
    public function setIssuingCountry(?string $issuingCountry): void
    {
        $this->issuingCountry = $issuingCountry;
    }

    /**
     * Returns Issuing State.
     * State of documentation issuance
     */
    public function getIssuingState(): ?string
    {
        return $this->issuingState;
    }

    /**
     * Sets Issuing State.
     * State of documentation issuance
     *
     * @maps issuingState
     * @factory \SwaggerScarecrowLib\Models\IssuingState1Enum::checkValue
     */
    public function setIssuingState(?string $issuingState): void
    {
        $this->issuingState = $issuingState;
    }

    /**
     * Returns Site Person Met.
     * If site survey conducted for verification instead of documentation, this is the person on site met
     * with
     */
    public function getSitePersonMet(): ?string
    {
        return $this->sitePersonMet;
    }

    /**
     * Sets Site Person Met.
     * If site survey conducted for verification instead of documentation, this is the person on site met
     * with
     *
     * @maps sitePersonMet
     */
    public function setSitePersonMet(?string $sitePersonMet): void
    {
        $this->sitePersonMet = $sitePersonMet;
    }

    /**
     * Returns Site Visit Date.
     * A container that holds the date (day, month, and year)
     */
    public function getSiteVisitDate(): ?DateComponents
    {
        return $this->siteVisitDate;
    }

    /**
     * Sets Site Visit Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps siteVisitDate
     */
    public function setSiteVisitDate(?DateComponents $siteVisitDate): void
    {
        $this->siteVisitDate = $siteVisitDate;
    }

    /**
     * Returns Id Number.
     * Id number of documentation provided
     */
    public function getIdNumber(): ?string
    {
        return $this->idNumber;
    }

    /**
     * Sets Id Number.
     * Id number of documentation provided
     *
     * @maps idNumber
     */
    public function setIdNumber(?string $idNumber): void
    {
        $this->idNumber = $idNumber;
    }

    /**
     * Returns Issue Date.
     * A container that holds the date (day, month, and year)
     */
    public function getIssueDate(): ?DateComponents
    {
        return $this->issueDate;
    }

    /**
     * Sets Issue Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps issueDate
     */
    public function setIssueDate(?DateComponents $issueDate): void
    {
        $this->issueDate = $issueDate;
    }

    /**
     * Returns Expiry Date.
     * A container that holds the date (day, month, and year)
     */
    public function getExpiryDate(): ?DateComponents
    {
        return $this->expiryDate;
    }

    /**
     * Sets Expiry Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps expiryDate
     */
    public function setExpiryDate(?DateComponents $expiryDate): void
    {
        $this->expiryDate = $expiryDate;
    }

    /**
     * Returns Document Type.
     * Type of documentation provided
     */
    public function getDocumentType(): ?string
    {
        return $this->documentType;
    }

    /**
     * Sets Document Type.
     * Type of documentation provided
     *
     * @maps documentType
     * @factory \SwaggerScarecrowLib\Models\DocumentTypeEnum::checkValue
     */
    public function setDocumentType(?string $documentType): void
    {
        $this->documentType = $documentType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['documentary']        = $this->documentary;
        if (isset($this->issuingCountry)) {
            $json['issuingCountry'] = $this->issuingCountry;
        }
        if (isset($this->issuingState)) {
            $json['issuingState']   = IssuingState1Enum::checkValue($this->issuingState);
        }
        if (isset($this->sitePersonMet)) {
            $json['sitePersonMet']  = $this->sitePersonMet;
        }
        if (isset($this->siteVisitDate)) {
            $json['siteVisitDate']  = $this->siteVisitDate;
        }
        if (isset($this->idNumber)) {
            $json['idNumber']       = $this->idNumber;
        }
        if (isset($this->issueDate)) {
            $json['issueDate']      = $this->issueDate;
        }
        if (isset($this->expiryDate)) {
            $json['expiryDate']     = $this->expiryDate;
        }
        if (isset($this->documentType)) {
            $json['documentType']   = DocumentTypeEnum::checkValue($this->documentType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
