<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

/**
 * A container to hold any terminal services that should be applied to the equipment
 */
class TerminalService implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string|null
     */
    private $serviceSpecifics;

    /**
     * @param string $type
     */
    public function __construct(string $type)
    {
        $this->type = $type;
    }

    /**
     * Returns Type.
     * Type of terminal service to be provided
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type of terminal service to be provided
     *
     * @required
     * @maps type
     * @factory \SwaggerScarecrowLib\Models\Type6Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Service Specifics.
     * [NA] Free text for additional specification of terminal service details
     */
    public function getServiceSpecifics(): ?string
    {
        return $this->serviceSpecifics;
    }

    /**
     * Sets Service Specifics.
     * [NA] Free text for additional specification of terminal service details
     *
     * @maps serviceSpecifics
     */
    public function setServiceSpecifics(?string $serviceSpecifics): void
    {
        $this->serviceSpecifics = $serviceSpecifics;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']                 = Type6Enum::checkValue($this->type);
        if (isset($this->serviceSpecifics)) {
            $json['serviceSpecifics'] = $this->serviceSpecifics;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
