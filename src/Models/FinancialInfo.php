<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class FinancialInfo implements \JsonSerializable
{
    /**
     * @var string
     */
    private $avgSaleAmount;

    /**
     * @var string
     */
    private $monthlyCardSales;

    /**
     * @var string|null
     */
    private $annualCardSales;

    /**
     * @var string|null
     */
    private $annualRevenue;

    /**
     * @var string|null
     */
    private $highestTicketAmount;

    /**
     * @var int|null
     */
    private $highestTicketFrequency;

    /**
     * @var string|null
     */
    private $fundingCurrency;

    /**
     * @var string
     */
    private $cardPresentAcceptancePercent;

    /**
     * @var string
     */
    private $internetAcceptancePercent;

    /**
     * @var string
     */
    private $motoAcceptancePercent;

    /**
     * @var string|null
     */
    private $businessEmailAddress;

    /**
     * @var string|null
     */
    private $businessWebsiteURL;

    /**
     * @var PhoneNumber|null
     */
    private $customerServicePhone;

    /**
     * @var int|null
     */
    private $notPresentDelayDays;

    /**
     * @var string|null
     */
    private $depositFrequency;

    /**
     * @var string|null
     */
    private $depositSizePercent;

    /**
     * @var string|null
     */
    private $depositBalanceDays;

    /**
     * @var string|null
     */
    private $depositFulfillmentDays;

    /**
     * @var string|null
     */
    private $fullPaymentPercent;

    /**
     * @var string|null
     */
    private $fullPaymentFulfillment;

    /**
     * @var bool|null
     */
    private $utilizeCVV2;

    /**
     * @var bool|null
     */
    private $recurringTransactions;

    /**
     * @var string|null
     */
    private $contractTermType;

    /**
     * @var string[]|null
     */
    private $monthsClosed;

    /**
     * @var string|null
     */
    private $monetaryBillingMethod;

    /**
     * @var bool|null
     */
    private $authorizationIncluded;

    /**
     * @var string|null
     */
    private $annualFeeMonthStart;

    /**
     * @var bool|null
     */
    private $moneyServices;

    /**
     * @var bool|null
     */
    private $paymentServices;

    /**
     * @var bool|null
     */
    private $thirdPartyProcessor;

    /**
     * @var bool|null
     */
    private $nonGovernmentNonProfit;

    /**
     * @var bool|null
     */
    private $dailyDiscount;

    /**
     * @var bool|null
     */
    private $nonBankAtm;

    /**
     * @var bool|null
     */
    private $embassy;

    /**
     * @var bool|null
     */
    private $highInterAnnualTransNgo;

    /**
     * @param string $avgSaleAmount
     * @param string $monthlyCardSales
     * @param string $cardPresentAcceptancePercent
     * @param string $internetAcceptancePercent
     * @param string $motoAcceptancePercent
     */
    public function __construct(
        string $avgSaleAmount,
        string $monthlyCardSales,
        string $cardPresentAcceptancePercent,
        string $internetAcceptancePercent,
        string $motoAcceptancePercent
    ) {
        $this->avgSaleAmount = $avgSaleAmount;
        $this->monthlyCardSales = $monthlyCardSales;
        $this->cardPresentAcceptancePercent = $cardPresentAcceptancePercent;
        $this->internetAcceptancePercent = $internetAcceptancePercent;
        $this->motoAcceptancePercent = $motoAcceptancePercent;
    }

    /**
     * Returns Avg Sale Amount.
     * Average Transaction Value (ATV)
     */
    public function getAvgSaleAmount(): string
    {
        return $this->avgSaleAmount;
    }

    /**
     * Sets Avg Sale Amount.
     * Average Transaction Value (ATV)
     *
     * @required
     * @maps avgSaleAmount
     */
    public function setAvgSaleAmount(string $avgSaleAmount): void
    {
        $this->avgSaleAmount = $avgSaleAmount;
    }

    /**
     * Returns Monthly Card Sales.
     * Predicted monthly credit card sales
     */
    public function getMonthlyCardSales(): string
    {
        return $this->monthlyCardSales;
    }

    /**
     * Sets Monthly Card Sales.
     * Predicted monthly credit card sales
     *
     * @required
     * @maps monthlyCardSales
     */
    public function setMonthlyCardSales(string $monthlyCardSales): void
    {
        $this->monthlyCardSales = $monthlyCardSales;
    }

    /**
     * Returns Annual Card Sales.
     * [EU] Projected yearly card sales
     */
    public function getAnnualCardSales(): ?string
    {
        return $this->annualCardSales;
    }

    /**
     * Sets Annual Card Sales.
     * [EU] Projected yearly card sales
     *
     * @maps annualCardSales
     */
    public function setAnnualCardSales(?string $annualCardSales): void
    {
        $this->annualCardSales = $annualCardSales;
    }

    /**
     * Returns Annual Revenue.
     * Projected yearly gross revenue
     */
    public function getAnnualRevenue(): ?string
    {
        return $this->annualRevenue;
    }

    /**
     * Sets Annual Revenue.
     * Projected yearly gross revenue
     *
     * @maps annualRevenue
     */
    public function setAnnualRevenue(?string $annualRevenue): void
    {
        $this->annualRevenue = $annualRevenue;
    }

    /**
     * Returns Highest Ticket Amount.
     * [NA] Highest estimated ticket amount
     */
    public function getHighestTicketAmount(): ?string
    {
        return $this->highestTicketAmount;
    }

    /**
     * Sets Highest Ticket Amount.
     * [NA] Highest estimated ticket amount
     *
     * @maps highestTicketAmount
     */
    public function setHighestTicketAmount(?string $highestTicketAmount): void
    {
        $this->highestTicketAmount = $highestTicketAmount;
    }

    /**
     * Returns Highest Ticket Frequency.
     * [NA] Frequency with which highest ticket is received annually
     */
    public function getHighestTicketFrequency(): ?int
    {
        return $this->highestTicketFrequency;
    }

    /**
     * Sets Highest Ticket Frequency.
     * [NA] Frequency with which highest ticket is received annually
     *
     * @maps highestTicketFrequency
     */
    public function setHighestTicketFrequency(?int $highestTicketFrequency): void
    {
        $this->highestTicketFrequency = $highestTicketFrequency;
    }

    /**
     * Returns Funding Currency.
     * Funding currency of business
     */
    public function getFundingCurrency(): ?string
    {
        return $this->fundingCurrency;
    }

    /**
     * Sets Funding Currency.
     * Funding currency of business
     *
     * @maps fundingCurrency
     */
    public function setFundingCurrency(?string $fundingCurrency): void
    {
        $this->fundingCurrency = $fundingCurrency;
    }

    /**
     * Returns Card Present Acceptance Percent.
     * The percentage split of card present transactions
     */
    public function getCardPresentAcceptancePercent(): string
    {
        return $this->cardPresentAcceptancePercent;
    }

    /**
     * Sets Card Present Acceptance Percent.
     * The percentage split of card present transactions
     *
     * @required
     * @maps cardPresentAcceptancePercent
     */
    public function setCardPresentAcceptancePercent(string $cardPresentAcceptancePercent): void
    {
        $this->cardPresentAcceptancePercent = $cardPresentAcceptancePercent;
    }

    /**
     * Returns Internet Acceptance Percent.
     * The percentage split of internet/ecom transactions
     */
    public function getInternetAcceptancePercent(): string
    {
        return $this->internetAcceptancePercent;
    }

    /**
     * Sets Internet Acceptance Percent.
     * The percentage split of internet/ecom transactions
     *
     * @required
     * @maps internetAcceptancePercent
     */
    public function setInternetAcceptancePercent(string $internetAcceptancePercent): void
    {
        $this->internetAcceptancePercent = $internetAcceptancePercent;
    }

    /**
     * Returns Moto Acceptance Percent.
     * The percentage split of mail-order/telephone-order transactions
     */
    public function getMotoAcceptancePercent(): string
    {
        return $this->motoAcceptancePercent;
    }

    /**
     * Sets Moto Acceptance Percent.
     * The percentage split of mail-order/telephone-order transactions
     *
     * @required
     * @maps motoAcceptancePercent
     */
    public function setMotoAcceptancePercent(string $motoAcceptancePercent): void
    {
        $this->motoAcceptancePercent = $motoAcceptancePercent;
    }

    /**
     * Returns Business Email Address.
     * [EU] Business email contact, required if internetAcceptancePercent > 0
     */
    public function getBusinessEmailAddress(): ?string
    {
        return $this->businessEmailAddress;
    }

    /**
     * Sets Business Email Address.
     * [EU] Business email contact, required if internetAcceptancePercent > 0
     *
     * @maps businessEmailAddress
     */
    public function setBusinessEmailAddress(?string $businessEmailAddress): void
    {
        $this->businessEmailAddress = $businessEmailAddress;
    }

    /**
     * Returns Business Website URL.
     * Business URL, required if internetAcceptancePercent > 0
     */
    public function getBusinessWebsiteURL(): ?string
    {
        return $this->businessWebsiteURL;
    }

    /**
     * Sets Business Website URL.
     * Business URL, required if internetAcceptancePercent > 0
     *
     * @maps businessWebsiteURL
     */
    public function setBusinessWebsiteURL(?string $businessWebsiteURL): void
    {
        $this->businessWebsiteURL = $businessWebsiteURL;
    }

    /**
     * Returns Customer Service Phone.
     */
    public function getCustomerServicePhone(): ?PhoneNumber
    {
        return $this->customerServicePhone;
    }

    /**
     * Sets Customer Service Phone.
     *
     * @maps customerServicePhone
     */
    public function setCustomerServicePhone(?PhoneNumber $customerServicePhone): void
    {
        $this->customerServicePhone = $customerServicePhone;
    }

    /**
     * Returns Not Present Delay Days.
     * [NA] Card Not Present delay for something
     */
    public function getNotPresentDelayDays(): ?int
    {
        return $this->notPresentDelayDays;
    }

    /**
     * Sets Not Present Delay Days.
     * [NA] Card Not Present delay for something
     *
     * @maps notPresentDelayDays
     */
    public function setNotPresentDelayDays(?int $notPresentDelayDays): void
    {
        $this->notPresentDelayDays = $notPresentDelayDays;
    }

    /**
     * Returns Deposit Frequency.
     * [EU]
     */
    public function getDepositFrequency(): ?string
    {
        return $this->depositFrequency;
    }

    /**
     * Sets Deposit Frequency.
     * [EU]
     *
     * @maps depositFrequency
     */
    public function setDepositFrequency(?string $depositFrequency): void
    {
        $this->depositFrequency = $depositFrequency;
    }

    /**
     * Returns Deposit Size Percent.
     * [EU]
     */
    public function getDepositSizePercent(): ?string
    {
        return $this->depositSizePercent;
    }

    /**
     * Sets Deposit Size Percent.
     * [EU]
     *
     * @maps depositSizePercent
     */
    public function setDepositSizePercent(?string $depositSizePercent): void
    {
        $this->depositSizePercent = $depositSizePercent;
    }

    /**
     * Returns Deposit Balance Days.
     * [EU]
     */
    public function getDepositBalanceDays(): ?string
    {
        return $this->depositBalanceDays;
    }

    /**
     * Sets Deposit Balance Days.
     * [EU]
     *
     * @maps depositBalanceDays
     */
    public function setDepositBalanceDays(?string $depositBalanceDays): void
    {
        $this->depositBalanceDays = $depositBalanceDays;
    }

    /**
     * Returns Deposit Fulfillment Days.
     * [EU]
     */
    public function getDepositFulfillmentDays(): ?string
    {
        return $this->depositFulfillmentDays;
    }

    /**
     * Sets Deposit Fulfillment Days.
     * [EU]
     *
     * @maps depositFulfillmentDays
     */
    public function setDepositFulfillmentDays(?string $depositFulfillmentDays): void
    {
        $this->depositFulfillmentDays = $depositFulfillmentDays;
    }

    /**
     * Returns Full Payment Percent.
     * [EU]
     */
    public function getFullPaymentPercent(): ?string
    {
        return $this->fullPaymentPercent;
    }

    /**
     * Sets Full Payment Percent.
     * [EU]
     *
     * @maps fullPaymentPercent
     */
    public function setFullPaymentPercent(?string $fullPaymentPercent): void
    {
        $this->fullPaymentPercent = $fullPaymentPercent;
    }

    /**
     * Returns Full Payment Fulfillment.
     * [EU]
     */
    public function getFullPaymentFulfillment(): ?string
    {
        return $this->fullPaymentFulfillment;
    }

    /**
     * Sets Full Payment Fulfillment.
     * [EU]
     *
     * @maps fullPaymentFulfillment
     */
    public function setFullPaymentFulfillment(?string $fullPaymentFulfillment): void
    {
        $this->fullPaymentFulfillment = $fullPaymentFulfillment;
    }

    /**
     * Returns Utilize CVV2.
     * [EU]
     */
    public function getUtilizeCVV2(): ?bool
    {
        return $this->utilizeCVV2;
    }

    /**
     * Sets Utilize CVV2.
     * [EU]
     *
     * @maps utilizeCVV2
     */
    public function setUtilizeCVV2(?bool $utilizeCVV2): void
    {
        $this->utilizeCVV2 = $utilizeCVV2;
    }

    /**
     * Returns Recurring Transactions.
     * [EU]
     */
    public function getRecurringTransactions(): ?bool
    {
        return $this->recurringTransactions;
    }

    /**
     * Sets Recurring Transactions.
     * [EU]
     *
     * @maps recurringTransactions
     */
    public function setRecurringTransactions(?bool $recurringTransactions): void
    {
        $this->recurringTransactions = $recurringTransactions;
    }

    /**
     * Returns Contract Term Type.
     * [EU] ZERO_MONTH, TWELVE_MONTHS, TWENTY_FOUR_MONTHS, or THIRTY_SIX_MONTHS
     */
    public function getContractTermType(): ?string
    {
        return $this->contractTermType;
    }

    /**
     * Sets Contract Term Type.
     * [EU] ZERO_MONTH, TWELVE_MONTHS, TWENTY_FOUR_MONTHS, or THIRTY_SIX_MONTHS
     *
     * @maps contractTermType
     * @factory \SwaggerScarecrowLib\Models\ContractTermTypeEnum::checkValue
     */
    public function setContractTermType(?string $contractTermType): void
    {
        $this->contractTermType = $contractTermType;
    }

    /**
     * Returns Months Closed.
     * List containing months business is closed, for seasonal businesses
     *
     * @return string[]|null
     */
    public function getMonthsClosed(): ?array
    {
        return $this->monthsClosed;
    }

    /**
     * Sets Months Closed.
     * List containing months business is closed, for seasonal businesses
     *
     * @maps monthsClosed
     * @factory \SwaggerScarecrowLib\Models\MonthsClosedEnum::checkValue
     *
     * @param string[]|null $monthsClosed
     */
    public function setMonthsClosed(?array $monthsClosed): void
    {
        $this->monthsClosed = $monthsClosed;
    }

    /**
     * Returns Monetary Billing Method.
     * [NA] string, CARD_DISCOUNT or DIA
     */
    public function getMonetaryBillingMethod(): ?string
    {
        return $this->monetaryBillingMethod;
    }

    /**
     * Sets Monetary Billing Method.
     * [NA] string, CARD_DISCOUNT or DIA
     *
     * @maps monetaryBillingMethod
     * @factory \SwaggerScarecrowLib\Models\MonetaryBillingMethodEnum::checkValue
     */
    public function setMonetaryBillingMethod(?string $monetaryBillingMethod): void
    {
        $this->monetaryBillingMethod = $monetaryBillingMethod;
    }

    /**
     * Returns Authorization Included.
     * [NA]
     */
    public function getAuthorizationIncluded(): ?bool
    {
        return $this->authorizationIncluded;
    }

    /**
     * Sets Authorization Included.
     * [NA]
     *
     * @maps authorizationIncluded
     */
    public function setAuthorizationIncluded(?bool $authorizationIncluded): void
    {
        $this->authorizationIncluded = $authorizationIncluded;
    }

    /**
     * Returns Annual Fee Month Start.
     * [NA] The month in which annual fee is applied
     */
    public function getAnnualFeeMonthStart(): ?string
    {
        return $this->annualFeeMonthStart;
    }

    /**
     * Sets Annual Fee Month Start.
     * [NA] The month in which annual fee is applied
     *
     * @maps annualFeeMonthStart
     * @factory \SwaggerScarecrowLib\Models\AnnualFeeMonthStartEnum::checkValue
     */
    public function setAnnualFeeMonthStart(?string $annualFeeMonthStart): void
    {
        $this->annualFeeMonthStart = $annualFeeMonthStart;
    }

    /**
     * Returns Money Services.
     * [EU]
     */
    public function getMoneyServices(): ?bool
    {
        return $this->moneyServices;
    }

    /**
     * Sets Money Services.
     * [EU]
     *
     * @maps moneyServices
     */
    public function setMoneyServices(?bool $moneyServices): void
    {
        $this->moneyServices = $moneyServices;
    }

    /**
     * Returns Payment Services.
     */
    public function getPaymentServices(): ?bool
    {
        return $this->paymentServices;
    }

    /**
     * Sets Payment Services.
     *
     * @maps paymentServices
     */
    public function setPaymentServices(?bool $paymentServices): void
    {
        $this->paymentServices = $paymentServices;
    }

    /**
     * Returns Third Party Processor.
     */
    public function getThirdPartyProcessor(): ?bool
    {
        return $this->thirdPartyProcessor;
    }

    /**
     * Sets Third Party Processor.
     *
     * @maps thirdPartyProcessor
     */
    public function setThirdPartyProcessor(?bool $thirdPartyProcessor): void
    {
        $this->thirdPartyProcessor = $thirdPartyProcessor;
    }

    /**
     * Returns Non Government Non Profit.
     * [EU]
     */
    public function getNonGovernmentNonProfit(): ?bool
    {
        return $this->nonGovernmentNonProfit;
    }

    /**
     * Sets Non Government Non Profit.
     * [EU]
     *
     * @maps nonGovernmentNonProfit
     */
    public function setNonGovernmentNonProfit(?bool $nonGovernmentNonProfit): void
    {
        $this->nonGovernmentNonProfit = $nonGovernmentNonProfit;
    }

    /**
     * Returns Daily Discount.
     * [NA]
     */
    public function getDailyDiscount(): ?bool
    {
        return $this->dailyDiscount;
    }

    /**
     * Sets Daily Discount.
     * [NA]
     *
     * @maps dailyDiscount
     */
    public function setDailyDiscount(?bool $dailyDiscount): void
    {
        $this->dailyDiscount = $dailyDiscount;
    }

    /**
     * Returns Non Bank Atm.
     * Does business operate its own ATM (not associated with a bank)
     */
    public function getNonBankAtm(): ?bool
    {
        return $this->nonBankAtm;
    }

    /**
     * Sets Non Bank Atm.
     * Does business operate its own ATM (not associated with a bank)
     *
     * @maps nonBankAtm
     */
    public function setNonBankAtm(?bool $nonBankAtm): void
    {
        $this->nonBankAtm = $nonBankAtm;
    }

    /**
     * Returns Embassy.
     * Deprecated
     */
    public function getEmbassy(): ?bool
    {
        return $this->embassy;
    }

    /**
     * Sets Embassy.
     * Deprecated
     *
     * @maps embassy
     */
    public function setEmbassy(?bool $embassy): void
    {
        $this->embassy = $embassy;
    }

    /**
     * Returns High Inter Annual Trans Ngo.
     * Deprecated
     */
    public function getHighInterAnnualTransNgo(): ?bool
    {
        return $this->highInterAnnualTransNgo;
    }

    /**
     * Sets High Inter Annual Trans Ngo.
     * Deprecated
     *
     * @maps highInterAnnualTransNgo
     */
    public function setHighInterAnnualTransNgo(?bool $highInterAnnualTransNgo): void
    {
        $this->highInterAnnualTransNgo = $highInterAnnualTransNgo;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['avgSaleAmount']                = $this->avgSaleAmount;
        $json['monthlyCardSales']             = $this->monthlyCardSales;
        if (isset($this->annualCardSales)) {
            $json['annualCardSales']          = $this->annualCardSales;
        }
        if (isset($this->annualRevenue)) {
            $json['annualRevenue']            = $this->annualRevenue;
        }
        if (isset($this->highestTicketAmount)) {
            $json['highestTicketAmount']      = $this->highestTicketAmount;
        }
        if (isset($this->highestTicketFrequency)) {
            $json['highestTicketFrequency']   = $this->highestTicketFrequency;
        }
        if (isset($this->fundingCurrency)) {
            $json['fundingCurrency']          = $this->fundingCurrency;
        }
        $json['cardPresentAcceptancePercent'] = $this->cardPresentAcceptancePercent;
        $json['internetAcceptancePercent']    = $this->internetAcceptancePercent;
        $json['motoAcceptancePercent']        = $this->motoAcceptancePercent;
        if (isset($this->businessEmailAddress)) {
            $json['businessEmailAddress']     = $this->businessEmailAddress;
        }
        if (isset($this->businessWebsiteURL)) {
            $json['businessWebsiteURL']       = $this->businessWebsiteURL;
        }
        if (isset($this->customerServicePhone)) {
            $json['customerServicePhone']     = $this->customerServicePhone;
        }
        if (isset($this->notPresentDelayDays)) {
            $json['notPresentDelayDays']      = $this->notPresentDelayDays;
        }
        if (isset($this->depositFrequency)) {
            $json['depositFrequency']         = $this->depositFrequency;
        }
        if (isset($this->depositSizePercent)) {
            $json['depositSizePercent']       = $this->depositSizePercent;
        }
        if (isset($this->depositBalanceDays)) {
            $json['depositBalanceDays']       = $this->depositBalanceDays;
        }
        if (isset($this->depositFulfillmentDays)) {
            $json['depositFulfillmentDays']   = $this->depositFulfillmentDays;
        }
        if (isset($this->fullPaymentPercent)) {
            $json['fullPaymentPercent']       = $this->fullPaymentPercent;
        }
        if (isset($this->fullPaymentFulfillment)) {
            $json['fullPaymentFulfillment']   = $this->fullPaymentFulfillment;
        }
        if (isset($this->utilizeCVV2)) {
            $json['utilizeCVV2']              = $this->utilizeCVV2;
        }
        if (isset($this->recurringTransactions)) {
            $json['recurringTransactions']    = $this->recurringTransactions;
        }
        if (isset($this->contractTermType)) {
            $json['contractTermType']         = ContractTermTypeEnum::checkValue($this->contractTermType);
        }
        if (isset($this->monthsClosed)) {
            $json['monthsClosed']             = MonthsClosedEnum::checkValue($this->monthsClosed);
        }
        if (isset($this->monetaryBillingMethod)) {
            $json['monetaryBillingMethod']    = MonetaryBillingMethodEnum::checkValue($this->monetaryBillingMethod);
        }
        if (isset($this->authorizationIncluded)) {
            $json['authorizationIncluded']    = $this->authorizationIncluded;
        }
        if (isset($this->annualFeeMonthStart)) {
            $json['annualFeeMonthStart']      = AnnualFeeMonthStartEnum::checkValue($this->annualFeeMonthStart);
        }
        if (isset($this->moneyServices)) {
            $json['moneyServices']            = $this->moneyServices;
        }
        if (isset($this->paymentServices)) {
            $json['paymentServices']          = $this->paymentServices;
        }
        if (isset($this->thirdPartyProcessor)) {
            $json['thirdPartyProcessor']      = $this->thirdPartyProcessor;
        }
        if (isset($this->nonGovernmentNonProfit)) {
            $json['nonGovernmentNonProfit']   = $this->nonGovernmentNonProfit;
        }
        if (isset($this->dailyDiscount)) {
            $json['dailyDiscount']            = $this->dailyDiscount;
        }
        if (isset($this->nonBankAtm)) {
            $json['nonBankAtm']               = $this->nonBankAtm;
        }
        if (isset($this->embassy)) {
            $json['embassy']                  = $this->embassy;
        }
        if (isset($this->highInterAnnualTransNgo)) {
            $json['highInterAnnualTransNgo']  = $this->highInterAnnualTransNgo;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
