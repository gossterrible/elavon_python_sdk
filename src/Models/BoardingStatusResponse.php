<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class BoardingStatusResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $boardingStatus;

    /**
     * @var string|null
     */
    private $applicationId;

    /**
     * @var BoardingStatusMessage[]|null
     */
    private $messages;

    /**
     * @var BoardingStatusMessage[]|null
     */
    private $pendMessages;

    /**
     * @var BoardingStatusMessage[]|null
     */
    private $underwriterNotes;

    /**
     * @var string[]|null
     */
    private $underwriterContacts;

    /**
     * Returns Error.
     * Error message from service
     */
    public function getError(): ?string
    {
        return $this->error;
    }

    /**
     * Sets Error.
     * Error message from service
     *
     * @maps error
     */
    public function setError(?string $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Boarding Status.
     * Status of boarded application
     */
    public function getBoardingStatus(): ?string
    {
        return $this->boardingStatus;
    }

    /**
     * Sets Boarding Status.
     * Status of boarded application
     *
     * @maps boardingStatus
     * @factory \SwaggerScarecrowLib\Models\BoardingStatusEnum::checkValue
     */
    public function setBoardingStatus(?string $boardingStatus): void
    {
        $this->boardingStatus = $boardingStatus;
    }

    /**
     * Returns Application Id.
     * MID (EU) or AWB (NA), MID in NA if boarding status is COMPLETE
     */
    public function getApplicationId(): ?string
    {
        return $this->applicationId;
    }

    /**
     * Sets Application Id.
     * MID (EU) or AWB (NA), MID in NA if boarding status is COMPLETE
     *
     * @maps applicationId
     */
    public function setApplicationId(?string $applicationId): void
    {
        $this->applicationId = $applicationId;
    }

    /**
     * Returns Messages.
     * [NA] Messages from service
     *
     * @return BoardingStatusMessage[]|null
     */
    public function getMessages(): ?array
    {
        return $this->messages;
    }

    /**
     * Sets Messages.
     * [NA] Messages from service
     *
     * @maps messages
     *
     * @param BoardingStatusMessage[]|null $messages
     */
    public function setMessages(?array $messages): void
    {
        $this->messages = $messages;
    }

    /**
     * Returns Pend Messages.
     * [NA] Pend Messages from service
     *
     * @return BoardingStatusMessage[]|null
     */
    public function getPendMessages(): ?array
    {
        return $this->pendMessages;
    }

    /**
     * Sets Pend Messages.
     * [NA] Pend Messages from service
     *
     * @maps pendMessages
     *
     * @param BoardingStatusMessage[]|null $pendMessages
     */
    public function setPendMessages(?array $pendMessages): void
    {
        $this->pendMessages = $pendMessages;
    }

    /**
     * Returns Underwriter Notes.
     * [NA] Notes by downstream underwritter
     *
     * @return BoardingStatusMessage[]|null
     */
    public function getUnderwriterNotes(): ?array
    {
        return $this->underwriterNotes;
    }

    /**
     * Sets Underwriter Notes.
     * [NA] Notes by downstream underwritter
     *
     * @maps underwriterNotes
     *
     * @param BoardingStatusMessage[]|null $underwriterNotes
     */
    public function setUnderwriterNotes(?array $underwriterNotes): void
    {
        $this->underwriterNotes = $underwriterNotes;
    }

    /**
     * Returns Underwriter Contacts.
     * [NA] Contact information for downstream underwritter
     *
     * @return string[]|null
     */
    public function getUnderwriterContacts(): ?array
    {
        return $this->underwriterContacts;
    }

    /**
     * Sets Underwriter Contacts.
     * [NA] Contact information for downstream underwritter
     *
     * @maps underwriterContacts
     *
     * @param string[]|null $underwriterContacts
     */
    public function setUnderwriterContacts(?array $underwriterContacts): void
    {
        $this->underwriterContacts = $underwriterContacts;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->error)) {
            $json['error']               = $this->error;
        }
        if (isset($this->boardingStatus)) {
            $json['boardingStatus']      = BoardingStatusEnum::checkValue($this->boardingStatus);
        }
        if (isset($this->applicationId)) {
            $json['applicationId']       = $this->applicationId;
        }
        if (isset($this->messages)) {
            $json['messages']            = $this->messages;
        }
        if (isset($this->pendMessages)) {
            $json['pendMessages']        = $this->pendMessages;
        }
        if (isset($this->underwriterNotes)) {
            $json['underwriterNotes']    = $this->underwriterNotes;
        }
        if (isset($this->underwriterContacts)) {
            $json['underwriterContacts'] = $this->underwriterContacts;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
