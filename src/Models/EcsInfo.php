<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class EcsInfo implements \JsonSerializable
{
    /**
     * @var string
     */
    private $processingAcceptanceType;

    /**
     * @var string|null
     */
    private $serviceLevelType;

    /**
     * @var float|null
     */
    private $annualCheckVolume;

    /**
     * @var float|null
     */
    private $averageCheckAmount;

    /**
     * @var int|null
     */
    private $maxCheckAmount;

    /**
     * @var float|null
     */
    private $perTransaction;

    /**
     * @var float|null
     */
    private $discountRate;

    /**
     * @var float|null
     */
    private $monthlyMinimum;

    /**
     * @var float|null
     */
    private $perReturnFee;

    /**
     * @var float|null
     */
    private $nsfServiceProcessingFee;

    /**
     * @var float|null
     */
    private $nsfServiceFee;

    /**
     * @var bool|null
     */
    private $collection;

    /**
     * @var bool|null
     */
    private $enquireReporting;

    /**
     * @var string|null
     */
    private $serviceProviderType;

    /**
     * @param string $processingAcceptanceType
     */
    public function __construct(string $processingAcceptanceType)
    {
        $this->processingAcceptanceType = $processingAcceptanceType;
    }

    /**
     * Returns Processing Acceptance Type.
     * ECS processing acceptance
     */
    public function getProcessingAcceptanceType(): string
    {
        return $this->processingAcceptanceType;
    }

    /**
     * Sets Processing Acceptance Type.
     * ECS processing acceptance
     *
     * @required
     * @maps processingAcceptanceType
     * @factory \SwaggerScarecrowLib\Models\ProcessingAcceptanceTypeEnum::checkValue
     */
    public function setProcessingAcceptanceType(string $processingAcceptanceType): void
    {
        $this->processingAcceptanceType = $processingAcceptanceType;
    }

    /**
     * Returns Service Level Type.
     * ECS service level
     */
    public function getServiceLevelType(): ?string
    {
        return $this->serviceLevelType;
    }

    /**
     * Sets Service Level Type.
     * ECS service level
     *
     * @maps serviceLevelType
     * @factory \SwaggerScarecrowLib\Models\ServiceLevelTypeEnum::checkValue
     */
    public function setServiceLevelType(?string $serviceLevelType): void
    {
        $this->serviceLevelType = $serviceLevelType;
    }

    /**
     * Returns Annual Check Volume.
     * Predicted annual check volume to be given though service
     */
    public function getAnnualCheckVolume(): ?float
    {
        return $this->annualCheckVolume;
    }

    /**
     * Sets Annual Check Volume.
     * Predicted annual check volume to be given though service
     *
     * @maps annualCheckVolume
     */
    public function setAnnualCheckVolume(?float $annualCheckVolume): void
    {
        $this->annualCheckVolume = $annualCheckVolume;
    }

    /**
     * Returns Average Check Amount.
     * Predicted average check amount to be given though service
     */
    public function getAverageCheckAmount(): ?float
    {
        return $this->averageCheckAmount;
    }

    /**
     * Sets Average Check Amount.
     * Predicted average check amount to be given though service
     *
     * @maps averageCheckAmount
     */
    public function setAverageCheckAmount(?float $averageCheckAmount): void
    {
        $this->averageCheckAmount = $averageCheckAmount;
    }

    /**
     * Returns Max Check Amount.
     * Max checks allowed though service
     */
    public function getMaxCheckAmount(): ?int
    {
        return $this->maxCheckAmount;
    }

    /**
     * Sets Max Check Amount.
     * Max checks allowed though service
     *
     * @maps maxCheckAmount
     */
    public function setMaxCheckAmount(?int $maxCheckAmount): void
    {
        $this->maxCheckAmount = $maxCheckAmount;
    }

    /**
     * Returns Per Transaction.
     * Per transaction fee applied to service
     */
    public function getPerTransaction(): ?float
    {
        return $this->perTransaction;
    }

    /**
     * Sets Per Transaction.
     * Per transaction fee applied to service
     *
     * @maps perTransaction
     */
    public function setPerTransaction(?float $perTransaction): void
    {
        $this->perTransaction = $perTransaction;
    }

    /**
     * Returns Discount Rate.
     * Fee percentage to be applied to service
     */
    public function getDiscountRate(): ?float
    {
        return $this->discountRate;
    }

    /**
     * Sets Discount Rate.
     * Fee percentage to be applied to service
     *
     * @maps discountRate
     */
    public function setDiscountRate(?float $discountRate): void
    {
        $this->discountRate = $discountRate;
    }

    /**
     * Returns Monthly Minimum.
     * Per transaction fee applied to service
     */
    public function getMonthlyMinimum(): ?float
    {
        return $this->monthlyMinimum;
    }

    /**
     * Sets Monthly Minimum.
     * Per transaction fee applied to service
     *
     * @maps monthlyMinimum
     */
    public function setMonthlyMinimum(?float $monthlyMinimum): void
    {
        $this->monthlyMinimum = $monthlyMinimum;
    }

    /**
     * Returns Per Return Fee.
     * Per returns fee applied to service
     */
    public function getPerReturnFee(): ?float
    {
        return $this->perReturnFee;
    }

    /**
     * Sets Per Return Fee.
     * Per returns fee applied to service
     *
     * @maps perReturnFee
     */
    public function setPerReturnFee(?float $perReturnFee): void
    {
        $this->perReturnFee = $perReturnFee;
    }

    /**
     * Returns Nsf Service Processing Fee.
     * Processing fee for addtional NSF service
     */
    public function getNsfServiceProcessingFee(): ?float
    {
        return $this->nsfServiceProcessingFee;
    }

    /**
     * Sets Nsf Service Processing Fee.
     * Processing fee for addtional NSF service
     *
     * @maps nsfServiceProcessingFee
     */
    public function setNsfServiceProcessingFee(?float $nsfServiceProcessingFee): void
    {
        $this->nsfServiceProcessingFee = $nsfServiceProcessingFee;
    }

    /**
     * Returns Nsf Service Fee.
     * Up front fee for addtional NSF service
     */
    public function getNsfServiceFee(): ?float
    {
        return $this->nsfServiceFee;
    }

    /**
     * Sets Nsf Service Fee.
     * Up front fee for addtional NSF service
     *
     * @maps nsfServiceFee
     */
    public function setNsfServiceFee(?float $nsfServiceFee): void
    {
        $this->nsfServiceFee = $nsfServiceFee;
    }

    /**
     * Returns Collection.
     * Boolean indicating if ECS collection service is desired, true if YES, false if NO
     */
    public function getCollection(): ?bool
    {
        return $this->collection;
    }

    /**
     * Sets Collection.
     * Boolean indicating if ECS collection service is desired, true if YES, false if NO
     *
     * @maps collection
     */
    public function setCollection(?bool $collection): void
    {
        $this->collection = $collection;
    }

    /**
     * Returns Enquire Reporting.
     * Boolean indicating if ECS Enquire reporting service is desired, true if YES, false if NO
     */
    public function getEnquireReporting(): ?bool
    {
        return $this->enquireReporting;
    }

    /**
     * Sets Enquire Reporting.
     * Boolean indicating if ECS Enquire reporting service is desired, true if YES, false if NO
     *
     * @maps enquireReporting
     */
    public function setEnquireReporting(?bool $enquireReporting): void
    {
        $this->enquireReporting = $enquireReporting;
    }

    /**
     * Returns Service Provider Type.
     * ECS service provider. If not provided, will board as ENCIRCLE DIRECT
     */
    public function getServiceProviderType(): ?string
    {
        return $this->serviceProviderType;
    }

    /**
     * Sets Service Provider Type.
     * ECS service provider. If not provided, will board as ENCIRCLE DIRECT
     *
     * @maps serviceProviderType
     * @factory \SwaggerScarecrowLib\Models\ServiceProviderTypeEnum::checkValue
     */
    public function setServiceProviderType(?string $serviceProviderType): void
    {
        $this->serviceProviderType = $serviceProviderType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['processingAcceptanceType']    =
            ProcessingAcceptanceTypeEnum::checkValue(
                $this->processingAcceptanceType
            );
        if (isset($this->serviceLevelType)) {
            $json['serviceLevelType']        = ServiceLevelTypeEnum::checkValue($this->serviceLevelType);
        }
        if (isset($this->annualCheckVolume)) {
            $json['annualCheckVolume']       = $this->annualCheckVolume;
        }
        if (isset($this->averageCheckAmount)) {
            $json['averageCheckAmount']      = $this->averageCheckAmount;
        }
        if (isset($this->maxCheckAmount)) {
            $json['maxCheckAmount']          = $this->maxCheckAmount;
        }
        if (isset($this->perTransaction)) {
            $json['perTransaction']          = $this->perTransaction;
        }
        if (isset($this->discountRate)) {
            $json['discountRate']            = $this->discountRate;
        }
        if (isset($this->monthlyMinimum)) {
            $json['monthlyMinimum']          = $this->monthlyMinimum;
        }
        if (isset($this->perReturnFee)) {
            $json['perReturnFee']            = $this->perReturnFee;
        }
        if (isset($this->nsfServiceProcessingFee)) {
            $json['nsfServiceProcessingFee'] = $this->nsfServiceProcessingFee;
        }
        if (isset($this->nsfServiceFee)) {
            $json['nsfServiceFee']           = $this->nsfServiceFee;
        }
        if (isset($this->collection)) {
            $json['collection']              = $this->collection;
        }
        if (isset($this->enquireReporting)) {
            $json['enquireReporting']        = $this->enquireReporting;
        }
        if (isset($this->serviceProviderType)) {
            $json['serviceProviderType']     = ServiceProviderTypeEnum::checkValue($this->serviceProviderType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
