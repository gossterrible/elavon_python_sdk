<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class Locale implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $displayName;

    /**
     * @var string|null
     */
    private $script;

    /**
     * @var string|null
     */
    private $country;

    /**
     * @var string|null
     */
    private $variant;

    /**
     * @var string[]|null
     */
    private $extensionKeys;

    /**
     * @var string[]|null
     */
    private $unicodeLocaleAttributes;

    /**
     * @var string[]|null
     */
    private $unicodeLocaleKeys;

    /**
     * @var string|null
     */
    private $iso3Language;

    /**
     * @var string|null
     */
    private $iso3Country;

    /**
     * @var string|null
     */
    private $displayLanguage;

    /**
     * @var string|null
     */
    private $displayScript;

    /**
     * @var string|null
     */
    private $displayCountry;

    /**
     * @var string|null
     */
    private $displayVariant;

    /**
     * @var string|null
     */
    private $language;

    /**
     * Returns Display Name.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Sets Display Name.
     *
     * @maps displayName
     */
    public function setDisplayName(?string $displayName): void
    {
        $this->displayName = $displayName;
    }

    /**
     * Returns Script.
     */
    public function getScript(): ?string
    {
        return $this->script;
    }

    /**
     * Sets Script.
     *
     * @maps script
     */
    public function setScript(?string $script): void
    {
        $this->script = $script;
    }

    /**
     * Returns Country.
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     *
     * @maps country
     */
    public function setCountry(?string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Variant.
     */
    public function getVariant(): ?string
    {
        return $this->variant;
    }

    /**
     * Sets Variant.
     *
     * @maps variant
     */
    public function setVariant(?string $variant): void
    {
        $this->variant = $variant;
    }

    /**
     * Returns Extension Keys.
     *
     * @return string[]|null
     */
    public function getExtensionKeys(): ?array
    {
        return $this->extensionKeys;
    }

    /**
     * Sets Extension Keys.
     *
     * @maps extensionKeys
     *
     * @param string[]|null $extensionKeys
     */
    public function setExtensionKeys(?array $extensionKeys): void
    {
        $this->extensionKeys = $extensionKeys;
    }

    /**
     * Returns Unicode Locale Attributes.
     *
     * @return string[]|null
     */
    public function getUnicodeLocaleAttributes(): ?array
    {
        return $this->unicodeLocaleAttributes;
    }

    /**
     * Sets Unicode Locale Attributes.
     *
     * @maps unicodeLocaleAttributes
     *
     * @param string[]|null $unicodeLocaleAttributes
     */
    public function setUnicodeLocaleAttributes(?array $unicodeLocaleAttributes): void
    {
        $this->unicodeLocaleAttributes = $unicodeLocaleAttributes;
    }

    /**
     * Returns Unicode Locale Keys.
     *
     * @return string[]|null
     */
    public function getUnicodeLocaleKeys(): ?array
    {
        return $this->unicodeLocaleKeys;
    }

    /**
     * Sets Unicode Locale Keys.
     *
     * @maps unicodeLocaleKeys
     *
     * @param string[]|null $unicodeLocaleKeys
     */
    public function setUnicodeLocaleKeys(?array $unicodeLocaleKeys): void
    {
        $this->unicodeLocaleKeys = $unicodeLocaleKeys;
    }

    /**
     * Returns Iso 3 Language.
     */
    public function getIso3Language(): ?string
    {
        return $this->iso3Language;
    }

    /**
     * Sets Iso 3 Language.
     *
     * @maps iso3Language
     */
    public function setIso3Language(?string $iso3Language): void
    {
        $this->iso3Language = $iso3Language;
    }

    /**
     * Returns Iso 3 Country.
     */
    public function getIso3Country(): ?string
    {
        return $this->iso3Country;
    }

    /**
     * Sets Iso 3 Country.
     *
     * @maps iso3Country
     */
    public function setIso3Country(?string $iso3Country): void
    {
        $this->iso3Country = $iso3Country;
    }

    /**
     * Returns Display Language.
     */
    public function getDisplayLanguage(): ?string
    {
        return $this->displayLanguage;
    }

    /**
     * Sets Display Language.
     *
     * @maps displayLanguage
     */
    public function setDisplayLanguage(?string $displayLanguage): void
    {
        $this->displayLanguage = $displayLanguage;
    }

    /**
     * Returns Display Script.
     */
    public function getDisplayScript(): ?string
    {
        return $this->displayScript;
    }

    /**
     * Sets Display Script.
     *
     * @maps displayScript
     */
    public function setDisplayScript(?string $displayScript): void
    {
        $this->displayScript = $displayScript;
    }

    /**
     * Returns Display Country.
     */
    public function getDisplayCountry(): ?string
    {
        return $this->displayCountry;
    }

    /**
     * Sets Display Country.
     *
     * @maps displayCountry
     */
    public function setDisplayCountry(?string $displayCountry): void
    {
        $this->displayCountry = $displayCountry;
    }

    /**
     * Returns Display Variant.
     */
    public function getDisplayVariant(): ?string
    {
        return $this->displayVariant;
    }

    /**
     * Sets Display Variant.
     *
     * @maps displayVariant
     */
    public function setDisplayVariant(?string $displayVariant): void
    {
        $this->displayVariant = $displayVariant;
    }

    /**
     * Returns Language.
     */
    public function getLanguage(): ?string
    {
        return $this->language;
    }

    /**
     * Sets Language.
     *
     * @maps language
     */
    public function setLanguage(?string $language): void
    {
        $this->language = $language;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->displayName)) {
            $json['displayName']             = $this->displayName;
        }
        if (isset($this->script)) {
            $json['script']                  = $this->script;
        }
        if (isset($this->country)) {
            $json['country']                 = $this->country;
        }
        if (isset($this->variant)) {
            $json['variant']                 = $this->variant;
        }
        if (isset($this->extensionKeys)) {
            $json['extensionKeys']           = $this->extensionKeys;
        }
        if (isset($this->unicodeLocaleAttributes)) {
            $json['unicodeLocaleAttributes'] = $this->unicodeLocaleAttributes;
        }
        if (isset($this->unicodeLocaleKeys)) {
            $json['unicodeLocaleKeys']       = $this->unicodeLocaleKeys;
        }
        if (isset($this->iso3Language)) {
            $json['iso3Language']            = $this->iso3Language;
        }
        if (isset($this->iso3Country)) {
            $json['iso3Country']             = $this->iso3Country;
        }
        if (isset($this->displayLanguage)) {
            $json['displayLanguage']         = $this->displayLanguage;
        }
        if (isset($this->displayScript)) {
            $json['displayScript']           = $this->displayScript;
        }
        if (isset($this->displayCountry)) {
            $json['displayCountry']          = $this->displayCountry;
        }
        if (isset($this->displayVariant)) {
            $json['displayVariant']          = $this->displayVariant;
        }
        if (isset($this->language)) {
            $json['language']                = $this->language;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
