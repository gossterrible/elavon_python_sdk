<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class JspPropertyGroupDescriptor implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $buffer;

    /**
     * @var string[]|null
     */
    private $urlPatterns;

    /**
     * @var string|null
     */
    private $elIgnored;

    /**
     * @var string|null
     */
    private $pageEncoding;

    /**
     * @var string|null
     */
    private $scriptingInvalid;

    /**
     * @var string|null
     */
    private $isXml;

    /**
     * @var string[]|null
     */
    private $includePreludes;

    /**
     * @var string[]|null
     */
    private $includeCodas;

    /**
     * @var string|null
     */
    private $deferredSyntaxAllowedAsLiteral;

    /**
     * @var string|null
     */
    private $trimDirectiveWhitespaces;

    /**
     * @var string|null
     */
    private $defaultContentType;

    /**
     * @var string|null
     */
    private $errorOnUndeclaredNamespace;

    /**
     * Returns Buffer.
     */
    public function getBuffer(): ?string
    {
        return $this->buffer;
    }

    /**
     * Sets Buffer.
     *
     * @maps buffer
     */
    public function setBuffer(?string $buffer): void
    {
        $this->buffer = $buffer;
    }

    /**
     * Returns Url Patterns.
     *
     * @return string[]|null
     */
    public function getUrlPatterns(): ?array
    {
        return $this->urlPatterns;
    }

    /**
     * Sets Url Patterns.
     *
     * @maps urlPatterns
     *
     * @param string[]|null $urlPatterns
     */
    public function setUrlPatterns(?array $urlPatterns): void
    {
        $this->urlPatterns = $urlPatterns;
    }

    /**
     * Returns El Ignored.
     */
    public function getElIgnored(): ?string
    {
        return $this->elIgnored;
    }

    /**
     * Sets El Ignored.
     *
     * @maps elIgnored
     */
    public function setElIgnored(?string $elIgnored): void
    {
        $this->elIgnored = $elIgnored;
    }

    /**
     * Returns Page Encoding.
     */
    public function getPageEncoding(): ?string
    {
        return $this->pageEncoding;
    }

    /**
     * Sets Page Encoding.
     *
     * @maps pageEncoding
     */
    public function setPageEncoding(?string $pageEncoding): void
    {
        $this->pageEncoding = $pageEncoding;
    }

    /**
     * Returns Scripting Invalid.
     */
    public function getScriptingInvalid(): ?string
    {
        return $this->scriptingInvalid;
    }

    /**
     * Sets Scripting Invalid.
     *
     * @maps scriptingInvalid
     */
    public function setScriptingInvalid(?string $scriptingInvalid): void
    {
        $this->scriptingInvalid = $scriptingInvalid;
    }

    /**
     * Returns Is Xml.
     */
    public function getIsXml(): ?string
    {
        return $this->isXml;
    }

    /**
     * Sets Is Xml.
     *
     * @maps isXml
     */
    public function setIsXml(?string $isXml): void
    {
        $this->isXml = $isXml;
    }

    /**
     * Returns Include Preludes.
     *
     * @return string[]|null
     */
    public function getIncludePreludes(): ?array
    {
        return $this->includePreludes;
    }

    /**
     * Sets Include Preludes.
     *
     * @maps includePreludes
     *
     * @param string[]|null $includePreludes
     */
    public function setIncludePreludes(?array $includePreludes): void
    {
        $this->includePreludes = $includePreludes;
    }

    /**
     * Returns Include Codas.
     *
     * @return string[]|null
     */
    public function getIncludeCodas(): ?array
    {
        return $this->includeCodas;
    }

    /**
     * Sets Include Codas.
     *
     * @maps includeCodas
     *
     * @param string[]|null $includeCodas
     */
    public function setIncludeCodas(?array $includeCodas): void
    {
        $this->includeCodas = $includeCodas;
    }

    /**
     * Returns Deferred Syntax Allowed as Literal.
     */
    public function getDeferredSyntaxAllowedAsLiteral(): ?string
    {
        return $this->deferredSyntaxAllowedAsLiteral;
    }

    /**
     * Sets Deferred Syntax Allowed as Literal.
     *
     * @maps deferredSyntaxAllowedAsLiteral
     */
    public function setDeferredSyntaxAllowedAsLiteral(?string $deferredSyntaxAllowedAsLiteral): void
    {
        $this->deferredSyntaxAllowedAsLiteral = $deferredSyntaxAllowedAsLiteral;
    }

    /**
     * Returns Trim Directive Whitespaces.
     */
    public function getTrimDirectiveWhitespaces(): ?string
    {
        return $this->trimDirectiveWhitespaces;
    }

    /**
     * Sets Trim Directive Whitespaces.
     *
     * @maps trimDirectiveWhitespaces
     */
    public function setTrimDirectiveWhitespaces(?string $trimDirectiveWhitespaces): void
    {
        $this->trimDirectiveWhitespaces = $trimDirectiveWhitespaces;
    }

    /**
     * Returns Default Content Type.
     */
    public function getDefaultContentType(): ?string
    {
        return $this->defaultContentType;
    }

    /**
     * Sets Default Content Type.
     *
     * @maps defaultContentType
     */
    public function setDefaultContentType(?string $defaultContentType): void
    {
        $this->defaultContentType = $defaultContentType;
    }

    /**
     * Returns Error on Undeclared Namespace.
     */
    public function getErrorOnUndeclaredNamespace(): ?string
    {
        return $this->errorOnUndeclaredNamespace;
    }

    /**
     * Sets Error on Undeclared Namespace.
     *
     * @maps errorOnUndeclaredNamespace
     */
    public function setErrorOnUndeclaredNamespace(?string $errorOnUndeclaredNamespace): void
    {
        $this->errorOnUndeclaredNamespace = $errorOnUndeclaredNamespace;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->buffer)) {
            $json['buffer']                         = $this->buffer;
        }
        if (isset($this->urlPatterns)) {
            $json['urlPatterns']                    = $this->urlPatterns;
        }
        if (isset($this->elIgnored)) {
            $json['elIgnored']                      = $this->elIgnored;
        }
        if (isset($this->pageEncoding)) {
            $json['pageEncoding']                   = $this->pageEncoding;
        }
        if (isset($this->scriptingInvalid)) {
            $json['scriptingInvalid']               = $this->scriptingInvalid;
        }
        if (isset($this->isXml)) {
            $json['isXml']                          = $this->isXml;
        }
        if (isset($this->includePreludes)) {
            $json['includePreludes']                = $this->includePreludes;
        }
        if (isset($this->includeCodas)) {
            $json['includeCodas']                   = $this->includeCodas;
        }
        if (isset($this->deferredSyntaxAllowedAsLiteral)) {
            $json['deferredSyntaxAllowedAsLiteral'] = $this->deferredSyntaxAllowedAsLiteral;
        }
        if (isset($this->trimDirectiveWhitespaces)) {
            $json['trimDirectiveWhitespaces']       = $this->trimDirectiveWhitespaces;
        }
        if (isset($this->defaultContentType)) {
            $json['defaultContentType']             = $this->defaultContentType;
        }
        if (isset($this->errorOnUndeclaredNamespace)) {
            $json['errorOnUndeclaredNamespace']     = $this->errorOnUndeclaredNamespace;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
