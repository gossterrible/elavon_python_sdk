<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class ChainInfo implements \JsonSerializable
{
    /**
     * @var string
     */
    private $chainNumber;

    /**
     * @var string
     */
    private $chainName;

    /**
     * @var string
     */
    private $sendStatementToAddress;

    /**
     * @var string
     */
    private $statementMedia;

    /**
     * @var Address
     */
    private $address;

    /**
     * @var bool
     */
    private $chainLevelBilling;

    /**
     * @var array<string,BankingInfo>
     */
    private $bankAccounts;

    /**
     * @param string $chainNumber
     * @param string $chainName
     * @param string $sendStatementToAddress
     * @param string $statementMedia
     * @param Address $address
     * @param bool $chainLevelBilling
     * @param array<string,BankingInfo> $bankAccounts
     */
    public function __construct(
        string $chainNumber,
        string $chainName,
        string $sendStatementToAddress,
        string $statementMedia,
        Address $address,
        bool $chainLevelBilling,
        array $bankAccounts
    ) {
        $this->chainNumber = $chainNumber;
        $this->chainName = $chainName;
        $this->sendStatementToAddress = $sendStatementToAddress;
        $this->statementMedia = $statementMedia;
        $this->address = $address;
        $this->chainLevelBilling = $chainLevelBilling;
        $this->bankAccounts = $bankAccounts;
    }

    /**
     * Returns Chain Number.
     * Name of new chain to be set up
     */
    public function getChainNumber(): string
    {
        return $this->chainNumber;
    }

    /**
     * Sets Chain Number.
     * Name of new chain to be set up
     *
     * @required
     * @maps chainNumber
     */
    public function setChainNumber(string $chainNumber): void
    {
        $this->chainNumber = $chainNumber;
    }

    /**
     * Returns Chain Name.
     * Number of new chain to be set up
     */
    public function getChainName(): string
    {
        return $this->chainName;
    }

    /**
     * Sets Chain Name.
     * Number of new chain to be set up
     *
     * @required
     * @maps chainName
     */
    public function setChainName(string $chainName): void
    {
        $this->chainName = $chainName;
    }

    /**
     * Returns Send Statement to Address.
     * Address that the new chain's statements will be sent to
     */
    public function getSendStatementToAddress(): string
    {
        return $this->sendStatementToAddress;
    }

    /**
     * Sets Send Statement to Address.
     * Address that the new chain's statements will be sent to
     *
     * @required
     * @maps sendStatementToAddress
     * @factory \SwaggerScarecrowLib\Models\SendStatementToAddressEnum::checkValue
     */
    public function setSendStatementToAddress(string $sendStatementToAddress): void
    {
        $this->sendStatementToAddress = $sendStatementToAddress;
    }

    /**
     * Returns Statement Media.
     * Media type of chain's statements
     */
    public function getStatementMedia(): string
    {
        return $this->statementMedia;
    }

    /**
     * Sets Statement Media.
     * Media type of chain's statements
     *
     * @required
     * @maps statementMedia
     * @factory \SwaggerScarecrowLib\Models\StatementMediaEnum::checkValue
     */
    public function setStatementMedia(string $statementMedia): void
    {
        $this->statementMedia = $statementMedia;
    }

    /**
     * Returns Address.
     */
    public function getAddress(): Address
    {
        return $this->address;
    }

    /**
     * Sets Address.
     *
     * @required
     * @maps address
     */
    public function setAddress(Address $address): void
    {
        $this->address = $address;
    }

    /**
     * Returns Chain Level Billing.
     * Billing level of new chain
     */
    public function getChainLevelBilling(): bool
    {
        return $this->chainLevelBilling;
    }

    /**
     * Sets Chain Level Billing.
     * Billing level of new chain
     *
     * @required
     * @maps chainLevelBilling
     */
    public function setChainLevelBilling(bool $chainLevelBilling): void
    {
        $this->chainLevelBilling = $chainLevelBilling;
    }

    /**
     * Returns Bank Accounts.
     * Chain's bank account information. The valid keys are as follows: BILLING, DEPOSIT, LEASE,
     * CHARGEBACK
     *
     * @return array<string,BankingInfo>
     */
    public function getBankAccounts(): array
    {
        return $this->bankAccounts;
    }

    /**
     * Sets Bank Accounts.
     * Chain's bank account information. The valid keys are as follows: BILLING, DEPOSIT, LEASE,
     * CHARGEBACK
     *
     * @required
     * @maps bankAccounts
     *
     * @param array<string,BankingInfo> $bankAccounts
     */
    public function setBankAccounts(array $bankAccounts): void
    {
        $this->bankAccounts = $bankAccounts;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['chainNumber']            = $this->chainNumber;
        $json['chainName']              = $this->chainName;
        $json['sendStatementToAddress'] = SendStatementToAddressEnum::checkValue($this->sendStatementToAddress);
        $json['statementMedia']         = StatementMediaEnum::checkValue($this->statementMedia);
        $json['address']                = $this->address;
        $json['chainLevelBilling']      = $this->chainLevelBilling;
        $json['bankAccounts']           = $this->bankAccounts;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
