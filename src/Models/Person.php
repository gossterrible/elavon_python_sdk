<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class Person implements \JsonSerializable
{
    /**
     * @var Name
     */
    private $name;

    /**
     * @var ContactInfo|null
     */
    private $contactInfo;

    /**
     * @var DateComponents|null
     */
    private $dob;

    /**
     * @var array<string,bool>
     */
    private $positions;

    /**
     * @var string|null
     */
    private $ownershipPct;

    /**
     * @var Identification[]|null
     */
    private $ids;

    /**
     * @var string|null
     */
    private $titleType;

    /**
     * @var string|null
     */
    private $title;

    /**
     * @var bool|null
     */
    private $signingPersonalGuarantee;

    /**
     * @var bool|null
     */
    private $responsibleParty;

    /**
     * @var bool|null
     */
    private $relatedParty;

    /**
     * @var string|null
     */
    private $residingCountry;

    /**
     * @var string|null
     */
    private $primaryNationality;

    /**
     * @var string|null
     */
    private $secondaryNationality;

    /**
     * @var DocumentaryInfo|null
     */
    private $documentaryInfo;

    /**
     * @var AlternateAddressInfo|null
     */
    private $alternateAddressInfo;

    /**
     * @var bool|null
     */
    private $isNewOwner;

    /**
     * @var string|null
     */
    private $directionalOwnershipType;

    /**
     * @var bool|null
     */
    private $signingAgreement;

    /**
     * @var bool|null
     */
    private $usPerson;

    /**
     * @param Name $name
     * @param array<string,bool> $positions
     */
    public function __construct(Name $name, array $positions)
    {
        $this->name = $name;
        $this->positions = $positions;
    }

    /**
     * Returns Name.
     */
    public function getName(): Name
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(Name $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Contact Info.
     */
    public function getContactInfo(): ?ContactInfo
    {
        return $this->contactInfo;
    }

    /**
     * Sets Contact Info.
     *
     * @maps contactInfo
     */
    public function setContactInfo(?ContactInfo $contactInfo): void
    {
        $this->contactInfo = $contactInfo;
    }

    /**
     * Returns Dob.
     * A container that holds the date (day, month, and year)
     */
    public function getDob(): ?DateComponents
    {
        return $this->dob;
    }

    /**
     * Sets Dob.
     * A container that holds the date (day, month, and year)
     *
     * @maps dob
     */
    public function setDob(?DateComponents $dob): void
    {
        $this->dob = $dob;
    }

    /**
     * Returns Positions.
     * Boolean map representing positions of person, if position applies true should be value given for
     * position key. The valid keys are as follows: OFFICER, PARTNER, DIRECTOR, OWNER, SECRETARY, OTHER,
     * BENEFICIAL_OWNER, AUTHORIZED_SIGNER, SOLE_PROP
     *
     * @return array<string,bool>
     */
    public function getPositions(): array
    {
        return $this->positions;
    }

    /**
     * Sets Positions.
     * Boolean map representing positions of person, if position applies true should be value given for
     * position key. The valid keys are as follows: OFFICER, PARTNER, DIRECTOR, OWNER, SECRETARY, OTHER,
     * BENEFICIAL_OWNER, AUTHORIZED_SIGNER, SOLE_PROP
     *
     * @required
     * @maps positions
     *
     * @param array<string,bool> $positions
     */
    public function setPositions(array $positions): void
    {
        $this->positions = $positions;
    }

    /**
     * Returns Ownership Pct.
     * Ownership percentage of person
     */
    public function getOwnershipPct(): ?string
    {
        return $this->ownershipPct;
    }

    /**
     * Sets Ownership Pct.
     * Ownership percentage of person
     *
     * @maps ownershipPct
     */
    public function setOwnershipPct(?string $ownershipPct): void
    {
        $this->ownershipPct = $ownershipPct;
    }

    /**
     * Returns Ids.
     * Id listing of person
     *
     * @return Identification[]|null
     */
    public function getIds(): ?array
    {
        return $this->ids;
    }

    /**
     * Sets Ids.
     * Id listing of person
     *
     * @maps ids
     *
     * @param Identification[]|null $ids
     */
    public function setIds(?array $ids): void
    {
        $this->ids = $ids;
    }

    /**
     * Returns Title Type.
     * [NA] Title type of person
     */
    public function getTitleType(): ?string
    {
        return $this->titleType;
    }

    /**
     * Sets Title Type.
     * [NA] Title type of person
     *
     * @maps titleType
     * @factory \SwaggerScarecrowLib\Models\TitleTypeEnum::checkValue
     */
    public function setTitleType(?string $titleType): void
    {
        $this->titleType = $titleType;
    }

    /**
     * Returns Title.
     * Free text of person's title, should title type not provide correct option (NA OTHER)
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Free text of person's title, should title type not provide correct option (NA OTHER)
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Signing Personal Guarantee.
     * [NA] Flag indicating if person is signing personal gurantee, true if YES, false if NO
     */
    public function getSigningPersonalGuarantee(): ?bool
    {
        return $this->signingPersonalGuarantee;
    }

    /**
     * Sets Signing Personal Guarantee.
     * [NA] Flag indicating if person is signing personal gurantee, true if YES, false if NO
     *
     * @maps signingPersonalGuarantee
     */
    public function setSigningPersonalGuarantee(?bool $signingPersonalGuarantee): void
    {
        $this->signingPersonalGuarantee = $signingPersonalGuarantee;
    }

    /**
     * Returns Responsible Party.
     * Flag indicating if person is a responsible party of the business, true if YES, false if NO
     */
    public function getResponsibleParty(): ?bool
    {
        return $this->responsibleParty;
    }

    /**
     * Sets Responsible Party.
     * Flag indicating if person is a responsible party of the business, true if YES, false if NO
     *
     * @maps responsibleParty
     */
    public function setResponsibleParty(?bool $responsibleParty): void
    {
        $this->responsibleParty = $responsibleParty;
    }

    /**
     * Returns Related Party.
     * Flag indicating if person is a related party of the business, true if YES, false if NO
     */
    public function getRelatedParty(): ?bool
    {
        return $this->relatedParty;
    }

    /**
     * Sets Related Party.
     * Flag indicating if person is a related party of the business, true if YES, false if NO
     *
     * @maps relatedParty
     */
    public function setRelatedParty(?bool $relatedParty): void
    {
        $this->relatedParty = $relatedParty;
    }

    /**
     * Returns Residing Country.
     * Current country of residence of person, ISO 3166-1 alpha-3 standard applies
     */
    public function getResidingCountry(): ?string
    {
        return $this->residingCountry;
    }

    /**
     * Sets Residing Country.
     * Current country of residence of person, ISO 3166-1 alpha-3 standard applies
     *
     * @maps residingCountry
     */
    public function setResidingCountry(?string $residingCountry): void
    {
        $this->residingCountry = $residingCountry;
    }

    /**
     * Returns Primary Nationality.
     * Primary citizenship/nationality of person, ISO 3166-1 alpha-3 standard applies
     */
    public function getPrimaryNationality(): ?string
    {
        return $this->primaryNationality;
    }

    /**
     * Sets Primary Nationality.
     * Primary citizenship/nationality of person, ISO 3166-1 alpha-3 standard applies
     *
     * @maps primaryNationality
     */
    public function setPrimaryNationality(?string $primaryNationality): void
    {
        $this->primaryNationality = $primaryNationality;
    }

    /**
     * Returns Secondary Nationality.
     * Secondary citizenship/nationality of person, ISO 3166-1 alpha-3 standard applies
     */
    public function getSecondaryNationality(): ?string
    {
        return $this->secondaryNationality;
    }

    /**
     * Sets Secondary Nationality.
     * Secondary citizenship/nationality of person, ISO 3166-1 alpha-3 standard applies
     *
     * @maps secondaryNationality
     */
    public function setSecondaryNationality(?string $secondaryNationality): void
    {
        $this->secondaryNationality = $secondaryNationality;
    }

    /**
     * Returns Documentary Info.
     */
    public function getDocumentaryInfo(): ?DocumentaryInfo
    {
        return $this->documentaryInfo;
    }

    /**
     * Sets Documentary Info.
     *
     * @maps documentaryInfo
     */
    public function setDocumentaryInfo(?DocumentaryInfo $documentaryInfo): void
    {
        $this->documentaryInfo = $documentaryInfo;
    }

    /**
     * Returns Alternate Address Info.
     * Used to hold information about an alternative business address
     */
    public function getAlternateAddressInfo(): ?AlternateAddressInfo
    {
        return $this->alternateAddressInfo;
    }

    /**
     * Sets Alternate Address Info.
     * Used to hold information about an alternative business address
     *
     * @maps alternateAddressInfo
     */
    public function setAlternateAddressInfo(?AlternateAddressInfo $alternateAddressInfo): void
    {
        $this->alternateAddressInfo = $alternateAddressInfo;
    }

    /**
     * Returns Is New Owner.
     * [EU] Flag indicating if person is a new owner of the buisness, true if YES, false if NO
     */
    public function getIsNewOwner(): ?bool
    {
        return $this->isNewOwner;
    }

    /**
     * Sets Is New Owner.
     * [EU] Flag indicating if person is a new owner of the buisness, true if YES, false if NO
     *
     * @maps isNewOwner
     */
    public function setIsNewOwner(?bool $isNewOwner): void
    {
        $this->isNewOwner = $isNewOwner;
    }

    /**
     * Returns Directional Ownership Type.
     * [EU] Indicator if person has direct or indirect ownership of business
     */
    public function getDirectionalOwnershipType(): ?string
    {
        return $this->directionalOwnershipType;
    }

    /**
     * Sets Directional Ownership Type.
     * [EU] Indicator if person has direct or indirect ownership of business
     *
     * @maps directionalOwnershipType
     * @factory \SwaggerScarecrowLib\Models\DirectionalOwnershipTypeEnum::checkValue
     */
    public function setDirectionalOwnershipType(?string $directionalOwnershipType): void
    {
        $this->directionalOwnershipType = $directionalOwnershipType;
    }

    /**
     * Returns Signing Agreement.
     * Flag indicating if person if signing the agreement, true if YES, false if NO
     */
    public function getSigningAgreement(): ?bool
    {
        return $this->signingAgreement;
    }

    /**
     * Sets Signing Agreement.
     * Flag indicating if person if signing the agreement, true if YES, false if NO
     *
     * @maps signingAgreement
     */
    public function setSigningAgreement(?bool $signingAgreement): void
    {
        $this->signingAgreement = $signingAgreement;
    }

    /**
     * Returns Us Person.
     * [NA] Flag indicating if person is a US citizen, true if YES, false if NO
     */
    public function getUsPerson(): ?bool
    {
        return $this->usPerson;
    }

    /**
     * Sets Us Person.
     * [NA] Flag indicating if person is a US citizen, true if YES, false if NO
     *
     * @maps usPerson
     */
    public function setUsPerson(?bool $usPerson): void
    {
        $this->usPerson = $usPerson;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['name']                         = $this->name;
        if (isset($this->contactInfo)) {
            $json['contactInfo']              = $this->contactInfo;
        }
        if (isset($this->dob)) {
            $json['dob']                      = $this->dob;
        }
        $json['positions']                    = $this->positions;
        if (isset($this->ownershipPct)) {
            $json['ownershipPct']             = $this->ownershipPct;
        }
        if (isset($this->ids)) {
            $json['ids']                      = $this->ids;
        }
        if (isset($this->titleType)) {
            $json['titleType']                = TitleTypeEnum::checkValue($this->titleType);
        }
        if (isset($this->title)) {
            $json['title']                    = $this->title;
        }
        if (isset($this->signingPersonalGuarantee)) {
            $json['signingPersonalGuarantee'] = $this->signingPersonalGuarantee;
        }
        if (isset($this->responsibleParty)) {
            $json['responsibleParty']         = $this->responsibleParty;
        }
        if (isset($this->relatedParty)) {
            $json['relatedParty']             = $this->relatedParty;
        }
        if (isset($this->residingCountry)) {
            $json['residingCountry']          = $this->residingCountry;
        }
        if (isset($this->primaryNationality)) {
            $json['primaryNationality']       = $this->primaryNationality;
        }
        if (isset($this->secondaryNationality)) {
            $json['secondaryNationality']     = $this->secondaryNationality;
        }
        if (isset($this->documentaryInfo)) {
            $json['documentaryInfo']          = $this->documentaryInfo;
        }
        if (isset($this->alternateAddressInfo)) {
            $json['alternateAddressInfo']     = $this->alternateAddressInfo;
        }
        if (isset($this->isNewOwner)) {
            $json['isNewOwner']               = $this->isNewOwner;
        }
        if (isset($this->directionalOwnershipType)) {
            $json['directionalOwnershipType'] =
                DirectionalOwnershipTypeEnum::checkValue(
                    $this->directionalOwnershipType
                );
        }
        if (isset($this->signingAgreement)) {
            $json['signingAgreement']         = $this->signingAgreement;
        }
        if (isset($this->usPerson)) {
            $json['usPerson']                 = $this->usPerson;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
