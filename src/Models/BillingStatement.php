<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class BillingStatement implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $media;

    /**
     * @var string|null
     */
    private $addressType;

    /**
     * @var string|null
     */
    private $emailAddress;

    /**
     * @var string|null
     */
    private $frequency;

    /**
     * @param string $type
     * @param string $media
     */
    public function __construct(string $type, string $media)
    {
        $this->type = $type;
        $this->media = $media;
    }

    /**
     * Returns Type.
     * Billing statement format type
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Billing statement format type
     *
     * @required
     * @maps type
     * @factory \SwaggerScarecrowLib\Models\Type2Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Media.
     * Billing statement media type
     */
    public function getMedia(): string
    {
        return $this->media;
    }

    /**
     * Sets Media.
     * Billing statement media type
     *
     * @required
     * @maps media
     * @factory \SwaggerScarecrowLib\Models\MediaEnum::checkValue
     */
    public function setMedia(string $media): void
    {
        $this->media = $media;
    }

    /**
     * Returns Address Type.
     * [NA] Billing statement address, required should type and media indicate a mailed form
     */
    public function getAddressType(): ?string
    {
        return $this->addressType;
    }

    /**
     * Sets Address Type.
     * [NA] Billing statement address, required should type and media indicate a mailed form
     *
     * @maps addressType
     * @factory \SwaggerScarecrowLib\Models\AddressTypeEnum::checkValue
     */
    public function setAddressType(?string $addressType): void
    {
        $this->addressType = $addressType;
    }

    /**
     * Returns Email Address.
     * [EU] Billing statement email address, required should type and media indicate an emailed form
     */
    public function getEmailAddress(): ?string
    {
        return $this->emailAddress;
    }

    /**
     * Sets Email Address.
     * [EU] Billing statement email address, required should type and media indicate an emailed form
     *
     * @maps emailAddress
     */
    public function setEmailAddress(?string $emailAddress): void
    {
        $this->emailAddress = $emailAddress;
    }

    /**
     * Returns Frequency.
     * [EU] Frequency at which statement is provided
     */
    public function getFrequency(): ?string
    {
        return $this->frequency;
    }

    /**
     * Sets Frequency.
     * [EU] Frequency at which statement is provided
     *
     * @maps frequency
     * @factory \SwaggerScarecrowLib\Models\Frequency1Enum::checkValue
     */
    public function setFrequency(?string $frequency): void
    {
        $this->frequency = $frequency;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']             = Type2Enum::checkValue($this->type);
        $json['media']            = MediaEnum::checkValue($this->media);
        if (isset($this->addressType)) {
            $json['addressType']  = AddressTypeEnum::checkValue($this->addressType);
        }
        if (isset($this->emailAddress)) {
            $json['emailAddress'] = $this->emailAddress;
        }
        if (isset($this->frequency)) {
            $json['frequency']    = Frequency1Enum::checkValue($this->frequency);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
