<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;
use SwaggerScarecrowLib\Utils\DateTimeHelper;

class ImageDocument implements \JsonSerializable
{
    /**
     * @var int
     */
    private $imageId;

    /**
     * @var string
     */
    private $imageTypeCode;

    /**
     * @var string
     */
    private $dbaName;

    /**
     * @var \DateTime|null
     */
    private $scanDate;

    /**
     * @var string
     */
    private $mimeTypeCode;

    /**
     * @var string[]
     */
    private $imageContent;

    /**
     * @var AdditionalDocumentFields[]|null
     */
    private $additionalDocumentFields;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $category;

    /**
     * @param int $imageId
     * @param string $imageTypeCode
     * @param string $dbaName
     * @param string $mimeTypeCode
     * @param string[] $imageContent
     */
    public function __construct(
        int $imageId,
        string $imageTypeCode,
        string $dbaName,
        string $mimeTypeCode,
        array $imageContent
    ) {
        $this->imageId = $imageId;
        $this->imageTypeCode = $imageTypeCode;
        $this->dbaName = $dbaName;
        $this->mimeTypeCode = $mimeTypeCode;
        $this->imageContent = $imageContent;
    }

    /**
     * Returns Image Id.
     * Unique identifier of document
     */
    public function getImageId(): int
    {
        return $this->imageId;
    }

    /**
     * Sets Image Id.
     * Unique identifier of document
     *
     * @required
     * @maps imageId
     */
    public function setImageId(int $imageId): void
    {
        $this->imageId = $imageId;
    }

    /**
     * Returns Image Type Code.
     * Type of document to upload, default to "APPLI"
     */
    public function getImageTypeCode(): string
    {
        return $this->imageTypeCode;
    }

    /**
     * Sets Image Type Code.
     * Type of document to upload, default to "APPLI"
     *
     * @required
     * @maps imageTypeCode
     */
    public function setImageTypeCode(string $imageTypeCode): void
    {
        $this->imageTypeCode = $imageTypeCode;
    }

    /**
     * Returns Dba Name.
     * DBA name of application submission document is to be associated with
     */
    public function getDbaName(): string
    {
        return $this->dbaName;
    }

    /**
     * Sets Dba Name.
     * DBA name of application submission document is to be associated with
     *
     * @required
     * @maps dbaName
     */
    public function setDbaName(string $dbaName): void
    {
        $this->dbaName = $dbaName;
    }

    /**
     * Returns Scan Date.
     * Date document was scanned
     */
    public function getScanDate(): ?\DateTime
    {
        return $this->scanDate;
    }

    /**
     * Sets Scan Date.
     * Date document was scanned
     *
     * @maps scanDate
     * @factory \SwaggerScarecrowLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setScanDate(?\DateTime $scanDate): void
    {
        $this->scanDate = $scanDate;
    }

    /**
     * Returns Mime Type Code.
     * MIME type
     */
    public function getMimeTypeCode(): string
    {
        return $this->mimeTypeCode;
    }

    /**
     * Sets Mime Type Code.
     * MIME type
     *
     * @required
     * @maps mimeTypeCode
     * @factory \SwaggerScarecrowLib\Models\MimeTypeCodeEnum::checkValue
     */
    public function setMimeTypeCode(string $mimeTypeCode): void
    {
        $this->mimeTypeCode = $mimeTypeCode;
    }

    /**
     * Returns Image Content.
     * Base 64 encoded document
     *
     * @return string[]
     */
    public function getImageContent(): array
    {
        return $this->imageContent;
    }

    /**
     * Sets Image Content.
     * Base 64 encoded document
     *
     * @required
     * @maps imageContent
     *
     * @param string[] $imageContent
     */
    public function setImageContent(array $imageContent): void
    {
        $this->imageContent = $imageContent;
    }

    /**
     * Returns Additional Document Fields.
     * Additional lable specifications
     *
     * @return AdditionalDocumentFields[]|null
     */
    public function getAdditionalDocumentFields(): ?array
    {
        return $this->additionalDocumentFields;
    }

    /**
     * Sets Additional Document Fields.
     * Additional lable specifications
     *
     * @maps additionalDocumentFields
     *
     * @param AdditionalDocumentFields[]|null $additionalDocumentFields
     */
    public function setAdditionalDocumentFields(?array $additionalDocumentFields): void
    {
        $this->additionalDocumentFields = $additionalDocumentFields;
    }

    /**
     * Returns Name.
     * Document name
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Document name
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Category.
     * Document Category
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
     * Sets Category.
     * Document Category
     *
     * @maps category
     * @factory \SwaggerScarecrowLib\Models\CategoryEnum::checkValue
     */
    public function setCategory(?string $category): void
    {
        $this->category = $category;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['imageId']                      = $this->imageId;
        $json['imageTypeCode']                = $this->imageTypeCode;
        $json['dbaName']                      = $this->dbaName;
        if (isset($this->scanDate)) {
            $json['scanDate']                 = DateTimeHelper::toRfc3339DateTime($this->scanDate);
        }
        $json['mimeTypeCode']                 = MimeTypeCodeEnum::checkValue($this->mimeTypeCode);
        $json['imageContent']                 = $this->imageContent;
        if (isset($this->additionalDocumentFields)) {
            $json['additionalDocumentFields'] = $this->additionalDocumentFields;
        }
        if (isset($this->name)) {
            $json['name']                     = $this->name;
        }
        if (isset($this->category)) {
            $json['category']                 = CategoryEnum::checkValue($this->category);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
