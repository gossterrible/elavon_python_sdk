<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class Module implements \JsonSerializable
{
    /**
     * @var array|null
     */
    private $layer;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var ModuleDescriptor|null
     */
    private $descriptor;

    /**
     * @var ClassLoader|null
     */
    private $classLoader;

    /**
     * @var array[]|null
     */
    private $annotations;

    /**
     * @var array[]|null
     */
    private $declaredAnnotations;

    /**
     * @var bool|null
     */
    private $named;

    /**
     * @var string[]|null
     */
    private $packages;

    /**
     * Returns Layer.
     */
    public function getLayer(): ?array
    {
        return $this->layer;
    }

    /**
     * Sets Layer.
     *
     * @maps layer
     */
    public function setLayer(?array $layer): void
    {
        $this->layer = $layer;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Descriptor.
     */
    public function getDescriptor(): ?ModuleDescriptor
    {
        return $this->descriptor;
    }

    /**
     * Sets Descriptor.
     *
     * @maps descriptor
     */
    public function setDescriptor(?ModuleDescriptor $descriptor): void
    {
        $this->descriptor = $descriptor;
    }

    /**
     * Returns Class Loader.
     */
    public function getClassLoader(): ?ClassLoader
    {
        return $this->classLoader;
    }

    /**
     * Sets Class Loader.
     *
     * @maps classLoader
     */
    public function setClassLoader(?ClassLoader $classLoader): void
    {
        $this->classLoader = $classLoader;
    }

    /**
     * Returns Annotations.
     *
     * @return array[]|null
     */
    public function getAnnotations(): ?array
    {
        return $this->annotations;
    }

    /**
     * Sets Annotations.
     *
     * @maps annotations
     *
     * @param array[]|null $annotations
     */
    public function setAnnotations(?array $annotations): void
    {
        $this->annotations = $annotations;
    }

    /**
     * Returns Declared Annotations.
     *
     * @return array[]|null
     */
    public function getDeclaredAnnotations(): ?array
    {
        return $this->declaredAnnotations;
    }

    /**
     * Sets Declared Annotations.
     *
     * @maps declaredAnnotations
     *
     * @param array[]|null $declaredAnnotations
     */
    public function setDeclaredAnnotations(?array $declaredAnnotations): void
    {
        $this->declaredAnnotations = $declaredAnnotations;
    }

    /**
     * Returns Named.
     */
    public function getNamed(): ?bool
    {
        return $this->named;
    }

    /**
     * Sets Named.
     *
     * @maps named
     */
    public function setNamed(?bool $named): void
    {
        $this->named = $named;
    }

    /**
     * Returns Packages.
     *
     * @return string[]|null
     */
    public function getPackages(): ?array
    {
        return $this->packages;
    }

    /**
     * Sets Packages.
     *
     * @maps packages
     *
     * @param string[]|null $packages
     */
    public function setPackages(?array $packages): void
    {
        $this->packages = $packages;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->layer)) {
            $json['layer']               = $this->layer;
        }
        if (isset($this->name)) {
            $json['name']                = $this->name;
        }
        if (isset($this->descriptor)) {
            $json['descriptor']          = $this->descriptor;
        }
        if (isset($this->classLoader)) {
            $json['classLoader']         = $this->classLoader;
        }
        if (isset($this->annotations)) {
            $json['annotations']         = $this->annotations;
        }
        if (isset($this->declaredAnnotations)) {
            $json['declaredAnnotations'] = $this->declaredAnnotations;
        }
        if (isset($this->named)) {
            $json['named']               = $this->named;
        }
        if (isset($this->packages)) {
            $json['packages']            = $this->packages;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
