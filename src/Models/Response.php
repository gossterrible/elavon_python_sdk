<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;
use SwaggerScarecrowLib\Utils\DateTimeHelper;

class Response implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $lastModified;

    /**
     * @var \DateTime|null
     */
    private $date;

    /**
     * @var int|null
     */
    private $length;

    /**
     * @var string|null
     */
    private $location;

    /**
     * @var Locale|null
     */
    private $language;

    /**
     * @var array<string,NewCookie>|null
     */
    private $cookies;

    /**
     * @var MediaType|null
     */
    private $mediaType;

    /**
     * @var array|null
     */
    private $entity;

    /**
     * @var Link[]|null
     */
    private $links;

    /**
     * @var int|null
     */
    private $status;

    /**
     * @var EntityTag|null
     */
    private $entityTag;

    /**
     * @var array|null
     */
    private $stringHeaders;

    /**
     * @var array|null
     */
    private $metadata;

    /**
     * @var StatusType|null
     */
    private $statusInfo;

    /**
     * @var string[]|null
     */
    private $allowedMethods;

    /**
     * @var array|null
     */
    private $headers;

    /**
     * Returns Last Modified.
     */
    public function getLastModified(): ?\DateTime
    {
        return $this->lastModified;
    }

    /**
     * Sets Last Modified.
     *
     * @maps lastModified
     * @factory \SwaggerScarecrowLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastModified(?\DateTime $lastModified): void
    {
        $this->lastModified = $lastModified;
    }

    /**
     * Returns Date.
     */
    public function getDate(): ?\DateTime
    {
        return $this->date;
    }

    /**
     * Sets Date.
     *
     * @maps date
     * @factory \SwaggerScarecrowLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDate(?\DateTime $date): void
    {
        $this->date = $date;
    }

    /**
     * Returns Length.
     */
    public function getLength(): ?int
    {
        return $this->length;
    }

    /**
     * Sets Length.
     *
     * @maps length
     */
    public function setLength(?int $length): void
    {
        $this->length = $length;
    }

    /**
     * Returns Location.
     */
    public function getLocation(): ?string
    {
        return $this->location;
    }

    /**
     * Sets Location.
     *
     * @maps location
     */
    public function setLocation(?string $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns Language.
     */
    public function getLanguage(): ?Locale
    {
        return $this->language;
    }

    /**
     * Sets Language.
     *
     * @maps language
     */
    public function setLanguage(?Locale $language): void
    {
        $this->language = $language;
    }

    /**
     * Returns Cookies.
     *
     * @return array<string,NewCookie>|null
     */
    public function getCookies(): ?array
    {
        return $this->cookies;
    }

    /**
     * Sets Cookies.
     *
     * @maps cookies
     *
     * @param array<string,NewCookie>|null $cookies
     */
    public function setCookies(?array $cookies): void
    {
        $this->cookies = $cookies;
    }

    /**
     * Returns Media Type.
     */
    public function getMediaType(): ?MediaType
    {
        return $this->mediaType;
    }

    /**
     * Sets Media Type.
     *
     * @maps mediaType
     */
    public function setMediaType(?MediaType $mediaType): void
    {
        $this->mediaType = $mediaType;
    }

    /**
     * Returns Entity.
     */
    public function getEntity(): ?array
    {
        return $this->entity;
    }

    /**
     * Sets Entity.
     *
     * @maps entity
     */
    public function setEntity(?array $entity): void
    {
        $this->entity = $entity;
    }

    /**
     * Returns Links.
     *
     * @return Link[]|null
     */
    public function getLinks(): ?array
    {
        return $this->links;
    }

    /**
     * Sets Links.
     *
     * @maps links
     *
     * @param Link[]|null $links
     */
    public function setLinks(?array $links): void
    {
        $this->links = $links;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?int
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?int $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Entity Tag.
     */
    public function getEntityTag(): ?EntityTag
    {
        return $this->entityTag;
    }

    /**
     * Sets Entity Tag.
     *
     * @maps entityTag
     */
    public function setEntityTag(?EntityTag $entityTag): void
    {
        $this->entityTag = $entityTag;
    }

    /**
     * Returns String Headers.
     */
    public function getStringHeaders(): ?array
    {
        return $this->stringHeaders;
    }

    /**
     * Sets String Headers.
     *
     * @maps stringHeaders
     */
    public function setStringHeaders(?array $stringHeaders): void
    {
        $this->stringHeaders = $stringHeaders;
    }

    /**
     * Returns Metadata.
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     *
     * @maps metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Status Info.
     */
    public function getStatusInfo(): ?StatusType
    {
        return $this->statusInfo;
    }

    /**
     * Sets Status Info.
     *
     * @maps statusInfo
     */
    public function setStatusInfo(?StatusType $statusInfo): void
    {
        $this->statusInfo = $statusInfo;
    }

    /**
     * Returns Allowed Methods.
     *
     * @return string[]|null
     */
    public function getAllowedMethods(): ?array
    {
        return $this->allowedMethods;
    }

    /**
     * Sets Allowed Methods.
     *
     * @maps allowedMethods
     *
     * @param string[]|null $allowedMethods
     */
    public function setAllowedMethods(?array $allowedMethods): void
    {
        $this->allowedMethods = $allowedMethods;
    }

    /**
     * Returns Headers.
     */
    public function getHeaders(): ?array
    {
        return $this->headers;
    }

    /**
     * Sets Headers.
     *
     * @maps headers
     */
    public function setHeaders(?array $headers): void
    {
        $this->headers = $headers;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->lastModified)) {
            $json['lastModified']   = DateTimeHelper::toRfc3339DateTime($this->lastModified);
        }
        if (isset($this->date)) {
            $json['date']           = DateTimeHelper::toRfc3339DateTime($this->date);
        }
        if (isset($this->length)) {
            $json['length']         = $this->length;
        }
        if (isset($this->location)) {
            $json['location']       = $this->location;
        }
        if (isset($this->language)) {
            $json['language']       = $this->language;
        }
        if (isset($this->cookies)) {
            $json['cookies']        = $this->cookies;
        }
        if (isset($this->mediaType)) {
            $json['mediaType']      = $this->mediaType;
        }
        if (isset($this->entity)) {
            $json['entity']         = $this->entity;
        }
        if (isset($this->links)) {
            $json['links']          = $this->links;
        }
        if (isset($this->status)) {
            $json['status']         = $this->status;
        }
        if (isset($this->entityTag)) {
            $json['entityTag']      = $this->entityTag;
        }
        if (isset($this->stringHeaders)) {
            $json['stringHeaders']  = $this->stringHeaders;
        }
        if (isset($this->metadata)) {
            $json['metadata']       = $this->metadata;
        }
        if (isset($this->statusInfo)) {
            $json['statusInfo']     = $this->statusInfo;
        }
        if (isset($this->allowedMethods)) {
            $json['allowedMethods'] = $this->allowedMethods;
        }
        if (isset($this->headers)) {
            $json['headers']        = $this->headers;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
