<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

/**
 * In NA, it's mandatory to have at least one piece of equipment. For third party vendors
 * managing their own equipment, at least one Value Added Reseller (VAR) code must be sent.
 * Contact your Elavon representative for the VAR code(s).
 *
 * In EU, equipmentInfo is optional and no equipment has to be sent. If you have any
 * equipment
 * managed by Elavon, contact your Elavon representative for the VAR code(s).
 */
class EquipmentInfo implements \JsonSerializable
{
    /**
     * @var EquipmentItem[]
     */
    private $equipmentItems;

    /**
     * @var TerminalService[]|null
     */
    private $terminalServices;

    /**
     * @var string|null
     */
    private $trainingType;

    /**
     * @var string|null
     */
    private $shippingMethod;

    /**
     * @var string|null
     */
    private $network;

    /**
     * @var FuseboxInfo
     */
    private $fuseboxInfo;

    /**
     * @var DateComponents|null
     */
    private $anticipatedStartDate;

    /**
     * @param EquipmentItem[] $equipmentItems
     * @param FuseboxInfo $fuseboxInfo
     */
    public function __construct(array $equipmentItems, FuseboxInfo $fuseboxInfo)
    {
        $this->equipmentItems = $equipmentItems;
        $this->fuseboxInfo = $fuseboxInfo;
    }

    /**
     * Returns Equipment Items.
     * Equipment item listing
     *
     * @return EquipmentItem[]
     */
    public function getEquipmentItems(): array
    {
        return $this->equipmentItems;
    }

    /**
     * Sets Equipment Items.
     * Equipment item listing
     *
     * @required
     * @maps equipmentItems
     *
     * @param EquipmentItem[] $equipmentItems
     */
    public function setEquipmentItems(array $equipmentItems): void
    {
        $this->equipmentItems = $equipmentItems;
    }

    /**
     * Returns Terminal Services.
     * Terminal services to be applied to equipment items
     *
     * @return TerminalService[]|null
     */
    public function getTerminalServices(): ?array
    {
        return $this->terminalServices;
    }

    /**
     * Sets Terminal Services.
     * Terminal services to be applied to equipment items
     *
     * @maps terminalServices
     *
     * @param TerminalService[]|null $terminalServices
     */
    public function setTerminalServices(?array $terminalServices): void
    {
        $this->terminalServices = $terminalServices;
    }

    /**
     * Returns Training Type.
     * [NA] Type of training to be given for equipment
     */
    public function getTrainingType(): ?string
    {
        return $this->trainingType;
    }

    /**
     * Sets Training Type.
     * [NA] Type of training to be given for equipment
     *
     * @maps trainingType
     * @factory \SwaggerScarecrowLib\Models\TrainingTypeEnum::checkValue
     */
    public function setTrainingType(?string $trainingType): void
    {
        $this->trainingType = $trainingType;
    }

    /**
     * Returns Shipping Method.
     * Shipping of equipment priority
     */
    public function getShippingMethod(): ?string
    {
        return $this->shippingMethod;
    }

    /**
     * Sets Shipping Method.
     * Shipping of equipment priority
     *
     * @maps shippingMethod
     * @factory \SwaggerScarecrowLib\Models\ShippingMethodEnum::checkValue
     */
    public function setShippingMethod(?string $shippingMethod): void
    {
        $this->shippingMethod = $shippingMethod;
    }

    /**
     * Returns Network.
     * Network equipment will be connected to
     */
    public function getNetwork(): ?string
    {
        return $this->network;
    }

    /**
     * Sets Network.
     * Network equipment will be connected to
     *
     * @maps network
     * @factory \SwaggerScarecrowLib\Models\NetworkEnum::checkValue
     */
    public function setNetwork(?string $network): void
    {
        $this->network = $network;
    }

    /**
     * Returns Fusebox Info.
     */
    public function getFuseboxInfo(): FuseboxInfo
    {
        return $this->fuseboxInfo;
    }

    /**
     * Sets Fusebox Info.
     *
     * @required
     * @maps fuseboxInfo
     */
    public function setFuseboxInfo(FuseboxInfo $fuseboxInfo): void
    {
        $this->fuseboxInfo = $fuseboxInfo;
    }

    /**
     * Returns Anticipated Start Date.
     * A container that holds the date (day, month, and year)
     */
    public function getAnticipatedStartDate(): ?DateComponents
    {
        return $this->anticipatedStartDate;
    }

    /**
     * Sets Anticipated Start Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps anticipatedStartDate
     */
    public function setAnticipatedStartDate(?DateComponents $anticipatedStartDate): void
    {
        $this->anticipatedStartDate = $anticipatedStartDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['equipmentItems']           = $this->equipmentItems;
        if (isset($this->terminalServices)) {
            $json['terminalServices']     = $this->terminalServices;
        }
        if (isset($this->trainingType)) {
            $json['trainingType']         = TrainingTypeEnum::checkValue($this->trainingType);
        }
        if (isset($this->shippingMethod)) {
            $json['shippingMethod']       = ShippingMethodEnum::checkValue($this->shippingMethod);
        }
        if (isset($this->network)) {
            $json['network']              = NetworkEnum::checkValue($this->network);
        }
        $json['fuseboxInfo']              = $this->fuseboxInfo;
        if (isset($this->anticipatedStartDate)) {
            $json['anticipatedStartDate'] = $this->anticipatedStartDate;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
