<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class AmexDocumentInput implements \JsonSerializable
{
    /**
     * @var string
     */
    private $language;

    /**
     * @var string
     */
    private $documentId;

    /**
     * @var string|null
     */
    private $agreementId;

    /**
     * @var string|null
     */
    private $documentPacketId;

    /**
     * @var bool|null
     */
    private $signed;

    /**
     * @var bool|null
     */
    private $groupedApplication;

    /**
     * @var bool|null
     */
    private $wetSigned;

    /**
     * @var CardPricing
     */
    private $cardPricing;

    /**
     * @var BusinessInfo
     */
    private $businessInfo;

    /**
     * @var string|null
     */
    private $monetaryPricingProgram;

    /**
     * @var array<string,BankingInfo>
     */
    private $bankAccounts;

    /**
     * @var string
     */
    private $applicantEmail;

    /**
     * @var Person
     */
    private $principal;

    /**
     * @var Person[]|null
     */
    private $additionalShareholders;

    /**
     * @param string $language
     * @param string $documentId
     * @param CardPricing $cardPricing
     * @param BusinessInfo $businessInfo
     * @param array<string,BankingInfo> $bankAccounts
     * @param string $applicantEmail
     * @param Person $principal
     */
    public function __construct(
        string $language,
        string $documentId,
        CardPricing $cardPricing,
        BusinessInfo $businessInfo,
        array $bankAccounts,
        string $applicantEmail,
        Person $principal
    ) {
        $this->language = $language;
        $this->documentId = $documentId;
        $this->cardPricing = $cardPricing;
        $this->businessInfo = $businessInfo;
        $this->bankAccounts = $bankAccounts;
        $this->applicantEmail = $applicantEmail;
        $this->principal = $principal;
    }

    /**
     * Returns Language.
     * Language of document to be generated,  ISO 639-1 standard applies
     */
    public function getLanguage(): string
    {
        return $this->language;
    }

    /**
     * Sets Language.
     * Language of document to be generated,  ISO 639-1 standard applies
     *
     * @required
     * @maps language
     */
    public function setLanguage(string $language): void
    {
        $this->language = $language;
    }

    /**
     * Returns Document Id.
     * Unique id of document
     */
    public function getDocumentId(): string
    {
        return $this->documentId;
    }

    /**
     * Sets Document Id.
     * Unique id of document
     *
     * @required
     * @maps documentId
     */
    public function setDocumentId(string $documentId): void
    {
        $this->documentId = $documentId;
    }

    /**
     * Returns Agreement Id.
     * Merchant id (MID)
     */
    public function getAgreementId(): ?string
    {
        return $this->agreementId;
    }

    /**
     * Sets Agreement Id.
     * Merchant id (MID)
     *
     * @maps agreementId
     */
    public function setAgreementId(?string $agreementId): void
    {
        $this->agreementId = $agreementId;
    }

    /**
     * Returns Document Packet Id.
     * Document packet id
     */
    public function getDocumentPacketId(): ?string
    {
        return $this->documentPacketId;
    }

    /**
     * Sets Document Packet Id.
     * Document packet id
     *
     * @maps documentPacketId
     */
    public function setDocumentPacketId(?string $documentPacketId): void
    {
        $this->documentPacketId = $documentPacketId;
    }

    /**
     * Returns Signed.
     * Boolean flag indicating if document has been signed, true if  YES, false if NO
     */
    public function getSigned(): ?bool
    {
        return $this->signed;
    }

    /**
     * Sets Signed.
     * Boolean flag indicating if document has been signed, true if  YES, false if NO
     *
     * @maps signed
     */
    public function setSigned(?bool $signed): void
    {
        $this->signed = $signed;
    }

    /**
     * Returns Grouped Application.
     * Boolean flag indicating if document is of a group of applications, true if  YES, false if NO
     */
    public function getGroupedApplication(): ?bool
    {
        return $this->groupedApplication;
    }

    /**
     * Sets Grouped Application.
     * Boolean flag indicating if document is of a group of applications, true if  YES, false if NO
     *
     * @maps groupedApplication
     */
    public function setGroupedApplication(?bool $groupedApplication): void
    {
        $this->groupedApplication = $groupedApplication;
    }

    /**
     * Returns Wet Signed.
     * Boolean flag indicating if document is to be wet signed, true if  YES, false if NO
     */
    public function getWetSigned(): ?bool
    {
        return $this->wetSigned;
    }

    /**
     * Sets Wet Signed.
     * Boolean flag indicating if document is to be wet signed, true if  YES, false if NO
     *
     * @maps wetSigned
     */
    public function setWetSigned(?bool $wetSigned): void
    {
        $this->wetSigned = $wetSigned;
    }

    /**
     * Returns Card Pricing.
     */
    public function getCardPricing(): CardPricing
    {
        return $this->cardPricing;
    }

    /**
     * Sets Card Pricing.
     *
     * @required
     * @maps cardPricing
     */
    public function setCardPricing(CardPricing $cardPricing): void
    {
        $this->cardPricing = $cardPricing;
    }

    /**
     * Returns Business Info.
     */
    public function getBusinessInfo(): BusinessInfo
    {
        return $this->businessInfo;
    }

    /**
     * Sets Business Info.
     *
     * @required
     * @maps businessInfo
     */
    public function setBusinessInfo(BusinessInfo $businessInfo): void
    {
        $this->businessInfo = $businessInfo;
    }

    /**
     * Returns Monetary Pricing Program.
     * Application's monetary pricing program (MPP)
     */
    public function getMonetaryPricingProgram(): ?string
    {
        return $this->monetaryPricingProgram;
    }

    /**
     * Sets Monetary Pricing Program.
     * Application's monetary pricing program (MPP)
     *
     * @maps monetaryPricingProgram
     */
    public function setMonetaryPricingProgram(?string $monetaryPricingProgram): void
    {
        $this->monetaryPricingProgram = $monetaryPricingProgram;
    }

    /**
     * Returns Bank Accounts.
     * Application's banking information. The valid keys are as follows: BILLING, DEPOSIT, LEASE,
     * CHARGEBACK
     *
     * @return array<string,BankingInfo>
     */
    public function getBankAccounts(): array
    {
        return $this->bankAccounts;
    }

    /**
     * Sets Bank Accounts.
     * Application's banking information. The valid keys are as follows: BILLING, DEPOSIT, LEASE,
     * CHARGEBACK
     *
     * @required
     * @maps bankAccounts
     *
     * @param array<string,BankingInfo> $bankAccounts
     */
    public function setBankAccounts(array $bankAccounts): void
    {
        $this->bankAccounts = $bankAccounts;
    }

    /**
     * Returns Applicant Email.
     * Email address of applicant
     */
    public function getApplicantEmail(): string
    {
        return $this->applicantEmail;
    }

    /**
     * Sets Applicant Email.
     * Email address of applicant
     *
     * @required
     * @maps applicantEmail
     */
    public function setApplicantEmail(string $applicantEmail): void
    {
        $this->applicantEmail = $applicantEmail;
    }

    /**
     * Returns Principal.
     */
    public function getPrincipal(): Person
    {
        return $this->principal;
    }

    /**
     * Sets Principal.
     *
     * @required
     * @maps principal
     */
    public function setPrincipal(Person $principal): void
    {
        $this->principal = $principal;
    }

    /**
     * Returns Additional Shareholders.
     * Application's additional shareholders
     *
     * @return Person[]|null
     */
    public function getAdditionalShareholders(): ?array
    {
        return $this->additionalShareholders;
    }

    /**
     * Sets Additional Shareholders.
     * Application's additional shareholders
     *
     * @maps additionalShareholders
     *
     * @param Person[]|null $additionalShareholders
     */
    public function setAdditionalShareholders(?array $additionalShareholders): void
    {
        $this->additionalShareholders = $additionalShareholders;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['language']                   = $this->language;
        $json['documentId']                 = $this->documentId;
        if (isset($this->agreementId)) {
            $json['agreementId']            = $this->agreementId;
        }
        if (isset($this->documentPacketId)) {
            $json['documentPacketId']       = $this->documentPacketId;
        }
        if (isset($this->signed)) {
            $json['signed']                 = $this->signed;
        }
        if (isset($this->groupedApplication)) {
            $json['groupedApplication']     = $this->groupedApplication;
        }
        if (isset($this->wetSigned)) {
            $json['wetSigned']              = $this->wetSigned;
        }
        $json['cardPricing']                = $this->cardPricing;
        $json['businessInfo']               = $this->businessInfo;
        if (isset($this->monetaryPricingProgram)) {
            $json['monetaryPricingProgram'] = $this->monetaryPricingProgram;
        }
        $json['bankAccounts']               = $this->bankAccounts;
        $json['applicantEmail']             = $this->applicantEmail;
        $json['principal']                  = $this->principal;
        if (isset($this->additionalShareholders)) {
            $json['additionalShareholders'] = $this->additionalShareholders;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
