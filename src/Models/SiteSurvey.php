<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class SiteSurvey implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $siteSurveyConducted;

    /**
     * @var string|null
     */
    private $locationType;

    /**
     * @var bool|null
     */
    private $siteAddressSameAsDBA;

    /**
     * @var string|null
     */
    private $locationEnvironment;

    /**
     * @var string|null
     */
    private $vicinityCondition;

    /**
     * @var string|null
     */
    private $locationSquareMeters;

    /**
     * @var string|null
     */
    private $locationAppearance;

    /**
     * @var bool|null
     */
    private $businessOperating;

    /**
     * @var bool|null
     */
    private $inventoryDisplayAdequate;

    /**
     * @var bool|null
     */
    private $inventoryConsistentWithBusinessType;

    /**
     * @var bool|null
     */
    private $cardDecalsVisible;

    /**
     * @var bool|null
     */
    private $cardDecalsInstalledAtVisit;

    /**
     * Returns Site Survey Conducted.
     * [NA] If site survey was conducted set to true, else false
     */
    public function getSiteSurveyConducted(): ?bool
    {
        return $this->siteSurveyConducted;
    }

    /**
     * Sets Site Survey Conducted.
     * [NA] If site survey was conducted set to true, else false
     *
     * @maps siteSurveyConducted
     */
    public function setSiteSurveyConducted(?bool $siteSurveyConducted): void
    {
        $this->siteSurveyConducted = $siteSurveyConducted;
    }

    /**
     * Returns Location Type.
     * [NA] Type of location
     */
    public function getLocationType(): ?string
    {
        return $this->locationType;
    }

    /**
     * Sets Location Type.
     * [NA] Type of location
     *
     * @maps locationType
     * @factory \SwaggerScarecrowLib\Models\LocationTypeEnum::checkValue
     */
    public function setLocationType(?string $locationType): void
    {
        $this->locationType = $locationType;
    }

    /**
     * Returns Site Address Same as DBA.
     * [EU] True if site address is the same as the DBA address
     */
    public function getSiteAddressSameAsDBA(): ?bool
    {
        return $this->siteAddressSameAsDBA;
    }

    /**
     * Sets Site Address Same as DBA.
     * [EU] True if site address is the same as the DBA address
     *
     * @maps siteAddressSameAsDBA
     */
    public function setSiteAddressSameAsDBA(?bool $siteAddressSameAsDBA): void
    {
        $this->siteAddressSameAsDBA = $siteAddressSameAsDBA;
    }

    /**
     * Returns Location Environment.
     * [EU] The type of site location
     */
    public function getLocationEnvironment(): ?string
    {
        return $this->locationEnvironment;
    }

    /**
     * Sets Location Environment.
     * [EU] The type of site location
     *
     * @maps locationEnvironment
     * @factory \SwaggerScarecrowLib\Models\LocationEnvironmentEnum::checkValue
     */
    public function setLocationEnvironment(?string $locationEnvironment): void
    {
        $this->locationEnvironment = $locationEnvironment;
    }

    /**
     * Returns Vicinity Condition.
     * [EU] The condition of the site's vicinity
     */
    public function getVicinityCondition(): ?string
    {
        return $this->vicinityCondition;
    }

    /**
     * Sets Vicinity Condition.
     * [EU] The condition of the site's vicinity
     *
     * @maps vicinityCondition
     * @factory \SwaggerScarecrowLib\Models\VicinityConditionEnum::checkValue
     */
    public function setVicinityCondition(?string $vicinityCondition): void
    {
        $this->vicinityCondition = $vicinityCondition;
    }

    /**
     * Returns Location Square Meters.
     * [EU] The size of the site in square meters
     */
    public function getLocationSquareMeters(): ?string
    {
        return $this->locationSquareMeters;
    }

    /**
     * Sets Location Square Meters.
     * [EU] The size of the site in square meters
     *
     * @maps locationSquareMeters
     * @factory \SwaggerScarecrowLib\Models\LocationSquareMetersEnum::checkValue
     */
    public function setLocationSquareMeters(?string $locationSquareMeters): void
    {
        $this->locationSquareMeters = $locationSquareMeters;
    }

    /**
     * Returns Location Appearance.
     * [EU] The site's appearance
     */
    public function getLocationAppearance(): ?string
    {
        return $this->locationAppearance;
    }

    /**
     * Sets Location Appearance.
     * [EU] The site's appearance
     *
     * @maps locationAppearance
     * @factory \SwaggerScarecrowLib\Models\LocationAppearanceEnum::checkValue
     */
    public function setLocationAppearance(?string $locationAppearance): void
    {
        $this->locationAppearance = $locationAppearance;
    }

    /**
     * Returns Business Operating.
     * [EU] True if the business is currently operating at the site
     */
    public function getBusinessOperating(): ?bool
    {
        return $this->businessOperating;
    }

    /**
     * Sets Business Operating.
     * [EU] True if the business is currently operating at the site
     *
     * @maps businessOperating
     */
    public function setBusinessOperating(?bool $businessOperating): void
    {
        $this->businessOperating = $businessOperating;
    }

    /**
     * Returns Inventory Display Adequate.
     * [EU] True if the site's displayed inventory is adequate for the type of business
     */
    public function getInventoryDisplayAdequate(): ?bool
    {
        return $this->inventoryDisplayAdequate;
    }

    /**
     * Sets Inventory Display Adequate.
     * [EU] True if the site's displayed inventory is adequate for the type of business
     *
     * @maps inventoryDisplayAdequate
     */
    public function setInventoryDisplayAdequate(?bool $inventoryDisplayAdequate): void
    {
        $this->inventoryDisplayAdequate = $inventoryDisplayAdequate;
    }

    /**
     * Returns Inventory Consistent With Business Type.
     * [EU] True if the site's inventory is consistent for the type of business
     */
    public function getInventoryConsistentWithBusinessType(): ?bool
    {
        return $this->inventoryConsistentWithBusinessType;
    }

    /**
     * Sets Inventory Consistent With Business Type.
     * [EU] True if the site's inventory is consistent for the type of business
     *
     * @maps inventoryConsistentWithBusinessType
     */
    public function setInventoryConsistentWithBusinessType(?bool $inventoryConsistentWithBusinessType): void
    {
        $this->inventoryConsistentWithBusinessType = $inventoryConsistentWithBusinessType;
    }

    /**
     * Returns Card Decals Visible.
     * [EU] True if the accepted credit cards decals are displayed at the site
     */
    public function getCardDecalsVisible(): ?bool
    {
        return $this->cardDecalsVisible;
    }

    /**
     * Sets Card Decals Visible.
     * [EU] True if the accepted credit cards decals are displayed at the site
     *
     * @maps cardDecalsVisible
     */
    public function setCardDecalsVisible(?bool $cardDecalsVisible): void
    {
        $this->cardDecalsVisible = $cardDecalsVisible;
    }

    /**
     * Returns Card Decals Installed at Visit.
     * [EU] True if the accepted credit cards decals were installed during the site survey
     */
    public function getCardDecalsInstalledAtVisit(): ?bool
    {
        return $this->cardDecalsInstalledAtVisit;
    }

    /**
     * Sets Card Decals Installed at Visit.
     * [EU] True if the accepted credit cards decals were installed during the site survey
     *
     * @maps cardDecalsInstalledAtVisit
     */
    public function setCardDecalsInstalledAtVisit(?bool $cardDecalsInstalledAtVisit): void
    {
        $this->cardDecalsInstalledAtVisit = $cardDecalsInstalledAtVisit;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->siteSurveyConducted)) {
            $json['siteSurveyConducted']                 = $this->siteSurveyConducted;
        }
        if (isset($this->locationType)) {
            $json['locationType']                        = LocationTypeEnum::checkValue($this->locationType);
        }
        if (isset($this->siteAddressSameAsDBA)) {
            $json['siteAddressSameAsDBA']                = $this->siteAddressSameAsDBA;
        }
        if (isset($this->locationEnvironment)) {
            $json['locationEnvironment']                 =
                LocationEnvironmentEnum::checkValue(
                    $this->locationEnvironment
                );
        }
        if (isset($this->vicinityCondition)) {
            $json['vicinityCondition']                   = VicinityConditionEnum::checkValue($this->vicinityCondition);
        }
        if (isset($this->locationSquareMeters)) {
            $json['locationSquareMeters']                =
                LocationSquareMetersEnum::checkValue(
                    $this->locationSquareMeters
                );
        }
        if (isset($this->locationAppearance)) {
            $json['locationAppearance']                  =
                LocationAppearanceEnum::checkValue(
                    $this->locationAppearance
                );
        }
        if (isset($this->businessOperating)) {
            $json['businessOperating']                   = $this->businessOperating;
        }
        if (isset($this->inventoryDisplayAdequate)) {
            $json['inventoryDisplayAdequate']            = $this->inventoryDisplayAdequate;
        }
        if (isset($this->inventoryConsistentWithBusinessType)) {
            $json['inventoryConsistentWithBusinessType'] = $this->inventoryConsistentWithBusinessType;
        }
        if (isset($this->cardDecalsVisible)) {
            $json['cardDecalsVisible']                   = $this->cardDecalsVisible;
        }
        if (isset($this->cardDecalsInstalledAtVisit)) {
            $json['cardDecalsInstalledAtVisit']          = $this->cardDecalsInstalledAtVisit;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
