<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class GetQuizResponse implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $responseId;

    /**
     * @var string|null
     */
    private $quizInitialResponseType;

    /**
     * @var string|null
     */
    private $transactionKey;

    /**
     * @var int|null
     */
    private $quizId;

    /**
     * @var QuizQuestion[]|null
     */
    private $quizQuestions;

    /**
     * @var string|null
     */
    private $error;

    /**
     * Returns Response Id.
     */
    public function getResponseId(): ?int
    {
        return $this->responseId;
    }

    /**
     * Sets Response Id.
     *
     * @maps responseId
     */
    public function setResponseId(?int $responseId): void
    {
        $this->responseId = $responseId;
    }

    /**
     * Returns Quiz Initial Response Type.
     * Status of quiz response
     */
    public function getQuizInitialResponseType(): ?string
    {
        return $this->quizInitialResponseType;
    }

    /**
     * Sets Quiz Initial Response Type.
     * Status of quiz response
     *
     * @maps quizInitialResponseType
     * @factory \SwaggerScarecrowLib\Models\QuizInitialResponseTypeEnum::checkValue
     */
    public function setQuizInitialResponseType(?string $quizInitialResponseType): void
    {
        $this->quizInitialResponseType = $quizInitialResponseType;
    }

    /**
     * Returns Transaction Key.
     * Unique identifier of quiz response, to be used in anser request quiz if successful response is
     * given
     */
    public function getTransactionKey(): ?string
    {
        return $this->transactionKey;
    }

    /**
     * Sets Transaction Key.
     * Unique identifier of quiz response, to be used in anser request quiz if successful response is
     * given
     *
     * @maps transactionKey
     */
    public function setTransactionKey(?string $transactionKey): void
    {
        $this->transactionKey = $transactionKey;
    }

    /**
     * Returns Quiz Id.
     * Unique identifier of quiz, to be used in answer request quiz if successful response is given
     */
    public function getQuizId(): ?int
    {
        return $this->quizId;
    }

    /**
     * Sets Quiz Id.
     * Unique identifier of quiz, to be used in answer request quiz if successful response is given
     *
     * @maps quizId
     */
    public function setQuizId(?int $quizId): void
    {
        $this->quizId = $quizId;
    }

    /**
     * Returns Quiz Questions.
     * Quiz questions, given if request was successful
     *
     * @return QuizQuestion[]|null
     */
    public function getQuizQuestions(): ?array
    {
        return $this->quizQuestions;
    }

    /**
     * Sets Quiz Questions.
     * Quiz questions, given if request was successful
     *
     * @maps quizQuestions
     *
     * @param QuizQuestion[]|null $quizQuestions
     */
    public function setQuizQuestions(?array $quizQuestions): void
    {
        $this->quizQuestions = $quizQuestions;
    }

    /**
     * Returns Error.
     * Error message from service
     */
    public function getError(): ?string
    {
        return $this->error;
    }

    /**
     * Sets Error.
     * Error message from service
     *
     * @maps error
     */
    public function setError(?string $error): void
    {
        $this->error = $error;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->responseId)) {
            $json['responseId']              = $this->responseId;
        }
        if (isset($this->quizInitialResponseType)) {
            $json['quizInitialResponseType'] = QuizInitialResponseTypeEnum::checkValue($this->quizInitialResponseType);
        }
        if (isset($this->transactionKey)) {
            $json['transactionKey']          = $this->transactionKey;
        }
        if (isset($this->quizId)) {
            $json['quizId']                  = $this->quizId;
        }
        if (isset($this->quizQuestions)) {
            $json['quizQuestions']           = $this->quizQuestions;
        }
        if (isset($this->error)) {
            $json['error']                   = $this->error;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
