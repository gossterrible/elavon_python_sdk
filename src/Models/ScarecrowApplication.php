<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class ScarecrowApplication implements \JsonSerializable
{
    /**
     * @var string
     */
    private $clientId;

    /**
     * @var string|null
     */
    private $clientGroupNumber;

    /**
     * @var string
     */
    private $uniqueId;

    /**
     * @var string|null
     */
    private $bankerId;

    /**
     * @var string|null
     */
    private $bankerPartnerId;

    /**
     * @var string
     */
    private $country;

    /**
     * @var Person
     */
    private $principal;

    /**
     * @var BusinessInfo
     */
    private $businessInfo;

    /**
     * @var FinancialInfo
     */
    private $financialInfo;

    /**
     * @var string
     */
    private $salesRepCode;

    /**
     * @var Person[]|null
     */
    private $additionalShareholders;

    /**
     * @var Person
     */
    private $contact;

    /**
     * @var array<string,BankingInfo>
     */
    private $bankAccounts;

    /**
     * @var CardPricing
     */
    private $cardPricing;

    /**
     * @var Fee[]|null
     */
    private $fees;

    /**
     * @var string|null
     */
    private $monetaryPricingProgram;

    /**
     * @var string|null
     */
    private $authenticatePricingProgram;

    /**
     * @var string
     */
    private $parentEntity;

    /**
     * @var string|null
     */
    private $shortName;

    /**
     * @var FraudCheckResult|null
     */
    private $fraudCheckResult;

    /**
     * @var SiteSurvey|null
     */
    private $siteSurvey;

    /**
     * @var DynamicCurrencyConversion|null
     */
    private $dynamicCurrencyConversion;

    /**
     * @var BillingStatement|null
     */
    private $billingStatement;

    /**
     * @var FundingStatement|null
     */
    private $fundingStatement;

    /**
     * @var ElectronicStatement|null
     */
    private $electronicStatement;

    /**
     * @var VatInvoiceStatement|null
     */
    private $vatInvoiceStatement;

    /**
     * @var string|null
     */
    private $billingMethod;

    /**
     * @var string|null
     */
    private $referrerName;

    /**
     * @var string|null
     */
    private $referrerReferenceNumber;

    /**
     * @var string|null
     */
    private $previousProcessor;

    /**
     * @var ValueAddedInfo|null
     */
    private $valueAddedInfo;

    /**
     * @var EquipmentInfo|null
     */
    private $equipmentInfo;

    /**
     * @var string|null
     */
    private $branchNumber;

    /**
     * @var string|null
     */
    private $branchCode;

    /**
     * @var bool|null
     */
    private $selfBoardedExternal;

    /**
     * @var string|null
     */
    private $employeeNumber;

    /**
     * @var string|null
     */
    private $repReferralNumber;

    /**
     * @var string|null
     */
    private $promotionalCode;

    /**
     * @var ChainInfo|null
     */
    private $chainInfo;

    /**
     * @var array<string,DistributionInfo>|null
     */
    private $distributions;

    /**
     * @var AdditionalLocationInfo|null
     */
    private $additionalLocationInfo;

    /**
     * @var DateComponents|null
     */
    private $signedDate;

    /**
     * @var string|null
     */
    private $signedType;

    /**
     * @var IntermediaryOwnerInfo|null
     */
    private $intermediaryOwnerInfo;

    /**
     * @var RevenueShareInfo|null
     */
    private $revenueShareInfo;

    /**
     * @var string|null
     */
    private $elavonContract;

    /**
     * @var InternalUseInfo|null
     */
    private $internalUseInfo;

    /**
     * @var EframeInfo|null
     */
    private $eframeInfo;

    /**
     * @var PartnerInfo|null
     */
    private $partnerInfo;

    /**
     * @var ApmAcquirer[]|null
     */
    private $alternativePaymentMethods;

    /**
     * @param string $clientId
     * @param string $uniqueId
     * @param string $country
     * @param Person $principal
     * @param BusinessInfo $businessInfo
     * @param FinancialInfo $financialInfo
     * @param string $salesRepCode
     * @param Person $contact
     * @param array<string,BankingInfo> $bankAccounts
     * @param CardPricing $cardPricing
     * @param string $parentEntity
     */
    public function __construct(
        string $clientId,
        string $uniqueId,
        string $country,
        Person $principal,
        BusinessInfo $businessInfo,
        FinancialInfo $financialInfo,
        string $salesRepCode,
        Person $contact,
        array $bankAccounts,
        CardPricing $cardPricing,
        string $parentEntity
    ) {
        $this->clientId = $clientId;
        $this->uniqueId = $uniqueId;
        $this->country = $country;
        $this->principal = $principal;
        $this->businessInfo = $businessInfo;
        $this->financialInfo = $financialInfo;
        $this->salesRepCode = $salesRepCode;
        $this->contact = $contact;
        $this->bankAccounts = $bankAccounts;
        $this->cardPricing = $cardPricing;
        $this->parentEntity = $parentEntity;
    }

    /**
     * Returns Client Id.
     * Client id of application submission, to be provided to partners
     */
    public function getClientId(): string
    {
        return $this->clientId;
    }

    /**
     * Sets Client Id.
     * Client id of application submission, to be provided to partners
     *
     * @required
     * @maps clientId
     */
    public function setClientId(string $clientId): void
    {
        $this->clientId = $clientId;
    }

    /**
     * Returns Client Group Number.
     * Client group number of application submission, paris with parent entity, to be provided to partners,
     * required in NA
     */
    public function getClientGroupNumber(): ?string
    {
        return $this->clientGroupNumber;
    }

    /**
     * Sets Client Group Number.
     * Client group number of application submission, paris with parent entity, to be provided to partners,
     * required in NA
     *
     * @maps clientGroupNumber
     */
    public function setClientGroupNumber(?string $clientGroupNumber): void
    {
        $this->clientGroupNumber = $clientGroupNumber;
    }

    /**
     * Returns Unique Id.
     * Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId
     * must be wholly original and never repeated. The client's name followed by a millisecond timestamp
     * would work well.
     */
    public function getUniqueId(): string
    {
        return $this->uniqueId;
    }

    /**
     * Sets Unique Id.
     * Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId
     * must be wholly original and never repeated. The client's name followed by a millisecond timestamp
     * would work well.
     *
     * @required
     * @maps uniqueId
     */
    public function setUniqueId(string $uniqueId): void
    {
        $this->uniqueId = $uniqueId;
    }

    /**
     * Returns Banker Id.
     * [EU] Identifier of banker responsible for submission
     */
    public function getBankerId(): ?string
    {
        return $this->bankerId;
    }

    /**
     * Sets Banker Id.
     * [EU] Identifier of banker responsible for submission
     *
     * @maps bankerId
     */
    public function setBankerId(?string $bankerId): void
    {
        $this->bankerId = $bankerId;
    }

    /**
     * Returns Banker Partner Id.
     * [EU] Identifier of banker partner responsible for submission
     */
    public function getBankerPartnerId(): ?string
    {
        return $this->bankerPartnerId;
    }

    /**
     * Sets Banker Partner Id.
     * [EU] Identifier of banker partner responsible for submission
     *
     * @maps bankerPartnerId
     */
    public function setBankerPartnerId(?string $bankerPartnerId): void
    {
        $this->bankerPartnerId = $bankerPartnerId;
    }

    /**
     * Returns Country.
     * Country of application submission, ISO 3166-1 alpha-3 standard applies
     */
    public function getCountry(): string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * Country of application submission, ISO 3166-1 alpha-3 standard applies
     *
     * @required
     * @maps country
     */
    public function setCountry(string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Principal.
     */
    public function getPrincipal(): Person
    {
        return $this->principal;
    }

    /**
     * Sets Principal.
     *
     * @required
     * @maps principal
     */
    public function setPrincipal(Person $principal): void
    {
        $this->principal = $principal;
    }

    /**
     * Returns Business Info.
     */
    public function getBusinessInfo(): BusinessInfo
    {
        return $this->businessInfo;
    }

    /**
     * Sets Business Info.
     *
     * @required
     * @maps businessInfo
     */
    public function setBusinessInfo(BusinessInfo $businessInfo): void
    {
        $this->businessInfo = $businessInfo;
    }

    /**
     * Returns Financial Info.
     */
    public function getFinancialInfo(): FinancialInfo
    {
        return $this->financialInfo;
    }

    /**
     * Sets Financial Info.
     *
     * @required
     * @maps financialInfo
     */
    public function setFinancialInfo(FinancialInfo $financialInfo): void
    {
        $this->financialInfo = $financialInfo;
    }

    /**
     * Returns Sales Rep Code.
     * Identifier of sales representative responsible for submission
     */
    public function getSalesRepCode(): string
    {
        return $this->salesRepCode;
    }

    /**
     * Sets Sales Rep Code.
     * Identifier of sales representative responsible for submission
     *
     * @required
     * @maps salesRepCode
     */
    public function setSalesRepCode(string $salesRepCode): void
    {
        $this->salesRepCode = $salesRepCode;
    }

    /**
     * Returns Additional Shareholders.
     *
     * @return Person[]|null
     */
    public function getAdditionalShareholders(): ?array
    {
        return $this->additionalShareholders;
    }

    /**
     * Sets Additional Shareholders.
     *
     * @maps additionalShareholders
     *
     * @param Person[]|null $additionalShareholders
     */
    public function setAdditionalShareholders(?array $additionalShareholders): void
    {
        $this->additionalShareholders = $additionalShareholders;
    }

    /**
     * Returns Contact.
     */
    public function getContact(): Person
    {
        return $this->contact;
    }

    /**
     * Sets Contact.
     *
     * @required
     * @maps contact
     */
    public function setContact(Person $contact): void
    {
        $this->contact = $contact;
    }

    /**
     * Returns Bank Accounts.
     * Bank account container. Valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
     *
     * @return array<string,BankingInfo>
     */
    public function getBankAccounts(): array
    {
        return $this->bankAccounts;
    }

    /**
     * Sets Bank Accounts.
     * Bank account container. Valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
     *
     * @required
     * @maps bankAccounts
     *
     * @param array<string,BankingInfo> $bankAccounts
     */
    public function setBankAccounts(array $bankAccounts): void
    {
        $this->bankAccounts = $bankAccounts;
    }

    /**
     * Returns Card Pricing.
     */
    public function getCardPricing(): CardPricing
    {
        return $this->cardPricing;
    }

    /**
     * Sets Card Pricing.
     *
     * @required
     * @maps cardPricing
     */
    public function setCardPricing(CardPricing $cardPricing): void
    {
        $this->cardPricing = $cardPricing;
    }

    /**
     * Returns Fees.
     *
     * @return Fee[]|null
     */
    public function getFees(): ?array
    {
        return $this->fees;
    }

    /**
     * Sets Fees.
     *
     * @maps fees
     *
     * @param Fee[]|null $fees
     */
    public function setFees(?array $fees): void
    {
        $this->fees = $fees;
    }

    /**
     * Returns Monetary Pricing Program.
     * Pricing program also called MPP/NPP, to be provided to partners, required in EU
     */
    public function getMonetaryPricingProgram(): ?string
    {
        return $this->monetaryPricingProgram;
    }

    /**
     * Sets Monetary Pricing Program.
     * Pricing program also called MPP/NPP, to be provided to partners, required in EU
     *
     * @maps monetaryPricingProgram
     */
    public function setMonetaryPricingProgram(?string $monetaryPricingProgram): void
    {
        $this->monetaryPricingProgram = $monetaryPricingProgram;
    }

    /**
     * Returns Authenticate Pricing Program.
     * Pricing program also called APP, to be provided to partners, required in EU
     */
    public function getAuthenticatePricingProgram(): ?string
    {
        return $this->authenticatePricingProgram;
    }

    /**
     * Sets Authenticate Pricing Program.
     * Pricing program also called APP, to be provided to partners, required in EU
     *
     * @maps authenticatePricingProgram
     */
    public function setAuthenticatePricingProgram(?string $authenticatePricingProgram): void
    {
        $this->authenticatePricingProgram = $authenticatePricingProgram;
    }

    /**
     * Returns Parent Entity.
     * Entity that is parent to submisssion, forms a pair with client group, to be provided to partners
     */
    public function getParentEntity(): string
    {
        return $this->parentEntity;
    }

    /**
     * Sets Parent Entity.
     * Entity that is parent to submisssion, forms a pair with client group, to be provided to partners
     *
     * @required
     * @maps parentEntity
     */
    public function setParentEntity(string $parentEntity): void
    {
        $this->parentEntity = $parentEntity;
    }

    /**
     * Returns Short Name.
     * [NA]
     */
    public function getShortName(): ?string
    {
        return $this->shortName;
    }

    /**
     * Sets Short Name.
     * [NA]
     *
     * @maps shortName
     */
    public function setShortName(?string $shortName): void
    {
        $this->shortName = $shortName;
    }

    /**
     * Returns Fraud Check Result.
     */
    public function getFraudCheckResult(): ?FraudCheckResult
    {
        return $this->fraudCheckResult;
    }

    /**
     * Sets Fraud Check Result.
     *
     * @maps fraudCheckResult
     */
    public function setFraudCheckResult(?FraudCheckResult $fraudCheckResult): void
    {
        $this->fraudCheckResult = $fraudCheckResult;
    }

    /**
     * Returns Site Survey.
     */
    public function getSiteSurvey(): ?SiteSurvey
    {
        return $this->siteSurvey;
    }

    /**
     * Sets Site Survey.
     *
     * @maps siteSurvey
     */
    public function setSiteSurvey(?SiteSurvey $siteSurvey): void
    {
        $this->siteSurvey = $siteSurvey;
    }

    /**
     * Returns Dynamic Currency Conversion.
     */
    public function getDynamicCurrencyConversion(): ?DynamicCurrencyConversion
    {
        return $this->dynamicCurrencyConversion;
    }

    /**
     * Sets Dynamic Currency Conversion.
     *
     * @maps dynamicCurrencyConversion
     */
    public function setDynamicCurrencyConversion(?DynamicCurrencyConversion $dynamicCurrencyConversion): void
    {
        $this->dynamicCurrencyConversion = $dynamicCurrencyConversion;
    }

    /**
     * Returns Billing Statement.
     */
    public function getBillingStatement(): ?BillingStatement
    {
        return $this->billingStatement;
    }

    /**
     * Sets Billing Statement.
     *
     * @maps billingStatement
     */
    public function setBillingStatement(?BillingStatement $billingStatement): void
    {
        $this->billingStatement = $billingStatement;
    }

    /**
     * Returns Funding Statement.
     */
    public function getFundingStatement(): ?FundingStatement
    {
        return $this->fundingStatement;
    }

    /**
     * Sets Funding Statement.
     *
     * @maps fundingStatement
     */
    public function setFundingStatement(?FundingStatement $fundingStatement): void
    {
        $this->fundingStatement = $fundingStatement;
    }

    /**
     * Returns Electronic Statement.
     */
    public function getElectronicStatement(): ?ElectronicStatement
    {
        return $this->electronicStatement;
    }

    /**
     * Sets Electronic Statement.
     *
     * @maps electronicStatement
     */
    public function setElectronicStatement(?ElectronicStatement $electronicStatement): void
    {
        $this->electronicStatement = $electronicStatement;
    }

    /**
     * Returns Vat Invoice Statement.
     */
    public function getVatInvoiceStatement(): ?VatInvoiceStatement
    {
        return $this->vatInvoiceStatement;
    }

    /**
     * Sets Vat Invoice Statement.
     *
     * @maps vatInvoiceStatement
     */
    public function setVatInvoiceStatement(?VatInvoiceStatement $vatInvoiceStatement): void
    {
        $this->vatInvoiceStatement = $vatInvoiceStatement;
    }

    /**
     * Returns Billing Method.
     * [NA] NETCREDIT or GROSS
     */
    public function getBillingMethod(): ?string
    {
        return $this->billingMethod;
    }

    /**
     * Sets Billing Method.
     * [NA] NETCREDIT or GROSS
     *
     * @maps billingMethod
     * @factory \SwaggerScarecrowLib\Models\BillingMethodEnum::checkValue
     */
    public function setBillingMethod(?string $billingMethod): void
    {
        $this->billingMethod = $billingMethod;
    }

    /**
     * Returns Referrer Name.
     * Application submission's referrer name, to be provided to partners, required in NA
     */
    public function getReferrerName(): ?string
    {
        return $this->referrerName;
    }

    /**
     * Sets Referrer Name.
     * Application submission's referrer name, to be provided to partners, required in NA
     *
     * @maps referrerName
     */
    public function setReferrerName(?string $referrerName): void
    {
        $this->referrerName = $referrerName;
    }

    /**
     * Returns Referrer Reference Number.
     * The reference number associated with the referrer, known by Elavon.
     */
    public function getReferrerReferenceNumber(): ?string
    {
        return $this->referrerReferenceNumber;
    }

    /**
     * Sets Referrer Reference Number.
     * The reference number associated with the referrer, known by Elavon.
     *
     * @maps referrerReferenceNumber
     */
    public function setReferrerReferenceNumber(?string $referrerReferenceNumber): void
    {
        $this->referrerReferenceNumber = $referrerReferenceNumber;
    }

    /**
     * Returns Previous Processor.
     * [NA] Customer's previous payment processor
     */
    public function getPreviousProcessor(): ?string
    {
        return $this->previousProcessor;
    }

    /**
     * Sets Previous Processor.
     * [NA] Customer's previous payment processor
     *
     * @maps previousProcessor
     */
    public function setPreviousProcessor(?string $previousProcessor): void
    {
        $this->previousProcessor = $previousProcessor;
    }

    /**
     * Returns Value Added Info.
     */
    public function getValueAddedInfo(): ?ValueAddedInfo
    {
        return $this->valueAddedInfo;
    }

    /**
     * Sets Value Added Info.
     *
     * @maps valueAddedInfo
     */
    public function setValueAddedInfo(?ValueAddedInfo $valueAddedInfo): void
    {
        $this->valueAddedInfo = $valueAddedInfo;
    }

    /**
     * Returns Equipment Info.
     * In NA, it's mandatory to have at least one piece of equipment. For third party vendors
     * managing their own equipment, at least one Value Added Reseller (VAR) code must be sent.
     * Contact your Elavon representative for the VAR code(s).
     *
     * In EU, equipmentInfo is optional and no equipment has to be sent. If you have any
     * equipment
     * managed by Elavon, contact your Elavon representative for the VAR code(s).
     */
    public function getEquipmentInfo(): ?EquipmentInfo
    {
        return $this->equipmentInfo;
    }

    /**
     * Sets Equipment Info.
     * In NA, it's mandatory to have at least one piece of equipment. For third party vendors
     * managing their own equipment, at least one Value Added Reseller (VAR) code must be sent.
     * Contact your Elavon representative for the VAR code(s).
     *
     * In EU, equipmentInfo is optional and no equipment has to be sent. If you have any
     * equipment
     * managed by Elavon, contact your Elavon representative for the VAR code(s).
     *
     * @maps equipmentInfo
     */
    public function setEquipmentInfo(?EquipmentInfo $equipmentInfo): void
    {
        $this->equipmentInfo = $equipmentInfo;
    }

    /**
     * Returns Branch Number.
     * Bank branch number associated with application submission
     */
    public function getBranchNumber(): ?string
    {
        return $this->branchNumber;
    }

    /**
     * Sets Branch Number.
     * Bank branch number associated with application submission
     *
     * @maps branchNumber
     */
    public function setBranchNumber(?string $branchNumber): void
    {
        $this->branchNumber = $branchNumber;
    }

    /**
     * Returns Branch Code.
     * Bank branch code associated with application submission
     */
    public function getBranchCode(): ?string
    {
        return $this->branchCode;
    }

    /**
     * Sets Branch Code.
     * Bank branch code associated with application submission
     *
     * @maps branchCode
     */
    public function setBranchCode(?string $branchCode): void
    {
        $this->branchCode = $branchCode;
    }

    /**
     * Returns Self Boarded External.
     * [NA] Flag indicating if application is self boarded externally, suppresses forms of post-boarding
     * contact
     */
    public function getSelfBoardedExternal(): ?bool
    {
        return $this->selfBoardedExternal;
    }

    /**
     * Sets Self Boarded External.
     * [NA] Flag indicating if application is self boarded externally, suppresses forms of post-boarding
     * contact
     *
     * @maps selfBoardedExternal
     */
    public function setSelfBoardedExternal(?bool $selfBoardedExternal): void
    {
        $this->selfBoardedExternal = $selfBoardedExternal;
    }

    /**
     * Returns Employee Number.
     * Number used to identify a specific employee
     */
    public function getEmployeeNumber(): ?string
    {
        return $this->employeeNumber;
    }

    /**
     * Sets Employee Number.
     * Number used to identify a specific employee
     *
     * @maps employeeNumber
     */
    public function setEmployeeNumber(?string $employeeNumber): void
    {
        $this->employeeNumber = $employeeNumber;
    }

    /**
     * Returns Rep Referral Number.
     * Number used to identify a specific representative
     */
    public function getRepReferralNumber(): ?string
    {
        return $this->repReferralNumber;
    }

    /**
     * Sets Rep Referral Number.
     * Number used to identify a specific representative
     *
     * @maps repReferralNumber
     */
    public function setRepReferralNumber(?string $repReferralNumber): void
    {
        $this->repReferralNumber = $repReferralNumber;
    }

    /**
     * Returns Promotional Code.
     * A discount/promotional code
     */
    public function getPromotionalCode(): ?string
    {
        return $this->promotionalCode;
    }

    /**
     * Sets Promotional Code.
     * A discount/promotional code
     *
     * @maps promotionalCode
     */
    public function setPromotionalCode(?string $promotionalCode): void
    {
        $this->promotionalCode = $promotionalCode;
    }

    /**
     * Returns Chain Info.
     */
    public function getChainInfo(): ?ChainInfo
    {
        return $this->chainInfo;
    }

    /**
     * Sets Chain Info.
     *
     * @maps chainInfo
     */
    public function setChainInfo(?ChainInfo $chainInfo): void
    {
        $this->chainInfo = $chainInfo;
    }

    /**
     * Returns Distributions.
     * Distribution container for chargebacks and retrievals. The valid keys are as follows: CHARGEBACK,
     * RETRIEVAL
     *
     * @return array<string,DistributionInfo>|null
     */
    public function getDistributions(): ?array
    {
        return $this->distributions;
    }

    /**
     * Sets Distributions.
     * Distribution container for chargebacks and retrievals. The valid keys are as follows: CHARGEBACK,
     * RETRIEVAL
     *
     * @maps distributions
     *
     * @param array<string,DistributionInfo>|null $distributions
     */
    public function setDistributions(?array $distributions): void
    {
        $this->distributions = $distributions;
    }

    /**
     * Returns Additional Location Info.
     */
    public function getAdditionalLocationInfo(): ?AdditionalLocationInfo
    {
        return $this->additionalLocationInfo;
    }

    /**
     * Sets Additional Location Info.
     *
     * @maps additionalLocationInfo
     */
    public function setAdditionalLocationInfo(?AdditionalLocationInfo $additionalLocationInfo): void
    {
        $this->additionalLocationInfo = $additionalLocationInfo;
    }

    /**
     * Returns Signed Date.
     * A container that holds the date (day, month, and year)
     */
    public function getSignedDate(): ?DateComponents
    {
        return $this->signedDate;
    }

    /**
     * Sets Signed Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps signedDate
     */
    public function setSignedDate(?DateComponents $signedDate): void
    {
        $this->signedDate = $signedDate;
    }

    /**
     * Returns Signed Type.
     * [NA] How application was signed
     */
    public function getSignedType(): ?string
    {
        return $this->signedType;
    }

    /**
     * Sets Signed Type.
     * [NA] How application was signed
     *
     * @maps signedType
     * @factory \SwaggerScarecrowLib\Models\SignedTypeEnum::checkValue
     */
    public function setSignedType(?string $signedType): void
    {
        $this->signedType = $signedType;
    }

    /**
     * Returns Intermediary Owner Info.
     */
    public function getIntermediaryOwnerInfo(): ?IntermediaryOwnerInfo
    {
        return $this->intermediaryOwnerInfo;
    }

    /**
     * Sets Intermediary Owner Info.
     *
     * @maps intermediaryOwnerInfo
     */
    public function setIntermediaryOwnerInfo(?IntermediaryOwnerInfo $intermediaryOwnerInfo): void
    {
        $this->intermediaryOwnerInfo = $intermediaryOwnerInfo;
    }

    /**
     * Returns Revenue Share Info.
     */
    public function getRevenueShareInfo(): ?RevenueShareInfo
    {
        return $this->revenueShareInfo;
    }

    /**
     * Sets Revenue Share Info.
     *
     * @maps revenueShareInfo
     */
    public function setRevenueShareInfo(?RevenueShareInfo $revenueShareInfo): void
    {
        $this->revenueShareInfo = $revenueShareInfo;
    }

    /**
     * Returns Elavon Contract.
     * [EU] Determine which Merchant Agreement customer will sign
     */
    public function getElavonContract(): ?string
    {
        return $this->elavonContract;
    }

    /**
     * Sets Elavon Contract.
     * [EU] Determine which Merchant Agreement customer will sign
     *
     * @maps elavonContract
     * @factory \SwaggerScarecrowLib\Models\ElavonContractEnum::checkValue
     */
    public function setElavonContract(?string $elavonContract): void
    {
        $this->elavonContract = $elavonContract;
    }

    /**
     * Returns Internal Use Info.
     */
    public function getInternalUseInfo(): ?InternalUseInfo
    {
        return $this->internalUseInfo;
    }

    /**
     * Sets Internal Use Info.
     *
     * @maps internalUseInfo
     */
    public function setInternalUseInfo(?InternalUseInfo $internalUseInfo): void
    {
        $this->internalUseInfo = $internalUseInfo;
    }

    /**
     * Returns Eframe Info.
     */
    public function getEframeInfo(): ?EframeInfo
    {
        return $this->eframeInfo;
    }

    /**
     * Sets Eframe Info.
     *
     * @maps eframeInfo
     */
    public function setEframeInfo(?EframeInfo $eframeInfo): void
    {
        $this->eframeInfo = $eframeInfo;
    }

    /**
     * Returns Partner Info.
     */
    public function getPartnerInfo(): ?PartnerInfo
    {
        return $this->partnerInfo;
    }

    /**
     * Sets Partner Info.
     *
     * @maps partnerInfo
     */
    public function setPartnerInfo(?PartnerInfo $partnerInfo): void
    {
        $this->partnerInfo = $partnerInfo;
    }

    /**
     * Returns Alternative Payment Methods.
     * [EU] List of Alternative Payment Method Acquirers container
     *
     * @return ApmAcquirer[]|null
     */
    public function getAlternativePaymentMethods(): ?array
    {
        return $this->alternativePaymentMethods;
    }

    /**
     * Sets Alternative Payment Methods.
     * [EU] List of Alternative Payment Method Acquirers container
     *
     * @maps alternativePaymentMethods
     *
     * @param ApmAcquirer[]|null $alternativePaymentMethods
     */
    public function setAlternativePaymentMethods(?array $alternativePaymentMethods): void
    {
        $this->alternativePaymentMethods = $alternativePaymentMethods;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['clientId']                       = $this->clientId;
        if (isset($this->clientGroupNumber)) {
            $json['clientGroupNumber']          = $this->clientGroupNumber;
        }
        $json['uniqueId']                       = $this->uniqueId;
        if (isset($this->bankerId)) {
            $json['bankerId']                   = $this->bankerId;
        }
        if (isset($this->bankerPartnerId)) {
            $json['bankerPartnerId']            = $this->bankerPartnerId;
        }
        $json['country']                        = $this->country;
        $json['principal']                      = $this->principal;
        $json['businessInfo']                   = $this->businessInfo;
        $json['financialInfo']                  = $this->financialInfo;
        $json['salesRepCode']                   = $this->salesRepCode;
        if (isset($this->additionalShareholders)) {
            $json['additionalShareholders']     = $this->additionalShareholders;
        }
        $json['contact']                        = $this->contact;
        $json['bankAccounts']                   = $this->bankAccounts;
        $json['cardPricing']                    = $this->cardPricing;
        if (isset($this->fees)) {
            $json['fees']                       = $this->fees;
        }
        if (isset($this->monetaryPricingProgram)) {
            $json['monetaryPricingProgram']     = $this->monetaryPricingProgram;
        }
        if (isset($this->authenticatePricingProgram)) {
            $json['authenticatePricingProgram'] = $this->authenticatePricingProgram;
        }
        $json['parentEntity']                   = $this->parentEntity;
        if (isset($this->shortName)) {
            $json['shortName']                  = $this->shortName;
        }
        if (isset($this->fraudCheckResult)) {
            $json['fraudCheckResult']           = $this->fraudCheckResult;
        }
        if (isset($this->siteSurvey)) {
            $json['siteSurvey']                 = $this->siteSurvey;
        }
        if (isset($this->dynamicCurrencyConversion)) {
            $json['dynamicCurrencyConversion']  = $this->dynamicCurrencyConversion;
        }
        if (isset($this->billingStatement)) {
            $json['billingStatement']           = $this->billingStatement;
        }
        if (isset($this->fundingStatement)) {
            $json['fundingStatement']           = $this->fundingStatement;
        }
        if (isset($this->electronicStatement)) {
            $json['electronicStatement']        = $this->electronicStatement;
        }
        if (isset($this->vatInvoiceStatement)) {
            $json['vatInvoiceStatement']        = $this->vatInvoiceStatement;
        }
        if (isset($this->billingMethod)) {
            $json['billingMethod']              = BillingMethodEnum::checkValue($this->billingMethod);
        }
        if (isset($this->referrerName)) {
            $json['referrerName']               = $this->referrerName;
        }
        if (isset($this->referrerReferenceNumber)) {
            $json['referrerReferenceNumber']    = $this->referrerReferenceNumber;
        }
        if (isset($this->previousProcessor)) {
            $json['previousProcessor']          = $this->previousProcessor;
        }
        if (isset($this->valueAddedInfo)) {
            $json['valueAddedInfo']             = $this->valueAddedInfo;
        }
        if (isset($this->equipmentInfo)) {
            $json['equipmentInfo']              = $this->equipmentInfo;
        }
        if (isset($this->branchNumber)) {
            $json['branchNumber']               = $this->branchNumber;
        }
        if (isset($this->branchCode)) {
            $json['branchCode']                 = $this->branchCode;
        }
        if (isset($this->selfBoardedExternal)) {
            $json['selfBoardedExternal']        = $this->selfBoardedExternal;
        }
        if (isset($this->employeeNumber)) {
            $json['employeeNumber']             = $this->employeeNumber;
        }
        if (isset($this->repReferralNumber)) {
            $json['repReferralNumber']          = $this->repReferralNumber;
        }
        if (isset($this->promotionalCode)) {
            $json['promotionalCode']            = $this->promotionalCode;
        }
        if (isset($this->chainInfo)) {
            $json['chainInfo']                  = $this->chainInfo;
        }
        if (isset($this->distributions)) {
            $json['distributions']              = $this->distributions;
        }
        if (isset($this->additionalLocationInfo)) {
            $json['additionalLocationInfo']     = $this->additionalLocationInfo;
        }
        if (isset($this->signedDate)) {
            $json['signedDate']                 = $this->signedDate;
        }
        if (isset($this->signedType)) {
            $json['signedType']                 = SignedTypeEnum::checkValue($this->signedType);
        }
        if (isset($this->intermediaryOwnerInfo)) {
            $json['intermediaryOwnerInfo']      = $this->intermediaryOwnerInfo;
        }
        if (isset($this->revenueShareInfo)) {
            $json['revenueShareInfo']           = $this->revenueShareInfo;
        }
        if (isset($this->elavonContract)) {
            $json['elavonContract']             = ElavonContractEnum::checkValue($this->elavonContract);
        }
        if (isset($this->internalUseInfo)) {
            $json['internalUseInfo']            = $this->internalUseInfo;
        }
        if (isset($this->eframeInfo)) {
            $json['eframeInfo']                 = $this->eframeInfo;
        }
        if (isset($this->partnerInfo)) {
            $json['partnerInfo']                = $this->partnerInfo;
        }
        if (isset($this->alternativePaymentMethods)) {
            $json['alternativePaymentMethods']  = $this->alternativePaymentMethods;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
