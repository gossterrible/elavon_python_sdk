<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class BusinessInfo implements \JsonSerializable
{
    /**
     * @var string
     */
    private $dbaName;

    /**
     * @var string
     */
    private $dbaNameExtended;

    /**
     * @var Address
     */
    private $businessAddress;

    /**
     * @var string
     */
    private $legalName;

    /**
     * @var string
     */
    private $legalNameExtended;

    /**
     * @var string[]|null
     */
    private $legalNameMarked;

    /**
     * @var array<string,Address>
     */
    private $additionalAddresses;

    /**
     * @var string
     */
    private $ownershipType;

    /**
     * @var string|null
     */
    private $registrationNumber;

    /**
     * @var string|null
     */
    private $taxID;

    /**
     * @var string|null
     */
    private $taxIDType;

    /**
     * @var VatInfo|null
     */
    private $vatInfo;

    /**
     * @var string|null
     */
    private $taxFormType;

    /**
     * @var string|null
     */
    private $taxClassType;

    /**
     * @var string|null
     */
    private $customerMembershipNumber;

    /**
     * @var string
     */
    private $productDescription;

    /**
     * @var string
     */
    private $mccCode;

    /**
     * @var string
     */
    private $establishmentYear;

    /**
     * @var string
     */
    private $currentOwnershipYears;

    /**
     * @var string
     */
    private $currentOwnershipMonths;

    /**
     * @var bool|null
     */
    private $governmentOwnedEntity;

    /**
     * @var string
     */
    private $communicationLanguage;

    /**
     * @var string
     */
    private $posLanguage;

    /**
     * @var string|null
     */
    private $storeNumber;

    /**
     * @var string[]|null
     */
    private $associationCodes;

    /**
     * @var bool|null
     */
    private $optOut;

    /**
     * @var DateComponents|null
     */
    private $signDate;

    /**
     * @var PCIInfo|null
     */
    private $pciInfo;

    /**
     * @var string|null
     */
    private $employerId;

    /**
     * @var string|null
     */
    private $countryOfOrigin;

    /**
     * @var string|null
     */
    private $exemptionType;

    /**
     * @var string|null
     */
    private $ownerExemptionType;

    /**
     * @var string|null
     */
    private $numberOfPartners;

    /**
     * @var string|null
     */
    private $relationshipMgrCode;

    /**
     * @var string|null
     */
    private $countryOfPrimaryOperation;

    /**
     * @var bool|null
     */
    private $bearerShares;

    /**
     * @var string|null
     */
    private $legalStatus;

    /**
     * @var array<string,VerificationInfo>|null
     */
    private $verifications;

    /**
     * @var string|null
     */
    private $industryClass;

    /**
     * @var bool|null
     */
    private $noPlates;

    /**
     * @var string|null
     */
    private $agentNumber;

    /**
     * @var string|null
     */
    private $locationMidRange;

    /**
     * @var HempGrowerInfo|null
     */
    private $hempGrowerInfo;

    /**
     * @var CreditDecisionInfo|null
     */
    private $creditDecisionInfo;

    /**
     * @param string $dbaName
     * @param string $dbaNameExtended
     * @param Address $businessAddress
     * @param string $legalName
     * @param string $legalNameExtended
     * @param array<string,Address> $additionalAddresses
     * @param string $ownershipType
     * @param string $productDescription
     * @param string $mccCode
     * @param string $establishmentYear
     * @param string $currentOwnershipYears
     * @param string $currentOwnershipMonths
     * @param string $communicationLanguage
     * @param string $posLanguage
     */
    public function __construct(
        string $dbaName,
        string $dbaNameExtended,
        Address $businessAddress,
        string $legalName,
        string $legalNameExtended,
        array $additionalAddresses,
        string $ownershipType,
        string $productDescription,
        string $mccCode,
        string $establishmentYear,
        string $currentOwnershipYears,
        string $currentOwnershipMonths,
        string $communicationLanguage,
        string $posLanguage
    ) {
        $this->dbaName = $dbaName;
        $this->dbaNameExtended = $dbaNameExtended;
        $this->businessAddress = $businessAddress;
        $this->legalName = $legalName;
        $this->legalNameExtended = $legalNameExtended;
        $this->additionalAddresses = $additionalAddresses;
        $this->ownershipType = $ownershipType;
        $this->productDescription = $productDescription;
        $this->mccCode = $mccCode;
        $this->establishmentYear = $establishmentYear;
        $this->currentOwnershipYears = $currentOwnershipYears;
        $this->currentOwnershipMonths = $currentOwnershipMonths;
        $this->communicationLanguage = $communicationLanguage;
        $this->posLanguage = $posLanguage;
    }

    /**
     * Returns Dba Name.
     * Doing Business As name for business
     */
    public function getDbaName(): string
    {
        return $this->dbaName;
    }

    /**
     * Sets Dba Name.
     * Doing Business As name for business
     *
     * @required
     * @maps dbaName
     */
    public function setDbaName(string $dbaName): void
    {
        $this->dbaName = $dbaName;
    }

    /**
     * Returns Dba Name Extended.
     * Doing Business As name for business, character limit extended
     */
    public function getDbaNameExtended(): string
    {
        return $this->dbaNameExtended;
    }

    /**
     * Sets Dba Name Extended.
     * Doing Business As name for business, character limit extended
     *
     * @required
     * @maps dbaNameExtended
     */
    public function setDbaNameExtended(string $dbaNameExtended): void
    {
        $this->dbaNameExtended = $dbaNameExtended;
    }

    /**
     * Returns Business Address.
     */
    public function getBusinessAddress(): Address
    {
        return $this->businessAddress;
    }

    /**
     * Sets Business Address.
     *
     * @required
     * @maps businessAddress
     */
    public function setBusinessAddress(Address $businessAddress): void
    {
        $this->businessAddress = $businessAddress;
    }

    /**
     * Returns Legal Name.
     * Certified legal name of business
     */
    public function getLegalName(): string
    {
        return $this->legalName;
    }

    /**
     * Sets Legal Name.
     * Certified legal name of business
     *
     * @required
     * @maps legalName
     */
    public function setLegalName(string $legalName): void
    {
        $this->legalName = $legalName;
    }

    /**
     * Returns Legal Name Extended.
     * Certified legal name of business, character limit extended
     */
    public function getLegalNameExtended(): string
    {
        return $this->legalNameExtended;
    }

    /**
     * Sets Legal Name Extended.
     * Certified legal name of business, character limit extended
     *
     * @required
     * @maps legalNameExtended
     */
    public function setLegalNameExtended(string $legalNameExtended): void
    {
        $this->legalNameExtended = $legalNameExtended;
    }

    /**
     * Returns Legal Name Marked.
     * Certified legal name of business, permits accented characters, required in POL
     *
     * @return string[]|null
     */
    public function getLegalNameMarked(): ?array
    {
        return $this->legalNameMarked;
    }

    /**
     * Sets Legal Name Marked.
     * Certified legal name of business, permits accented characters, required in POL
     *
     * @maps legalNameMarked
     *
     * @param string[]|null $legalNameMarked
     */
    public function setLegalNameMarked(?array $legalNameMarked): void
    {
        $this->legalNameMarked = $legalNameMarked;
    }

    /**
     * Returns Additional Addresses.
     * Container of other addresses, legal required.The valid keys are as follows: BUSINESS, LEGAL,
     * SHIPPING, MAILING, PRINCIPAL, PREVIOUS, STATEMENT
     *
     * @return array<string,Address>
     */
    public function getAdditionalAddresses(): array
    {
        return $this->additionalAddresses;
    }

    /**
     * Sets Additional Addresses.
     * Container of other addresses, legal required.The valid keys are as follows: BUSINESS, LEGAL,
     * SHIPPING, MAILING, PRINCIPAL, PREVIOUS, STATEMENT
     *
     * @required
     * @maps additionalAddresses
     *
     * @param array<string,Address> $additionalAddresses
     */
    public function setAdditionalAddresses(array $additionalAddresses): void
    {
        $this->additionalAddresses = $additionalAddresses;
    }

    /**
     * Returns Ownership Type.
     * Type of business
     */
    public function getOwnershipType(): string
    {
        return $this->ownershipType;
    }

    /**
     * Sets Ownership Type.
     * Type of business
     *
     * @required
     * @maps ownershipType
     * @factory \SwaggerScarecrowLib\Models\OwnershipTypeEnum::checkValue
     */
    public function setOwnershipType(string $ownershipType): void
    {
        $this->ownershipType = $ownershipType;
    }

    /**
     * Returns Registration Number.
     * [EU] Registration number of business, required for LIMITED_LIBABILITY_PARTNERSHIP, LIMITED_COMPANY,
     * or PUBLIC_LIMITED_COMPANY
     */
    public function getRegistrationNumber(): ?string
    {
        return $this->registrationNumber;
    }

    /**
     * Sets Registration Number.
     * [EU] Registration number of business, required for LIMITED_LIBABILITY_PARTNERSHIP, LIMITED_COMPANY,
     * or PUBLIC_LIMITED_COMPANY
     *
     * @maps registrationNumber
     */
    public function setRegistrationNumber(?string $registrationNumber): void
    {
        $this->registrationNumber = $registrationNumber;
    }

    /**
     * Returns Tax ID.
     * Business tax ID. For testing a valid tax ID, use format 78742xxxx where 'xxxx' represents a series
     * of four random, non-repeating, non-sequential numbers
     */
    public function getTaxID(): ?string
    {
        return $this->taxID;
    }

    /**
     * Sets Tax ID.
     * Business tax ID. For testing a valid tax ID, use format 78742xxxx where 'xxxx' represents a series
     * of four random, non-repeating, non-sequential numbers
     *
     * @maps taxID
     */
    public function setTaxID(?string $taxID): void
    {
        $this->taxID = $taxID;
    }

    /**
     * Returns Tax ID Type.
     * [NA] Type of tax id provieded
     */
    public function getTaxIDType(): ?string
    {
        return $this->taxIDType;
    }

    /**
     * Sets Tax ID Type.
     * [NA] Type of tax id provieded
     *
     * @maps taxIDType
     * @factory \SwaggerScarecrowLib\Models\TaxIDTypeEnum::checkValue
     */
    public function setTaxIDType(?string $taxIDType): void
    {
        $this->taxIDType = $taxIDType;
    }

    /**
     * Returns Vat Info.
     */
    public function getVatInfo(): ?VatInfo
    {
        return $this->vatInfo;
    }

    /**
     * Sets Vat Info.
     *
     * @maps vatInfo
     */
    public function setVatInfo(?VatInfo $vatInfo): void
    {
        $this->vatInfo = $vatInfo;
    }

    /**
     * Returns Tax Form Type.
     * [NA] Type of tax form provided
     */
    public function getTaxFormType(): ?string
    {
        return $this->taxFormType;
    }

    /**
     * Sets Tax Form Type.
     * [NA] Type of tax form provided
     *
     * @maps taxFormType
     * @factory \SwaggerScarecrowLib\Models\TaxFormTypeEnum::checkValue
     */
    public function setTaxFormType(?string $taxFormType): void
    {
        $this->taxFormType = $taxFormType;
    }

    /**
     * Returns Tax Class Type.
     * [NA] Type of business's tax classification
     */
    public function getTaxClassType(): ?string
    {
        return $this->taxClassType;
    }

    /**
     * Sets Tax Class Type.
     * [NA] Type of business's tax classification
     *
     * @maps taxClassType
     * @factory \SwaggerScarecrowLib\Models\TaxClassTypeEnum::checkValue
     */
    public function setTaxClassType(?string $taxClassType): void
    {
        $this->taxClassType = $taxClassType;
    }

    /**
     * Returns Customer Membership Number.
     * [NA] Business membership number (ex. COSTCO)
     */
    public function getCustomerMembershipNumber(): ?string
    {
        return $this->customerMembershipNumber;
    }

    /**
     * Sets Customer Membership Number.
     * [NA] Business membership number (ex. COSTCO)
     *
     * @maps customerMembershipNumber
     */
    public function setCustomerMembershipNumber(?string $customerMembershipNumber): void
    {
        $this->customerMembershipNumber = $customerMembershipNumber;
    }

    /**
     * Returns Product Description.
     * Description of product/service business provides
     */
    public function getProductDescription(): string
    {
        return $this->productDescription;
    }

    /**
     * Sets Product Description.
     * Description of product/service business provides
     *
     * @required
     * @maps productDescription
     */
    public function setProductDescription(string $productDescription): void
    {
        $this->productDescription = $productDescription;
    }

    /**
     * Returns Mcc Code.
     * Extended MCC code business qualifies as
     */
    public function getMccCode(): string
    {
        return $this->mccCode;
    }

    /**
     * Sets Mcc Code.
     * Extended MCC code business qualifies as
     *
     * @required
     * @maps mccCode
     */
    public function setMccCode(string $mccCode): void
    {
        $this->mccCode = $mccCode;
    }

    /**
     * Returns Establishment Year.
     * Year business was established
     */
    public function getEstablishmentYear(): string
    {
        return $this->establishmentYear;
    }

    /**
     * Sets Establishment Year.
     * Year business was established
     *
     * @required
     * @maps establishmentYear
     */
    public function setEstablishmentYear(string $establishmentYear): void
    {
        $this->establishmentYear = $establishmentYear;
    }

    /**
     * Returns Current Ownership Years.
     * Years business has been in control of current ownership
     */
    public function getCurrentOwnershipYears(): string
    {
        return $this->currentOwnershipYears;
    }

    /**
     * Sets Current Ownership Years.
     * Years business has been in control of current ownership
     *
     * @required
     * @maps currentOwnershipYears
     */
    public function setCurrentOwnershipYears(string $currentOwnershipYears): void
    {
        $this->currentOwnershipYears = $currentOwnershipYears;
    }

    /**
     * Returns Current Ownership Months.
     * Months business has been in control of current ownership
     */
    public function getCurrentOwnershipMonths(): string
    {
        return $this->currentOwnershipMonths;
    }

    /**
     * Sets Current Ownership Months.
     * Months business has been in control of current ownership
     *
     * @required
     * @maps currentOwnershipMonths
     */
    public function setCurrentOwnershipMonths(string $currentOwnershipMonths): void
    {
        $this->currentOwnershipMonths = $currentOwnershipMonths;
    }

    /**
     * Returns Government Owned Entity.
     * [EU] Indicate if more than 50% of the business is owned by the government. This field is mandatory
     * for all ownership types.
     */
    public function getGovernmentOwnedEntity(): ?bool
    {
        return $this->governmentOwnedEntity;
    }

    /**
     * Sets Government Owned Entity.
     * [EU] Indicate if more than 50% of the business is owned by the government. This field is mandatory
     * for all ownership types.
     *
     * @maps governmentOwnedEntity
     */
    public function setGovernmentOwnedEntity(?bool $governmentOwnedEntity): void
    {
        $this->governmentOwnedEntity = $governmentOwnedEntity;
    }

    /**
     * Returns Communication Language.
     * Language to be used for legal documents and communication between business and customer, ISO 639-1
     * standard applies
     */
    public function getCommunicationLanguage(): string
    {
        return $this->communicationLanguage;
    }

    /**
     * Sets Communication Language.
     * Language to be used for legal documents and communication between business and customer, ISO 639-1
     * standard applies
     *
     * @required
     * @maps communicationLanguage
     */
    public function setCommunicationLanguage(string $communicationLanguage): void
    {
        $this->communicationLanguage = $communicationLanguage;
    }

    /**
     * Returns Pos Language.
     * Language to be used for equipment displays, ISO 639-1 standard applies
     */
    public function getPosLanguage(): string
    {
        return $this->posLanguage;
    }

    /**
     * Sets Pos Language.
     * Language to be used for equipment displays, ISO 639-1 standard applies
     *
     * @required
     * @maps posLanguage
     */
    public function setPosLanguage(string $posLanguage): void
    {
        $this->posLanguage = $posLanguage;
    }

    /**
     * Returns Store Number.
     * [EU] Business store number
     */
    public function getStoreNumber(): ?string
    {
        return $this->storeNumber;
    }

    /**
     * Sets Store Number.
     * [EU] Business store number
     *
     * @maps storeNumber
     */
    public function setStoreNumber(?string $storeNumber): void
    {
        $this->storeNumber = $storeNumber;
    }

    /**
     * Returns Association Codes.
     * [EU] Elavon promotion/assocation code listing
     *
     * @return string[]|null
     */
    public function getAssociationCodes(): ?array
    {
        return $this->associationCodes;
    }

    /**
     * Sets Association Codes.
     * [EU] Elavon promotion/assocation code listing
     *
     * @maps associationCodes
     *
     * @param string[]|null $associationCodes
     */
    public function setAssociationCodes(?array $associationCodes): void
    {
        $this->associationCodes = $associationCodes;
    }

    /**
     * Returns Opt Out.
     * [EU] Elavon marketing opt out flag, true if opt out YES, false if opt out NO
     */
    public function getOptOut(): ?bool
    {
        return $this->optOut;
    }

    /**
     * Sets Opt Out.
     * [EU] Elavon marketing opt out flag, true if opt out YES, false if opt out NO
     *
     * @maps optOut
     */
    public function setOptOut(?bool $optOut): void
    {
        $this->optOut = $optOut;
    }

    /**
     * Returns Sign Date.
     * A container that holds the date (day, month, and year)
     */
    public function getSignDate(): ?DateComponents
    {
        return $this->signDate;
    }

    /**
     * Sets Sign Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps signDate
     */
    public function setSignDate(?DateComponents $signDate): void
    {
        $this->signDate = $signDate;
    }

    /**
     * Returns Pci Info.
     */
    public function getPciInfo(): ?PCIInfo
    {
        return $this->pciInfo;
    }

    /**
     * Sets Pci Info.
     *
     * @maps pciInfo
     */
    public function setPciInfo(?PCIInfo $pciInfo): void
    {
        $this->pciInfo = $pciInfo;
    }

    /**
     * Returns Employer Id.
     * [NA] Employer id
     */
    public function getEmployerId(): ?string
    {
        return $this->employerId;
    }

    /**
     * Sets Employer Id.
     * [NA] Employer id
     *
     * @maps employerId
     */
    public function setEmployerId(?string $employerId): void
    {
        $this->employerId = $employerId;
    }

    /**
     * Returns Country of Origin.
     * Country of business origin, ISO 3166-1 alpha-3 standard applies
     */
    public function getCountryOfOrigin(): ?string
    {
        return $this->countryOfOrigin;
    }

    /**
     * Sets Country of Origin.
     * Country of business origin, ISO 3166-1 alpha-3 standard applies
     *
     * @maps countryOfOrigin
     */
    public function setCountryOfOrigin(?string $countryOfOrigin): void
    {
        $this->countryOfOrigin = $countryOfOrigin;
    }

    /**
     * Returns Exemption Type.
     * [NA] Exemption type of business (AML)
     */
    public function getExemptionType(): ?string
    {
        return $this->exemptionType;
    }

    /**
     * Sets Exemption Type.
     * [NA] Exemption type of business (AML)
     *
     * @maps exemptionType
     * @factory \SwaggerScarecrowLib\Models\ExemptionTypeEnum::checkValue
     */
    public function setExemptionType(?string $exemptionType): void
    {
        $this->exemptionType = $exemptionType;
    }

    /**
     * Returns Owner Exemption Type.
     * [NA] Exemption type of owner (AML)
     */
    public function getOwnerExemptionType(): ?string
    {
        return $this->ownerExemptionType;
    }

    /**
     * Sets Owner Exemption Type.
     * [NA] Exemption type of owner (AML)
     *
     * @maps ownerExemptionType
     * @factory \SwaggerScarecrowLib\Models\OwnerExemptionTypeEnum::checkValue
     */
    public function setOwnerExemptionType(?string $ownerExemptionType): void
    {
        $this->ownerExemptionType = $ownerExemptionType;
    }

    /**
     * Returns Number of Partners.
     * [EU] Number of partners business has, applicable if business is any kind of PARTNERSHIP
     */
    public function getNumberOfPartners(): ?string
    {
        return $this->numberOfPartners;
    }

    /**
     * Sets Number of Partners.
     * [EU] Number of partners business has, applicable if business is any kind of PARTNERSHIP
     *
     * @maps numberOfPartners
     * @factory \SwaggerScarecrowLib\Models\NumberOfPartnersEnum::checkValue
     */
    public function setNumberOfPartners(?string $numberOfPartners): void
    {
        $this->numberOfPartners = $numberOfPartners;
    }

    /**
     * Returns Relationship Mgr Code.
     * [EU] Relationship manager code
     */
    public function getRelationshipMgrCode(): ?string
    {
        return $this->relationshipMgrCode;
    }

    /**
     * Sets Relationship Mgr Code.
     * [EU] Relationship manager code
     *
     * @maps relationshipMgrCode
     */
    public function setRelationshipMgrCode(?string $relationshipMgrCode): void
    {
        $this->relationshipMgrCode = $relationshipMgrCode;
    }

    /**
     * Returns Country of Primary Operation.
     * Country of business primary operation, ISO 3166-1 alpha-3 standard applies
     */
    public function getCountryOfPrimaryOperation(): ?string
    {
        return $this->countryOfPrimaryOperation;
    }

    /**
     * Sets Country of Primary Operation.
     * Country of business primary operation, ISO 3166-1 alpha-3 standard applies
     *
     * @maps countryOfPrimaryOperation
     */
    public function setCountryOfPrimaryOperation(?string $countryOfPrimaryOperation): void
    {
        $this->countryOfPrimaryOperation = $countryOfPrimaryOperation;
    }

    /**
     * Returns Bearer Shares.
     * [NA] Flag indicating if business has bearer shares, true if YES, false if NO
     */
    public function getBearerShares(): ?bool
    {
        return $this->bearerShares;
    }

    /**
     * Sets Bearer Shares.
     * [NA] Flag indicating if business has bearer shares, true if YES, false if NO
     *
     * @maps bearerShares
     */
    public function setBearerShares(?bool $bearerShares): void
    {
        $this->bearerShares = $bearerShares;
    }

    /**
     * Returns Legal Status.
     * [NA] Business entity legal status
     */
    public function getLegalStatus(): ?string
    {
        return $this->legalStatus;
    }

    /**
     * Sets Legal Status.
     * [NA] Business entity legal status
     *
     * @maps legalStatus
     * @factory \SwaggerScarecrowLib\Models\LegalStatusEnum::checkValue
     */
    public function setLegalStatus(?string $legalStatus): void
    {
        $this->legalStatus = $legalStatus;
    }

    /**
     * Returns Verifications.
     * [NA] Anti-Money Laundering (AML) oriented documentation info for the business. The valid keys are as
     * follows: BUSINESS, LEGAL, SHIPPING, MAILING, PRINCIPAL, PREVIOUS, STATEMENT
     *
     * @return array<string,VerificationInfo>|null
     */
    public function getVerifications(): ?array
    {
        return $this->verifications;
    }

    /**
     * Sets Verifications.
     * [NA] Anti-Money Laundering (AML) oriented documentation info for the business. The valid keys are as
     * follows: BUSINESS, LEGAL, SHIPPING, MAILING, PRINCIPAL, PREVIOUS, STATEMENT
     *
     * @maps verifications
     *
     * @param array<string,VerificationInfo>|null $verifications
     */
    public function setVerifications(?array $verifications): void
    {
        $this->verifications = $verifications;
    }

    /**
     * Returns Industry Class.
     * [NA] Business industry classification
     */
    public function getIndustryClass(): ?string
    {
        return $this->industryClass;
    }

    /**
     * Sets Industry Class.
     * [NA] Business industry classification
     *
     * @maps industryClass
     * @factory \SwaggerScarecrowLib\Models\IndustryClassEnum::checkValue
     */
    public function setIndustryClass(?string $industryClass): void
    {
        $this->industryClass = $industryClass;
    }

    /**
     * Returns No Plates.
     * [NA] Flag indicating if plates are to be delivered to business, true if no delivery, false if yes to
     * delivery (NA)
     */
    public function getNoPlates(): ?bool
    {
        return $this->noPlates;
    }

    /**
     * Sets No Plates.
     * [NA] Flag indicating if plates are to be delivered to business, true if no delivery, false if yes to
     * delivery (NA)
     *
     * @maps noPlates
     */
    public function setNoPlates(?bool $noPlates): void
    {
        $this->noPlates = $noPlates;
    }

    /**
     * Returns Agent Number.
     * [NA] Agent number
     */
    public function getAgentNumber(): ?string
    {
        return $this->agentNumber;
    }

    /**
     * Sets Agent Number.
     * [NA] Agent number
     *
     * @maps agentNumber
     */
    public function setAgentNumber(?string $agentNumber): void
    {
        $this->agentNumber = $agentNumber;
    }

    /**
     * Returns Location Mid Range.
     * [EU] 10 character MID range for Nordics.
     */
    public function getLocationMidRange(): ?string
    {
        return $this->locationMidRange;
    }

    /**
     * Sets Location Mid Range.
     * [EU] 10 character MID range for Nordics.
     *
     * @maps locationMidRange
     * @factory \SwaggerScarecrowLib\Models\LocationMidRangeEnum::checkValue
     */
    public function setLocationMidRange(?string $locationMidRange): void
    {
        $this->locationMidRange = $locationMidRange;
    }

    /**
     * Returns Hemp Grower Info.
     */
    public function getHempGrowerInfo(): ?HempGrowerInfo
    {
        return $this->hempGrowerInfo;
    }

    /**
     * Sets Hemp Grower Info.
     *
     * @maps hempGrowerInfo
     */
    public function setHempGrowerInfo(?HempGrowerInfo $hempGrowerInfo): void
    {
        $this->hempGrowerInfo = $hempGrowerInfo;
    }

    /**
     * Returns Credit Decision Info.
     */
    public function getCreditDecisionInfo(): ?CreditDecisionInfo
    {
        return $this->creditDecisionInfo;
    }

    /**
     * Sets Credit Decision Info.
     *
     * @maps creditDecisionInfo
     */
    public function setCreditDecisionInfo(?CreditDecisionInfo $creditDecisionInfo): void
    {
        $this->creditDecisionInfo = $creditDecisionInfo;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['dbaName']                       = $this->dbaName;
        $json['dbaNameExtended']               = $this->dbaNameExtended;
        $json['businessAddress']               = $this->businessAddress;
        $json['legalName']                     = $this->legalName;
        $json['legalNameExtended']             = $this->legalNameExtended;
        if (isset($this->legalNameMarked)) {
            $json['legalNameMarked']           = $this->legalNameMarked;
        }
        $json['additionalAddresses']           = $this->additionalAddresses;
        $json['ownershipType']                 = OwnershipTypeEnum::checkValue($this->ownershipType);
        if (isset($this->registrationNumber)) {
            $json['registrationNumber']        = $this->registrationNumber;
        }
        if (isset($this->taxID)) {
            $json['taxID']                     = $this->taxID;
        }
        if (isset($this->taxIDType)) {
            $json['taxIDType']                 = TaxIDTypeEnum::checkValue($this->taxIDType);
        }
        if (isset($this->vatInfo)) {
            $json['vatInfo']                   = $this->vatInfo;
        }
        if (isset($this->taxFormType)) {
            $json['taxFormType']               = TaxFormTypeEnum::checkValue($this->taxFormType);
        }
        if (isset($this->taxClassType)) {
            $json['taxClassType']              = TaxClassTypeEnum::checkValue($this->taxClassType);
        }
        if (isset($this->customerMembershipNumber)) {
            $json['customerMembershipNumber']  = $this->customerMembershipNumber;
        }
        $json['productDescription']            = $this->productDescription;
        $json['mccCode']                       = $this->mccCode;
        $json['establishmentYear']             = $this->establishmentYear;
        $json['currentOwnershipYears']         = $this->currentOwnershipYears;
        $json['currentOwnershipMonths']        = $this->currentOwnershipMonths;
        if (isset($this->governmentOwnedEntity)) {
            $json['governmentOwnedEntity']     = $this->governmentOwnedEntity;
        }
        $json['communicationLanguage']         = $this->communicationLanguage;
        $json['posLanguage']                   = $this->posLanguage;
        if (isset($this->storeNumber)) {
            $json['storeNumber']               = $this->storeNumber;
        }
        if (isset($this->associationCodes)) {
            $json['associationCodes']          = $this->associationCodes;
        }
        if (isset($this->optOut)) {
            $json['optOut']                    = $this->optOut;
        }
        if (isset($this->signDate)) {
            $json['signDate']                  = $this->signDate;
        }
        if (isset($this->pciInfo)) {
            $json['pciInfo']                   = $this->pciInfo;
        }
        if (isset($this->employerId)) {
            $json['employerId']                = $this->employerId;
        }
        if (isset($this->countryOfOrigin)) {
            $json['countryOfOrigin']           = $this->countryOfOrigin;
        }
        if (isset($this->exemptionType)) {
            $json['exemptionType']             = ExemptionTypeEnum::checkValue($this->exemptionType);
        }
        if (isset($this->ownerExemptionType)) {
            $json['ownerExemptionType']        = OwnerExemptionTypeEnum::checkValue($this->ownerExemptionType);
        }
        if (isset($this->numberOfPartners)) {
            $json['numberOfPartners']          = NumberOfPartnersEnum::checkValue($this->numberOfPartners);
        }
        if (isset($this->relationshipMgrCode)) {
            $json['relationshipMgrCode']       = $this->relationshipMgrCode;
        }
        if (isset($this->countryOfPrimaryOperation)) {
            $json['countryOfPrimaryOperation'] = $this->countryOfPrimaryOperation;
        }
        if (isset($this->bearerShares)) {
            $json['bearerShares']              = $this->bearerShares;
        }
        if (isset($this->legalStatus)) {
            $json['legalStatus']               = LegalStatusEnum::checkValue($this->legalStatus);
        }
        if (isset($this->verifications)) {
            $json['verifications']             = $this->verifications;
        }
        if (isset($this->industryClass)) {
            $json['industryClass']             = IndustryClassEnum::checkValue($this->industryClass);
        }
        if (isset($this->noPlates)) {
            $json['noPlates']                  = $this->noPlates;
        }
        if (isset($this->agentNumber)) {
            $json['agentNumber']               = $this->agentNumber;
        }
        if (isset($this->locationMidRange)) {
            $json['locationMidRange']          = LocationMidRangeEnum::checkValue($this->locationMidRange);
        }
        if (isset($this->hempGrowerInfo)) {
            $json['hempGrowerInfo']            = $this->hempGrowerInfo;
        }
        if (isset($this->creditDecisionInfo)) {
            $json['creditDecisionInfo']        = $this->creditDecisionInfo;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
