<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class ServletRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $contentLength;

    /**
     * @var Locale|null
     */
    private $locale;

    /**
     * @var string|null
     */
    private $protocol;

    /**
     * @var string|null
     */
    private $scheme;

    /**
     * @var ServletInputStream|null
     */
    private $inputStream;

    /**
     * @var string|null
     */
    private $localName;

    /**
     * @var array|null
     */
    private $parameterNames;

    /**
     * @var string|null
     */
    private $serverName;

    /**
     * @var array|null
     */
    private $attributeNames;

    /**
     * @var array|null
     */
    private $parameterMap;

    /**
     * @var string|null
     */
    private $localAddr;

    /**
     * @var int|null
     */
    private $remotePort;

    /**
     * @var bool|null
     */
    private $secure;

    /**
     * @var int|null
     */
    private $localPort;

    /**
     * @var string|null
     */
    private $remoteAddr;

    /**
     * @var string|null
     */
    private $remoteHost;

    /**
     * @var array|null
     */
    private $reader;

    /**
     * @var int|null
     */
    private $serverPort;

    /**
     * @var array|null
     */
    private $locales;

    /**
     * @var string|null
     */
    private $characterEncoding;

    /**
     * @var ServletContext|null
     */
    private $servletContext;

    /**
     * @var bool|null
     */
    private $asyncStarted;

    /**
     * @var bool|null
     */
    private $asyncSupported;

    /**
     * @var AsyncContext|null
     */
    private $asyncContext;

    /**
     * @var string|null
     */
    private $dispatcherType;

    /**
     * @var int|null
     */
    private $contentLengthLong;

    /**
     * @var string|null
     */
    private $contentType;

    /**
     * Returns Content Length.
     */
    public function getContentLength(): ?int
    {
        return $this->contentLength;
    }

    /**
     * Sets Content Length.
     *
     * @maps contentLength
     */
    public function setContentLength(?int $contentLength): void
    {
        $this->contentLength = $contentLength;
    }

    /**
     * Returns Locale.
     */
    public function getLocale(): ?Locale
    {
        return $this->locale;
    }

    /**
     * Sets Locale.
     *
     * @maps locale
     */
    public function setLocale(?Locale $locale): void
    {
        $this->locale = $locale;
    }

    /**
     * Returns Protocol.
     */
    public function getProtocol(): ?string
    {
        return $this->protocol;
    }

    /**
     * Sets Protocol.
     *
     * @maps protocol
     */
    public function setProtocol(?string $protocol): void
    {
        $this->protocol = $protocol;
    }

    /**
     * Returns Scheme.
     */
    public function getScheme(): ?string
    {
        return $this->scheme;
    }

    /**
     * Sets Scheme.
     *
     * @maps scheme
     */
    public function setScheme(?string $scheme): void
    {
        $this->scheme = $scheme;
    }

    /**
     * Returns Input Stream.
     */
    public function getInputStream(): ?ServletInputStream
    {
        return $this->inputStream;
    }

    /**
     * Sets Input Stream.
     *
     * @maps inputStream
     */
    public function setInputStream(?ServletInputStream $inputStream): void
    {
        $this->inputStream = $inputStream;
    }

    /**
     * Returns Local Name.
     */
    public function getLocalName(): ?string
    {
        return $this->localName;
    }

    /**
     * Sets Local Name.
     *
     * @maps localName
     */
    public function setLocalName(?string $localName): void
    {
        $this->localName = $localName;
    }

    /**
     * Returns Parameter Names.
     */
    public function getParameterNames(): ?array
    {
        return $this->parameterNames;
    }

    /**
     * Sets Parameter Names.
     *
     * @maps parameterNames
     */
    public function setParameterNames(?array $parameterNames): void
    {
        $this->parameterNames = $parameterNames;
    }

    /**
     * Returns Server Name.
     */
    public function getServerName(): ?string
    {
        return $this->serverName;
    }

    /**
     * Sets Server Name.
     *
     * @maps serverName
     */
    public function setServerName(?string $serverName): void
    {
        $this->serverName = $serverName;
    }

    /**
     * Returns Attribute Names.
     */
    public function getAttributeNames(): ?array
    {
        return $this->attributeNames;
    }

    /**
     * Sets Attribute Names.
     *
     * @maps attributeNames
     */
    public function setAttributeNames(?array $attributeNames): void
    {
        $this->attributeNames = $attributeNames;
    }

    /**
     * Returns Parameter Map.
     */
    public function getParameterMap(): ?array
    {
        return $this->parameterMap;
    }

    /**
     * Sets Parameter Map.
     *
     * @maps parameterMap
     */
    public function setParameterMap(?array $parameterMap): void
    {
        $this->parameterMap = $parameterMap;
    }

    /**
     * Returns Local Addr.
     */
    public function getLocalAddr(): ?string
    {
        return $this->localAddr;
    }

    /**
     * Sets Local Addr.
     *
     * @maps localAddr
     */
    public function setLocalAddr(?string $localAddr): void
    {
        $this->localAddr = $localAddr;
    }

    /**
     * Returns Remote Port.
     */
    public function getRemotePort(): ?int
    {
        return $this->remotePort;
    }

    /**
     * Sets Remote Port.
     *
     * @maps remotePort
     */
    public function setRemotePort(?int $remotePort): void
    {
        $this->remotePort = $remotePort;
    }

    /**
     * Returns Secure.
     */
    public function getSecure(): ?bool
    {
        return $this->secure;
    }

    /**
     * Sets Secure.
     *
     * @maps secure
     */
    public function setSecure(?bool $secure): void
    {
        $this->secure = $secure;
    }

    /**
     * Returns Local Port.
     */
    public function getLocalPort(): ?int
    {
        return $this->localPort;
    }

    /**
     * Sets Local Port.
     *
     * @maps localPort
     */
    public function setLocalPort(?int $localPort): void
    {
        $this->localPort = $localPort;
    }

    /**
     * Returns Remote Addr.
     */
    public function getRemoteAddr(): ?string
    {
        return $this->remoteAddr;
    }

    /**
     * Sets Remote Addr.
     *
     * @maps remoteAddr
     */
    public function setRemoteAddr(?string $remoteAddr): void
    {
        $this->remoteAddr = $remoteAddr;
    }

    /**
     * Returns Remote Host.
     */
    public function getRemoteHost(): ?string
    {
        return $this->remoteHost;
    }

    /**
     * Sets Remote Host.
     *
     * @maps remoteHost
     */
    public function setRemoteHost(?string $remoteHost): void
    {
        $this->remoteHost = $remoteHost;
    }

    /**
     * Returns Reader.
     */
    public function getReader(): ?array
    {
        return $this->reader;
    }

    /**
     * Sets Reader.
     *
     * @maps reader
     */
    public function setReader(?array $reader): void
    {
        $this->reader = $reader;
    }

    /**
     * Returns Server Port.
     */
    public function getServerPort(): ?int
    {
        return $this->serverPort;
    }

    /**
     * Sets Server Port.
     *
     * @maps serverPort
     */
    public function setServerPort(?int $serverPort): void
    {
        $this->serverPort = $serverPort;
    }

    /**
     * Returns Locales.
     */
    public function getLocales(): ?array
    {
        return $this->locales;
    }

    /**
     * Sets Locales.
     *
     * @maps locales
     */
    public function setLocales(?array $locales): void
    {
        $this->locales = $locales;
    }

    /**
     * Returns Character Encoding.
     */
    public function getCharacterEncoding(): ?string
    {
        return $this->characterEncoding;
    }

    /**
     * Sets Character Encoding.
     *
     * @maps characterEncoding
     */
    public function setCharacterEncoding(?string $characterEncoding): void
    {
        $this->characterEncoding = $characterEncoding;
    }

    /**
     * Returns Servlet Context.
     */
    public function getServletContext(): ?ServletContext
    {
        return $this->servletContext;
    }

    /**
     * Sets Servlet Context.
     *
     * @maps servletContext
     */
    public function setServletContext(?ServletContext $servletContext): void
    {
        $this->servletContext = $servletContext;
    }

    /**
     * Returns Async Started.
     */
    public function getAsyncStarted(): ?bool
    {
        return $this->asyncStarted;
    }

    /**
     * Sets Async Started.
     *
     * @maps asyncStarted
     */
    public function setAsyncStarted(?bool $asyncStarted): void
    {
        $this->asyncStarted = $asyncStarted;
    }

    /**
     * Returns Async Supported.
     */
    public function getAsyncSupported(): ?bool
    {
        return $this->asyncSupported;
    }

    /**
     * Sets Async Supported.
     *
     * @maps asyncSupported
     */
    public function setAsyncSupported(?bool $asyncSupported): void
    {
        $this->asyncSupported = $asyncSupported;
    }

    /**
     * Returns Async Context.
     */
    public function getAsyncContext(): ?AsyncContext
    {
        return $this->asyncContext;
    }

    /**
     * Sets Async Context.
     *
     * @maps asyncContext
     */
    public function setAsyncContext(?AsyncContext $asyncContext): void
    {
        $this->asyncContext = $asyncContext;
    }

    /**
     * Returns Dispatcher Type.
     */
    public function getDispatcherType(): ?string
    {
        return $this->dispatcherType;
    }

    /**
     * Sets Dispatcher Type.
     *
     * @maps dispatcherType
     * @factory \SwaggerScarecrowLib\Models\DispatcherTypeEnum::checkValue
     */
    public function setDispatcherType(?string $dispatcherType): void
    {
        $this->dispatcherType = $dispatcherType;
    }

    /**
     * Returns Content Length Long.
     */
    public function getContentLengthLong(): ?int
    {
        return $this->contentLengthLong;
    }

    /**
     * Sets Content Length Long.
     *
     * @maps contentLengthLong
     */
    public function setContentLengthLong(?int $contentLengthLong): void
    {
        $this->contentLengthLong = $contentLengthLong;
    }

    /**
     * Returns Content Type.
     */
    public function getContentType(): ?string
    {
        return $this->contentType;
    }

    /**
     * Sets Content Type.
     *
     * @maps contentType
     */
    public function setContentType(?string $contentType): void
    {
        $this->contentType = $contentType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->contentLength)) {
            $json['contentLength']     = $this->contentLength;
        }
        if (isset($this->locale)) {
            $json['locale']            = $this->locale;
        }
        if (isset($this->protocol)) {
            $json['protocol']          = $this->protocol;
        }
        if (isset($this->scheme)) {
            $json['scheme']            = $this->scheme;
        }
        if (isset($this->inputStream)) {
            $json['inputStream']       = $this->inputStream;
        }
        if (isset($this->localName)) {
            $json['localName']         = $this->localName;
        }
        if (isset($this->parameterNames)) {
            $json['parameterNames']    = $this->parameterNames;
        }
        if (isset($this->serverName)) {
            $json['serverName']        = $this->serverName;
        }
        if (isset($this->attributeNames)) {
            $json['attributeNames']    = $this->attributeNames;
        }
        if (isset($this->parameterMap)) {
            $json['parameterMap']      = $this->parameterMap;
        }
        if (isset($this->localAddr)) {
            $json['localAddr']         = $this->localAddr;
        }
        if (isset($this->remotePort)) {
            $json['remotePort']        = $this->remotePort;
        }
        if (isset($this->secure)) {
            $json['secure']            = $this->secure;
        }
        if (isset($this->localPort)) {
            $json['localPort']         = $this->localPort;
        }
        if (isset($this->remoteAddr)) {
            $json['remoteAddr']        = $this->remoteAddr;
        }
        if (isset($this->remoteHost)) {
            $json['remoteHost']        = $this->remoteHost;
        }
        if (isset($this->reader)) {
            $json['reader']            = $this->reader;
        }
        if (isset($this->serverPort)) {
            $json['serverPort']        = $this->serverPort;
        }
        if (isset($this->locales)) {
            $json['locales']           = $this->locales;
        }
        if (isset($this->characterEncoding)) {
            $json['characterEncoding'] = $this->characterEncoding;
        }
        if (isset($this->servletContext)) {
            $json['servletContext']    = $this->servletContext;
        }
        if (isset($this->asyncStarted)) {
            $json['asyncStarted']      = $this->asyncStarted;
        }
        if (isset($this->asyncSupported)) {
            $json['asyncSupported']    = $this->asyncSupported;
        }
        if (isset($this->asyncContext)) {
            $json['asyncContext']      = $this->asyncContext;
        }
        if (isset($this->dispatcherType)) {
            $json['dispatcherType']    = DispatcherTypeEnum::checkValue($this->dispatcherType);
        }
        if (isset($this->contentLengthLong)) {
            $json['contentLengthLong'] = $this->contentLengthLong;
        }
        if (isset($this->contentType)) {
            $json['contentType']       = $this->contentType;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
