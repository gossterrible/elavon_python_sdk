<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class FraudCheckResult implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $transactionId;

    /**
     * @var string|null
     */
    private $decision;

    /**
     * Returns Transaction Id.
     * Unique identifier of quiz response, to be used in answer request for the quiz
     */
    public function getTransactionId(): ?string
    {
        return $this->transactionId;
    }

    /**
     * Sets Transaction Id.
     * Unique identifier of quiz response, to be used in answer request for the quiz
     *
     * @maps transactionId
     */
    public function setTransactionId(?string $transactionId): void
    {
        $this->transactionId = $transactionId;
    }

    /**
     * Returns Decision.
     * Result reached by quiz process
     */
    public function getDecision(): ?string
    {
        return $this->decision;
    }

    /**
     * Sets Decision.
     * Result reached by quiz process
     *
     * @maps decision
     * @factory \SwaggerScarecrowLib\Models\DecisionEnum::checkValue
     */
    public function setDecision(?string $decision): void
    {
        $this->decision = $decision;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->transactionId)) {
            $json['transactionId'] = $this->transactionId;
        }
        if (isset($this->decision)) {
            $json['decision']      = DecisionEnum::checkValue($this->decision);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
