<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class HttpSession implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $creationTime;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var bool|null
     */
    private $mNew;

    /**
     * @var array|null
     */
    private $attributeNames;

    /**
     * @var HttpSessionContext|null
     */
    private $sessionContext;

    /**
     * @var int|null
     */
    private $lastAccessedTime;

    /**
     * @var string[]|null
     */
    private $valueNames;

    /**
     * @var ServletContext|null
     */
    private $servletContext;

    /**
     * @var int|null
     */
    private $maxInactiveInterval;

    /**
     * Returns Creation Time.
     */
    public function getCreationTime(): ?int
    {
        return $this->creationTime;
    }

    /**
     * Sets Creation Time.
     *
     * @maps creationTime
     */
    public function setCreationTime(?int $creationTime): void
    {
        $this->creationTime = $creationTime;
    }

    /**
     * Returns Id.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns M New.
     */
    public function getMNew(): ?bool
    {
        return $this->mNew;
    }

    /**
     * Sets M New.
     *
     * @maps new
     */
    public function setMNew(?bool $mNew): void
    {
        $this->mNew = $mNew;
    }

    /**
     * Returns Attribute Names.
     */
    public function getAttributeNames(): ?array
    {
        return $this->attributeNames;
    }

    /**
     * Sets Attribute Names.
     *
     * @maps attributeNames
     */
    public function setAttributeNames(?array $attributeNames): void
    {
        $this->attributeNames = $attributeNames;
    }

    /**
     * Returns Session Context.
     */
    public function getSessionContext(): ?HttpSessionContext
    {
        return $this->sessionContext;
    }

    /**
     * Sets Session Context.
     *
     * @maps sessionContext
     */
    public function setSessionContext(?HttpSessionContext $sessionContext): void
    {
        $this->sessionContext = $sessionContext;
    }

    /**
     * Returns Last Accessed Time.
     */
    public function getLastAccessedTime(): ?int
    {
        return $this->lastAccessedTime;
    }

    /**
     * Sets Last Accessed Time.
     *
     * @maps lastAccessedTime
     */
    public function setLastAccessedTime(?int $lastAccessedTime): void
    {
        $this->lastAccessedTime = $lastAccessedTime;
    }

    /**
     * Returns Value Names.
     *
     * @return string[]|null
     */
    public function getValueNames(): ?array
    {
        return $this->valueNames;
    }

    /**
     * Sets Value Names.
     *
     * @maps valueNames
     *
     * @param string[]|null $valueNames
     */
    public function setValueNames(?array $valueNames): void
    {
        $this->valueNames = $valueNames;
    }

    /**
     * Returns Servlet Context.
     */
    public function getServletContext(): ?ServletContext
    {
        return $this->servletContext;
    }

    /**
     * Sets Servlet Context.
     *
     * @maps servletContext
     */
    public function setServletContext(?ServletContext $servletContext): void
    {
        $this->servletContext = $servletContext;
    }

    /**
     * Returns Max Inactive Interval.
     */
    public function getMaxInactiveInterval(): ?int
    {
        return $this->maxInactiveInterval;
    }

    /**
     * Sets Max Inactive Interval.
     *
     * @maps maxInactiveInterval
     */
    public function setMaxInactiveInterval(?int $maxInactiveInterval): void
    {
        $this->maxInactiveInterval = $maxInactiveInterval;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->creationTime)) {
            $json['creationTime']        = $this->creationTime;
        }
        if (isset($this->id)) {
            $json['id']                  = $this->id;
        }
        if (isset($this->mNew)) {
            $json['new']                 = $this->mNew;
        }
        if (isset($this->attributeNames)) {
            $json['attributeNames']      = $this->attributeNames;
        }
        if (isset($this->sessionContext)) {
            $json['sessionContext']      = $this->sessionContext;
        }
        if (isset($this->lastAccessedTime)) {
            $json['lastAccessedTime']    = $this->lastAccessedTime;
        }
        if (isset($this->valueNames)) {
            $json['valueNames']          = $this->valueNames;
        }
        if (isset($this->servletContext)) {
            $json['servletContext']      = $this->servletContext;
        }
        if (isset($this->maxInactiveInterval)) {
            $json['maxInactiveInterval'] = $this->maxInactiveInterval;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
