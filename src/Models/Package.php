<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class Package implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $specificationTitle;

    /**
     * @var string|null
     */
    private $specificationVersion;

    /**
     * @var string|null
     */
    private $specificationVendor;

    /**
     * @var string|null
     */
    private $implementationTitle;

    /**
     * @var string|null
     */
    private $implementationVersion;

    /**
     * @var string|null
     */
    private $implementationVendor;

    /**
     * @var array[]|null
     */
    private $annotations;

    /**
     * @var array[]|null
     */
    private $declaredAnnotations;

    /**
     * @var bool|null
     */
    private $sealed;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Specification Title.
     */
    public function getSpecificationTitle(): ?string
    {
        return $this->specificationTitle;
    }

    /**
     * Sets Specification Title.
     *
     * @maps specificationTitle
     */
    public function setSpecificationTitle(?string $specificationTitle): void
    {
        $this->specificationTitle = $specificationTitle;
    }

    /**
     * Returns Specification Version.
     */
    public function getSpecificationVersion(): ?string
    {
        return $this->specificationVersion;
    }

    /**
     * Sets Specification Version.
     *
     * @maps specificationVersion
     */
    public function setSpecificationVersion(?string $specificationVersion): void
    {
        $this->specificationVersion = $specificationVersion;
    }

    /**
     * Returns Specification Vendor.
     */
    public function getSpecificationVendor(): ?string
    {
        return $this->specificationVendor;
    }

    /**
     * Sets Specification Vendor.
     *
     * @maps specificationVendor
     */
    public function setSpecificationVendor(?string $specificationVendor): void
    {
        $this->specificationVendor = $specificationVendor;
    }

    /**
     * Returns Implementation Title.
     */
    public function getImplementationTitle(): ?string
    {
        return $this->implementationTitle;
    }

    /**
     * Sets Implementation Title.
     *
     * @maps implementationTitle
     */
    public function setImplementationTitle(?string $implementationTitle): void
    {
        $this->implementationTitle = $implementationTitle;
    }

    /**
     * Returns Implementation Version.
     */
    public function getImplementationVersion(): ?string
    {
        return $this->implementationVersion;
    }

    /**
     * Sets Implementation Version.
     *
     * @maps implementationVersion
     */
    public function setImplementationVersion(?string $implementationVersion): void
    {
        $this->implementationVersion = $implementationVersion;
    }

    /**
     * Returns Implementation Vendor.
     */
    public function getImplementationVendor(): ?string
    {
        return $this->implementationVendor;
    }

    /**
     * Sets Implementation Vendor.
     *
     * @maps implementationVendor
     */
    public function setImplementationVendor(?string $implementationVendor): void
    {
        $this->implementationVendor = $implementationVendor;
    }

    /**
     * Returns Annotations.
     *
     * @return array[]|null
     */
    public function getAnnotations(): ?array
    {
        return $this->annotations;
    }

    /**
     * Sets Annotations.
     *
     * @maps annotations
     *
     * @param array[]|null $annotations
     */
    public function setAnnotations(?array $annotations): void
    {
        $this->annotations = $annotations;
    }

    /**
     * Returns Declared Annotations.
     *
     * @return array[]|null
     */
    public function getDeclaredAnnotations(): ?array
    {
        return $this->declaredAnnotations;
    }

    /**
     * Sets Declared Annotations.
     *
     * @maps declaredAnnotations
     *
     * @param array[]|null $declaredAnnotations
     */
    public function setDeclaredAnnotations(?array $declaredAnnotations): void
    {
        $this->declaredAnnotations = $declaredAnnotations;
    }

    /**
     * Returns Sealed.
     */
    public function getSealed(): ?bool
    {
        return $this->sealed;
    }

    /**
     * Sets Sealed.
     *
     * @maps sealed
     */
    public function setSealed(?bool $sealed): void
    {
        $this->sealed = $sealed;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']                  = $this->name;
        }
        if (isset($this->specificationTitle)) {
            $json['specificationTitle']    = $this->specificationTitle;
        }
        if (isset($this->specificationVersion)) {
            $json['specificationVersion']  = $this->specificationVersion;
        }
        if (isset($this->specificationVendor)) {
            $json['specificationVendor']   = $this->specificationVendor;
        }
        if (isset($this->implementationTitle)) {
            $json['implementationTitle']   = $this->implementationTitle;
        }
        if (isset($this->implementationVersion)) {
            $json['implementationVersion'] = $this->implementationVersion;
        }
        if (isset($this->implementationVendor)) {
            $json['implementationVendor']  = $this->implementationVendor;
        }
        if (isset($this->annotations)) {
            $json['annotations']           = $this->annotations;
        }
        if (isset($this->declaredAnnotations)) {
            $json['declaredAnnotations']   = $this->declaredAnnotations;
        }
        if (isset($this->sealed)) {
            $json['sealed']                = $this->sealed;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
