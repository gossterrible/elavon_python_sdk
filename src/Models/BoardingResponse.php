<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class BoardingResponse implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $responseId;

    /**
     * @var string|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $boardingId;

    /**
     * @var string|null
     */
    private $merchantId;

    /**
     * @var string|null
     */
    private $chainId;

    /**
     * @var bool|null
     */
    private $duplicateRequest;

    /**
     * @var string|null
     */
    private $processErrorType;

    /**
     * @var string|null
     */
    private $eframeStatus;

    /**
     * @var string|null
     */
    private $eframeError;

    /**
     * Returns Response Id.
     */
    public function getResponseId(): ?int
    {
        return $this->responseId;
    }

    /**
     * Sets Response Id.
     *
     * @maps responseId
     */
    public function setResponseId(?int $responseId): void
    {
        $this->responseId = $responseId;
    }

    /**
     * Returns Error.
     * Error message from service
     */
    public function getError(): ?string
    {
        return $this->error;
    }

    /**
     * Sets Error.
     * Error message from service
     *
     * @maps error
     */
    public function setError(?string $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Boarding Id.
     * AWB (NA) or ApplicationID/MID (EU)
     */
    public function getBoardingId(): ?string
    {
        return $this->boardingId;
    }

    /**
     * Sets Boarding Id.
     * AWB (NA) or ApplicationID/MID (EU)
     *
     * @maps boardingId
     */
    public function setBoardingId(?string $boardingId): void
    {
        $this->boardingId = $boardingId;
    }

    /**
     * Returns Merchant Id.
     * MID (EU)
     */
    public function getMerchantId(): ?string
    {
        return $this->merchantId;
    }

    /**
     * Sets Merchant Id.
     * MID (EU)
     *
     * @maps merchantId
     */
    public function setMerchantId(?string $merchantId): void
    {
        $this->merchantId = $merchantId;
    }

    /**
     * Returns Chain Id.
     * [NA] New chain id, generated if boarding request specified creation of new chain
     */
    public function getChainId(): ?string
    {
        return $this->chainId;
    }

    /**
     * Sets Chain Id.
     * [NA] New chain id, generated if boarding request specified creation of new chain
     *
     * @maps chainId
     */
    public function setChainId(?string $chainId): void
    {
        $this->chainId = $chainId;
    }

    /**
     * Returns Duplicate Request.
     * True if boarding request was a duplicate request
     */
    public function getDuplicateRequest(): ?bool
    {
        return $this->duplicateRequest;
    }

    /**
     * Sets Duplicate Request.
     * True if boarding request was a duplicate request
     *
     * @maps duplicateRequest
     */
    public function setDuplicateRequest(?bool $duplicateRequest): void
    {
        $this->duplicateRequest = $duplicateRequest;
    }

    /**
     * Returns Process Error Type.
     */
    public function getProcessErrorType(): ?string
    {
        return $this->processErrorType;
    }

    /**
     * Sets Process Error Type.
     *
     * @maps processErrorType
     * @factory \SwaggerScarecrowLib\Models\ProcessErrorTypeEnum::checkValue
     */
    public function setProcessErrorType(?string $processErrorType): void
    {
        $this->processErrorType = $processErrorType;
    }

    /**
     * Returns Eframe Status.
     * [EU][Elavon Germany] Eframe boarding Status
     */
    public function getEframeStatus(): ?string
    {
        return $this->eframeStatus;
    }

    /**
     * Sets Eframe Status.
     * [EU][Elavon Germany] Eframe boarding Status
     *
     * @maps eframeStatus
     * @factory \SwaggerScarecrowLib\Models\EframeStatusEnum::checkValue
     */
    public function setEframeStatus(?string $eframeStatus): void
    {
        $this->eframeStatus = $eframeStatus;
    }

    /**
     * Returns Eframe Error.
     * Error message from Eframe
     */
    public function getEframeError(): ?string
    {
        return $this->eframeError;
    }

    /**
     * Sets Eframe Error.
     * Error message from Eframe
     *
     * @maps eframeError
     */
    public function setEframeError(?string $eframeError): void
    {
        $this->eframeError = $eframeError;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->responseId)) {
            $json['responseId']       = $this->responseId;
        }
        if (isset($this->error)) {
            $json['error']            = $this->error;
        }
        if (isset($this->boardingId)) {
            $json['boardingId']       = $this->boardingId;
        }
        if (isset($this->merchantId)) {
            $json['merchantId']       = $this->merchantId;
        }
        if (isset($this->chainId)) {
            $json['chainId']          = $this->chainId;
        }
        if (isset($this->duplicateRequest)) {
            $json['duplicateRequest'] = $this->duplicateRequest;
        }
        if (isset($this->processErrorType)) {
            $json['processErrorType'] = ProcessErrorTypeEnum::checkValue($this->processErrorType);
        }
        if (isset($this->eframeStatus)) {
            $json['eframeStatus']     = EframeStatusEnum::checkValue($this->eframeStatus);
        }
        if (isset($this->eframeError)) {
            $json['eframeError']      = $this->eframeError;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
