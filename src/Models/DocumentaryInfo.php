<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class DocumentaryInfo implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $documentary;

    /**
     * @var string|null
     */
    private $documentaryVerifier;

    /**
     * @var string|null
     */
    private $documentaryIssuer;

    /**
     * @var string|null
     */
    private $documentaryType;

    /**
     * @var string|null
     */
    private $idNumber;

    /**
     * @var DateComponents|null
     */
    private $issueDate;

    /**
     * @var DateComponents|null
     */
    private $expiryDate;

    /**
     * @var string|null
     */
    private $issuingState;

    /**
     * @var string|null
     */
    private $foreignIssuingState;

    /**
     * @param bool $documentary
     */
    public function __construct(bool $documentary)
    {
        $this->documentary = $documentary;
    }

    /**
     * Returns Documentary.
     * Flag indicating if personal documentary info is to be provided, true if Yes, false if NO
     */
    public function getDocumentary(): bool
    {
        return $this->documentary;
    }

    /**
     * Sets Documentary.
     * Flag indicating if personal documentary info is to be provided, true if Yes, false if NO
     *
     * @required
     * @maps documentary
     */
    public function setDocumentary(bool $documentary): void
    {
        $this->documentary = $documentary;
    }

    /**
     * Returns Documentary Verifier.
     * Verifier of documentary information
     */
    public function getDocumentaryVerifier(): ?string
    {
        return $this->documentaryVerifier;
    }

    /**
     * Sets Documentary Verifier.
     * Verifier of documentary information
     *
     * @maps documentaryVerifier
     * @factory \SwaggerScarecrowLib\Models\DocumentaryVerifierEnum::checkValue
     */
    public function setDocumentaryVerifier(?string $documentaryVerifier): void
    {
        $this->documentaryVerifier = $documentaryVerifier;
    }

    /**
     * Returns Documentary Issuer.
     * Issuer of documentary information
     */
    public function getDocumentaryIssuer(): ?string
    {
        return $this->documentaryIssuer;
    }

    /**
     * Sets Documentary Issuer.
     * Issuer of documentary information
     *
     * @maps documentaryIssuer
     */
    public function setDocumentaryIssuer(?string $documentaryIssuer): void
    {
        $this->documentaryIssuer = $documentaryIssuer;
    }

    /**
     * Returns Documentary Type.
     * Type of documentation provided
     */
    public function getDocumentaryType(): ?string
    {
        return $this->documentaryType;
    }

    /**
     * Sets Documentary Type.
     * Type of documentation provided
     *
     * @maps documentaryType
     * @factory \SwaggerScarecrowLib\Models\DocumentaryTypeEnum::checkValue
     */
    public function setDocumentaryType(?string $documentaryType): void
    {
        $this->documentaryType = $documentaryType;
    }

    /**
     * Returns Id Number.
     * Id number of documentation provided
     */
    public function getIdNumber(): ?string
    {
        return $this->idNumber;
    }

    /**
     * Sets Id Number.
     * Id number of documentation provided
     *
     * @maps idNumber
     */
    public function setIdNumber(?string $idNumber): void
    {
        $this->idNumber = $idNumber;
    }

    /**
     * Returns Issue Date.
     * A container that holds the date (day, month, and year)
     */
    public function getIssueDate(): ?DateComponents
    {
        return $this->issueDate;
    }

    /**
     * Sets Issue Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps issueDate
     */
    public function setIssueDate(?DateComponents $issueDate): void
    {
        $this->issueDate = $issueDate;
    }

    /**
     * Returns Expiry Date.
     * A container that holds the date (day, month, and year)
     */
    public function getExpiryDate(): ?DateComponents
    {
        return $this->expiryDate;
    }

    /**
     * Sets Expiry Date.
     * A container that holds the date (day, month, and year)
     *
     * @maps expiryDate
     */
    public function setExpiryDate(?DateComponents $expiryDate): void
    {
        $this->expiryDate = $expiryDate;
    }

    /**
     * Returns Issuing State.
     * State of documentation issuance
     */
    public function getIssuingState(): ?string
    {
        return $this->issuingState;
    }

    /**
     * Sets Issuing State.
     * State of documentation issuance
     *
     * @maps issuingState
     * @factory \SwaggerScarecrowLib\Models\IssuingState1Enum::checkValue
     */
    public function setIssuingState(?string $issuingState): void
    {
        $this->issuingState = $issuingState;
    }

    /**
     * Returns Foreign Issuing State.
     * Foreign state of documentation issuance, applicable if State enumeration doesn't contain choice
     */
    public function getForeignIssuingState(): ?string
    {
        return $this->foreignIssuingState;
    }

    /**
     * Sets Foreign Issuing State.
     * Foreign state of documentation issuance, applicable if State enumeration doesn't contain choice
     *
     * @maps foreignIssuingState
     */
    public function setForeignIssuingState(?string $foreignIssuingState): void
    {
        $this->foreignIssuingState = $foreignIssuingState;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['documentary']             = $this->documentary;
        if (isset($this->documentaryVerifier)) {
            $json['documentaryVerifier'] = DocumentaryVerifierEnum::checkValue($this->documentaryVerifier);
        }
        if (isset($this->documentaryIssuer)) {
            $json['documentaryIssuer']   = $this->documentaryIssuer;
        }
        if (isset($this->documentaryType)) {
            $json['documentaryType']     = DocumentaryTypeEnum::checkValue($this->documentaryType);
        }
        if (isset($this->idNumber)) {
            $json['idNumber']            = $this->idNumber;
        }
        if (isset($this->issueDate)) {
            $json['issueDate']           = $this->issueDate;
        }
        if (isset($this->expiryDate)) {
            $json['expiryDate']          = $this->expiryDate;
        }
        if (isset($this->issuingState)) {
            $json['issuingState']        = IssuingState1Enum::checkValue($this->issuingState);
        }
        if (isset($this->foreignIssuingState)) {
            $json['foreignIssuingState'] = $this->foreignIssuingState;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
