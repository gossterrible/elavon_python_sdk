<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class ServletResponse implements \JsonSerializable
{
    /**
     * @var Locale|null
     */
    private $locale;

    /**
     * @var int|null
     */
    private $bufferSize;

    /**
     * @var array|null
     */
    private $writer;

    /**
     * @var string|null
     */
    private $characterEncoding;

    /**
     * @var bool|null
     */
    private $committed;

    /**
     * @var string|null
     */
    private $contentType;

    /**
     * @var ServletOutputStream|null
     */
    private $outputStream;

    /**
     * Returns Locale.
     */
    public function getLocale(): ?Locale
    {
        return $this->locale;
    }

    /**
     * Sets Locale.
     *
     * @maps locale
     */
    public function setLocale(?Locale $locale): void
    {
        $this->locale = $locale;
    }

    /**
     * Returns Buffer Size.
     */
    public function getBufferSize(): ?int
    {
        return $this->bufferSize;
    }

    /**
     * Sets Buffer Size.
     *
     * @maps bufferSize
     */
    public function setBufferSize(?int $bufferSize): void
    {
        $this->bufferSize = $bufferSize;
    }

    /**
     * Returns Writer.
     */
    public function getWriter(): ?array
    {
        return $this->writer;
    }

    /**
     * Sets Writer.
     *
     * @maps writer
     */
    public function setWriter(?array $writer): void
    {
        $this->writer = $writer;
    }

    /**
     * Returns Character Encoding.
     */
    public function getCharacterEncoding(): ?string
    {
        return $this->characterEncoding;
    }

    /**
     * Sets Character Encoding.
     *
     * @maps characterEncoding
     */
    public function setCharacterEncoding(?string $characterEncoding): void
    {
        $this->characterEncoding = $characterEncoding;
    }

    /**
     * Returns Committed.
     */
    public function getCommitted(): ?bool
    {
        return $this->committed;
    }

    /**
     * Sets Committed.
     *
     * @maps committed
     */
    public function setCommitted(?bool $committed): void
    {
        $this->committed = $committed;
    }

    /**
     * Returns Content Type.
     */
    public function getContentType(): ?string
    {
        return $this->contentType;
    }

    /**
     * Sets Content Type.
     *
     * @maps contentType
     */
    public function setContentType(?string $contentType): void
    {
        $this->contentType = $contentType;
    }

    /**
     * Returns Output Stream.
     */
    public function getOutputStream(): ?ServletOutputStream
    {
        return $this->outputStream;
    }

    /**
     * Sets Output Stream.
     *
     * @maps outputStream
     */
    public function setOutputStream(?ServletOutputStream $outputStream): void
    {
        $this->outputStream = $outputStream;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->locale)) {
            $json['locale']            = $this->locale;
        }
        if (isset($this->bufferSize)) {
            $json['bufferSize']        = $this->bufferSize;
        }
        if (isset($this->writer)) {
            $json['writer']            = $this->writer;
        }
        if (isset($this->characterEncoding)) {
            $json['characterEncoding'] = $this->characterEncoding;
        }
        if (isset($this->committed)) {
            $json['committed']         = $this->committed;
        }
        if (isset($this->contentType)) {
            $json['contentType']       = $this->contentType;
        }
        if (isset($this->outputStream)) {
            $json['outputStream']      = $this->outputStream;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
