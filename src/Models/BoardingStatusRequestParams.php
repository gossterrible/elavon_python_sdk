<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

/**
 * A container that holds all the required elements needed to make a boarding status call
 */
class BoardingStatusRequestParams implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $boardingId;

    /**
     * @var string|null
     */
    private $correlationId;

    /**
     * @var string
     */
    private $clientId;

    /**
     * @var string
     */
    private $uniqueId;

    /**
     * @var string
     */
    private $country;

    /**
     * @var string
     */
    private $salesRepCode;

    /**
     * @param string $clientId
     * @param string $uniqueId
     * @param string $country
     * @param string $salesRepCode
     */
    public function __construct(string $clientId, string $uniqueId, string $country, string $salesRepCode)
    {
        $this->clientId = $clientId;
        $this->uniqueId = $uniqueId;
        $this->country = $country;
        $this->salesRepCode = $salesRepCode;
    }

    /**
     * Returns Boarding Id.
     * MID(EU)/AWB(NA), value is returned from a successful boarding
     */
    public function getBoardingId(): ?string
    {
        return $this->boardingId;
    }

    /**
     * Sets Boarding Id.
     * MID(EU)/AWB(NA), value is returned from a successful boarding
     *
     * @maps boardingId
     */
    public function setBoardingId(?string $boardingId): void
    {
        $this->boardingId = $boardingId;
    }

    /**
     * Returns Correlation Id.
     * [NA] Identifier of alternative correlation Id to be used in the place of boardingId
     */
    public function getCorrelationId(): ?string
    {
        return $this->correlationId;
    }

    /**
     * Sets Correlation Id.
     * [NA] Identifier of alternative correlation Id to be used in the place of boardingId
     *
     * @maps correlationId
     */
    public function setCorrelationId(?string $correlationId): void
    {
        $this->correlationId = $correlationId;
    }

    /**
     * Returns Client Id.
     * Client id of application submission, to be provided to partners
     */
    public function getClientId(): string
    {
        return $this->clientId;
    }

    /**
     * Sets Client Id.
     * Client id of application submission, to be provided to partners
     *
     * @required
     * @maps clientId
     */
    public function setClientId(string $clientId): void
    {
        $this->clientId = $clientId;
    }

    /**
     * Returns Unique Id.
     * Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId
     * must be wholly original and never repeated. The client's name followed by a millisecond timestamp
     * would work well.
     */
    public function getUniqueId(): string
    {
        return $this->uniqueId;
    }

    /**
     * Sets Unique Id.
     * Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId
     * must be wholly original and never repeated. The client's name followed by a millisecond timestamp
     * would work well.
     *
     * @required
     * @maps uniqueId
     */
    public function setUniqueId(string $uniqueId): void
    {
        $this->uniqueId = $uniqueId;
    }

    /**
     * Returns Country.
     * Country of application submission, ISO 3166-1 alpha-3 standard applies
     */
    public function getCountry(): string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * Country of application submission, ISO 3166-1 alpha-3 standard applies
     *
     * @required
     * @maps country
     */
    public function setCountry(string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Sales Rep Code.
     * Identifier of sales representative responsible for submission status is being requested for
     */
    public function getSalesRepCode(): string
    {
        return $this->salesRepCode;
    }

    /**
     * Sets Sales Rep Code.
     * Identifier of sales representative responsible for submission status is being requested for
     *
     * @required
     * @maps salesRepCode
     */
    public function setSalesRepCode(string $salesRepCode): void
    {
        $this->salesRepCode = $salesRepCode;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->boardingId)) {
            $json['boardingId']    = $this->boardingId;
        }
        if (isset($this->correlationId)) {
            $json['correlationId'] = $this->correlationId;
        }
        $json['clientId']          = $this->clientId;
        $json['uniqueId']          = $this->uniqueId;
        $json['country']           = $this->country;
        $json['salesRepCode']      = $this->salesRepCode;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
