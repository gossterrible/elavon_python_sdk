<?php

declare(strict_types=1);

/*
 * SwaggerScarecrowLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerScarecrowLib\Models;

use stdClass;

class BankVerificationDetails implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $bankName;

    /**
     * @var string|null
     */
    private $bankBranch;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $bankLogoPath;

    /**
     * @var string|null
     */
    private $bankCountry;

    /**
     * @var string|null
     */
    private $sortCode;

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var bool|null
     */
    private $hasMultipleBranches;

    /**
     * @var bool|null
     */
    private $realtimePaymentFlag;

    /**
     * Returns Bank Name.
     * Name of bank that bank verification call resolved to
     */
    public function getBankName(): ?string
    {
        return $this->bankName;
    }

    /**
     * Sets Bank Name.
     * Name of bank that bank verification call resolved to
     *
     * @maps bankName
     */
    public function setBankName(?string $bankName): void
    {
        $this->bankName = $bankName;
    }

    /**
     * Returns Bank Branch.
     * Name of bank branh that bank verification call resolved to
     */
    public function getBankBranch(): ?string
    {
        return $this->bankBranch;
    }

    /**
     * Sets Bank Branch.
     * Name of bank branh that bank verification call resolved to
     *
     * @maps bankBranch
     */
    public function setBankBranch(?string $bankBranch): void
    {
        $this->bankBranch = $bankBranch;
    }

    /**
     * Returns Status.
     * Status of bank verification response
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Status of bank verification response
     *
     * @maps status
     * @factory \SwaggerScarecrowLib\Models\StatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Bank Logo Path.
     */
    public function getBankLogoPath(): ?string
    {
        return $this->bankLogoPath;
    }

    /**
     * Sets Bank Logo Path.
     *
     * @maps bankLogoPath
     */
    public function setBankLogoPath(?string $bankLogoPath): void
    {
        $this->bankLogoPath = $bankLogoPath;
    }

    /**
     * Returns Bank Country.
     * Country code that bank verification call resolved to, ISO 3166-1 alpha-3 standard applies
     */
    public function getBankCountry(): ?string
    {
        return $this->bankCountry;
    }

    /**
     * Sets Bank Country.
     * Country code that bank verification call resolved to, ISO 3166-1 alpha-3 standard applies
     *
     * @maps bankCountry
     */
    public function setBankCountry(?string $bankCountry): void
    {
        $this->bankCountry = $bankCountry;
    }

    /**
     * Returns Sort Code.
     * Sort code/ABA routing number that bank verification call used
     */
    public function getSortCode(): ?string
    {
        return $this->sortCode;
    }

    /**
     * Sets Sort Code.
     * Sort code/ABA routing number that bank verification call used
     *
     * @maps sortCode
     */
    public function setSortCode(?string $sortCode): void
    {
        $this->sortCode = $sortCode;
    }

    /**
     * Returns Account Number.
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     *
     * @maps accountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Has Multiple Branches.
     * Flag indicating if bank has more than one branch, true if YES, false if NO
     */
    public function getHasMultipleBranches(): ?bool
    {
        return $this->hasMultipleBranches;
    }

    /**
     * Sets Has Multiple Branches.
     * Flag indicating if bank has more than one branch, true if YES, false if NO
     *
     * @maps hasMultipleBranches
     */
    public function setHasMultipleBranches(?bool $hasMultipleBranches): void
    {
        $this->hasMultipleBranches = $hasMultipleBranches;
    }

    /**
     * Returns Realtime Payment Flag.
     * Flag indicating if the bank can accept true daily/ real time payments
     */
    public function getRealtimePaymentFlag(): ?bool
    {
        return $this->realtimePaymentFlag;
    }

    /**
     * Sets Realtime Payment Flag.
     * Flag indicating if the bank can accept true daily/ real time payments
     *
     * @maps realtimePaymentFlag
     */
    public function setRealtimePaymentFlag(?bool $realtimePaymentFlag): void
    {
        $this->realtimePaymentFlag = $realtimePaymentFlag;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->bankName)) {
            $json['bankName']            = $this->bankName;
        }
        if (isset($this->bankBranch)) {
            $json['bankBranch']          = $this->bankBranch;
        }
        if (isset($this->status)) {
            $json['status']              = StatusEnum::checkValue($this->status);
        }
        if (isset($this->bankLogoPath)) {
            $json['bankLogoPath']        = $this->bankLogoPath;
        }
        if (isset($this->bankCountry)) {
            $json['bankCountry']         = $this->bankCountry;
        }
        if (isset($this->sortCode)) {
            $json['sortCode']            = $this->sortCode;
        }
        if (isset($this->accountNumber)) {
            $json['accountNumber']       = $this->accountNumber;
        }
        if (isset($this->hasMultipleBranches)) {
            $json['hasMultipleBranches'] = $this->hasMultipleBranches;
        }
        if (isset($this->realtimePaymentFlag)) {
            $json['realtimePaymentFlag'] = $this->realtimePaymentFlag;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
