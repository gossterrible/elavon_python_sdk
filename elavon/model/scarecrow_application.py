"""
    Swagger Scarecrow

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from elavon.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from elavon.exceptions import ApiAttributeError


def lazy_import():
    from elavon.model.additional_location_info import AdditionalLocationInfo
    from elavon.model.apm_acquirer import ApmAcquirer
    from elavon.model.banking_info import BankingInfo
    from elavon.model.billing_statement import BillingStatement
    from elavon.model.business_info import BusinessInfo
    from elavon.model.card_pricing import CardPricing
    from elavon.model.chain_info import ChainInfo
    from elavon.model.date_components import DateComponents
    from elavon.model.distribution_info import DistributionInfo
    from elavon.model.dynamic_currency_conversion import DynamicCurrencyConversion
    from elavon.model.eframe_info import EframeInfo
    from elavon.model.electronic_statement import ElectronicStatement
    from elavon.model.equipment_info import EquipmentInfo
    from elavon.model.fee import Fee
    from elavon.model.financial_info import FinancialInfo
    from elavon.model.fraud_check_result import FraudCheckResult
    from elavon.model.funding_statement import FundingStatement
    from elavon.model.intermediary_owner_info import IntermediaryOwnerInfo
    from elavon.model.internal_use_info import InternalUseInfo
    from elavon.model.partner_info import PartnerInfo
    from elavon.model.person import Person
    from elavon.model.revenue_share_info import RevenueShareInfo
    from elavon.model.site_survey import SiteSurvey
    from elavon.model.value_added_info import ValueAddedInfo
    from elavon.model.vat_invoice_statement import VatInvoiceStatement
    globals()['AdditionalLocationInfo'] = AdditionalLocationInfo
    globals()['ApmAcquirer'] = ApmAcquirer
    globals()['BankingInfo'] = BankingInfo
    globals()['BillingStatement'] = BillingStatement
    globals()['BusinessInfo'] = BusinessInfo
    globals()['CardPricing'] = CardPricing
    globals()['ChainInfo'] = ChainInfo
    globals()['DateComponents'] = DateComponents
    globals()['DistributionInfo'] = DistributionInfo
    globals()['DynamicCurrencyConversion'] = DynamicCurrencyConversion
    globals()['EframeInfo'] = EframeInfo
    globals()['ElectronicStatement'] = ElectronicStatement
    globals()['EquipmentInfo'] = EquipmentInfo
    globals()['Fee'] = Fee
    globals()['FinancialInfo'] = FinancialInfo
    globals()['FraudCheckResult'] = FraudCheckResult
    globals()['FundingStatement'] = FundingStatement
    globals()['IntermediaryOwnerInfo'] = IntermediaryOwnerInfo
    globals()['InternalUseInfo'] = InternalUseInfo
    globals()['PartnerInfo'] = PartnerInfo
    globals()['Person'] = Person
    globals()['RevenueShareInfo'] = RevenueShareInfo
    globals()['SiteSurvey'] = SiteSurvey
    globals()['ValueAddedInfo'] = ValueAddedInfo
    globals()['VatInvoiceStatement'] = VatInvoiceStatement


class ScarecrowApplication(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('billing_method',): {
            'NETCREDIT': "NETCREDIT",
            'GROSS': "GROSS",
        },
        ('signed_type',): {
            'WET': "WET",
            'ELECTRONIC': "ELECTRONIC",
        },
        ('elavon_contract',): {
            'UK': "UK",
            'ROI': "ROI",
            'DINERS_UK': "DINERS_UK",
            'DINERS_ROI': "DINERS_ROI",
            'AMEX_ROI': "AMEX_ROI",
            'SAN_UK': "SAN_UK",
            'POLISH': "POLISH",
            'GERMAN': "GERMAN",
            'NORWEGIAN': "NORWEGIAN",
            'UK_EURO': "UK_EURO",
            'FRENCH': "FRENCH",
            'DUTCH': "DUTCH",
            'ITALIAN': "ITALIAN",
        },
    }

    validations = {
        ('unique_id',): {
            'max_length': 32,
            'min_length': 0,
        },
        ('referrer_reference_number',): {
            'max_length': 10,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'client_id': (str,),  # noqa: E501
            'unique_id': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'principal': (Person,),  # noqa: E501
            'business_info': (BusinessInfo,),  # noqa: E501
            'financial_info': (FinancialInfo,),  # noqa: E501
            'sales_rep_code': (str,),  # noqa: E501
            'contact': (Person,),  # noqa: E501
            'bank_accounts': ({str: (BankingInfo,)},),  # noqa: E501
            'card_pricing': (CardPricing,),  # noqa: E501
            'parent_entity': (str,),  # noqa: E501
            'client_group_number': (str,),  # noqa: E501
            'banker_id': (str,),  # noqa: E501
            'banker_partner_id': (str,),  # noqa: E501
            'additional_shareholders': ([Person],),  # noqa: E501
            'fees': ([Fee],),  # noqa: E501
            'monetary_pricing_program': (str,),  # noqa: E501
            'authenticate_pricing_program': (str,),  # noqa: E501
            'short_name': (str,),  # noqa: E501
            'fraud_check_result': (FraudCheckResult,),  # noqa: E501
            'site_survey': (SiteSurvey,),  # noqa: E501
            'dynamic_currency_conversion': (DynamicCurrencyConversion,),  # noqa: E501
            'billing_statement': (BillingStatement,),  # noqa: E501
            'funding_statement': (FundingStatement,),  # noqa: E501
            'electronic_statement': (ElectronicStatement,),  # noqa: E501
            'vat_invoice_statement': (VatInvoiceStatement,),  # noqa: E501
            'billing_method': (str,),  # noqa: E501
            'referrer_name': (str,),  # noqa: E501
            'referrer_reference_number': (str,),  # noqa: E501
            'previous_processor': (str,),  # noqa: E501
            'value_added_info': (ValueAddedInfo,),  # noqa: E501
            'equipment_info': (EquipmentInfo,),  # noqa: E501
            'branch_number': (str,),  # noqa: E501
            'branch_code': (str,),  # noqa: E501
            'self_boarded_external': (bool,),  # noqa: E501
            'employee_number': (str,),  # noqa: E501
            'rep_referral_number': (str,),  # noqa: E501
            'promotional_code': (str,),  # noqa: E501
            'chain_info': (ChainInfo,),  # noqa: E501
            'distributions': ({str: (DistributionInfo,)},),  # noqa: E501
            'additional_location_info': (AdditionalLocationInfo,),  # noqa: E501
            'signed_date': (DateComponents,),  # noqa: E501
            'signed_type': (str,),  # noqa: E501
            'intermediary_owner_info': (IntermediaryOwnerInfo,),  # noqa: E501
            'revenue_share_info': (RevenueShareInfo,),  # noqa: E501
            'elavon_contract': (str,),  # noqa: E501
            'internal_use_info': (InternalUseInfo,),  # noqa: E501
            'eframe_info': (EframeInfo,),  # noqa: E501
            'partner_info': (PartnerInfo,),  # noqa: E501
            'alternative_payment_methods': ([ApmAcquirer],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'client_id': 'clientId',  # noqa: E501
        'unique_id': 'uniqueId',  # noqa: E501
        'country': 'country',  # noqa: E501
        'principal': 'principal',  # noqa: E501
        'business_info': 'businessInfo',  # noqa: E501
        'financial_info': 'financialInfo',  # noqa: E501
        'sales_rep_code': 'salesRepCode',  # noqa: E501
        'contact': 'contact',  # noqa: E501
        'bank_accounts': 'bankAccounts',  # noqa: E501
        'card_pricing': 'cardPricing',  # noqa: E501
        'parent_entity': 'parentEntity',  # noqa: E501
        'client_group_number': 'clientGroupNumber',  # noqa: E501
        'banker_id': 'bankerId',  # noqa: E501
        'banker_partner_id': 'bankerPartnerId',  # noqa: E501
        'additional_shareholders': 'additionalShareholders',  # noqa: E501
        'fees': 'fees',  # noqa: E501
        'monetary_pricing_program': 'monetaryPricingProgram',  # noqa: E501
        'authenticate_pricing_program': 'authenticatePricingProgram',  # noqa: E501
        'short_name': 'shortName',  # noqa: E501
        'fraud_check_result': 'fraudCheckResult',  # noqa: E501
        'site_survey': 'siteSurvey',  # noqa: E501
        'dynamic_currency_conversion': 'dynamicCurrencyConversion',  # noqa: E501
        'billing_statement': 'billingStatement',  # noqa: E501
        'funding_statement': 'fundingStatement',  # noqa: E501
        'electronic_statement': 'electronicStatement',  # noqa: E501
        'vat_invoice_statement': 'vatInvoiceStatement',  # noqa: E501
        'billing_method': 'billingMethod',  # noqa: E501
        'referrer_name': 'referrerName',  # noqa: E501
        'referrer_reference_number': 'referrerReferenceNumber',  # noqa: E501
        'previous_processor': 'previousProcessor',  # noqa: E501
        'value_added_info': 'valueAddedInfo',  # noqa: E501
        'equipment_info': 'equipmentInfo',  # noqa: E501
        'branch_number': 'branchNumber',  # noqa: E501
        'branch_code': 'branchCode',  # noqa: E501
        'self_boarded_external': 'selfBoardedExternal',  # noqa: E501
        'employee_number': 'employeeNumber',  # noqa: E501
        'rep_referral_number': 'repReferralNumber',  # noqa: E501
        'promotional_code': 'promotionalCode',  # noqa: E501
        'chain_info': 'chainInfo',  # noqa: E501
        'distributions': 'distributions',  # noqa: E501
        'additional_location_info': 'additionalLocationInfo',  # noqa: E501
        'signed_date': 'signedDate',  # noqa: E501
        'signed_type': 'signedType',  # noqa: E501
        'intermediary_owner_info': 'intermediaryOwnerInfo',  # noqa: E501
        'revenue_share_info': 'revenueShareInfo',  # noqa: E501
        'elavon_contract': 'elavonContract',  # noqa: E501
        'internal_use_info': 'internalUseInfo',  # noqa: E501
        'eframe_info': 'eframeInfo',  # noqa: E501
        'partner_info': 'partnerInfo',  # noqa: E501
        'alternative_payment_methods': 'alternativePaymentMethods',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, client_id, unique_id, country, principal, business_info, financial_info, sales_rep_code, contact, bank_accounts, card_pricing, parent_entity, *args, **kwargs):  # noqa: E501
        """ScarecrowApplication - a model defined in OpenAPI

        Args:
            client_id (str): Client id of application submission, to be provided to partners
            unique_id (str): Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId must be wholly original and never repeated. The client's name followed by a millisecond timestamp would work well.
            country (str): Country of application submission, ISO 3166-1 alpha-3 standard applies
            principal (Person):
            business_info (BusinessInfo):
            financial_info (FinancialInfo):
            sales_rep_code (str): Identifier of sales representative responsible for submission
            contact (Person):
            bank_accounts ({str: (BankingInfo,)}): Bank account container. Valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
            card_pricing (CardPricing):
            parent_entity (str): Entity that is parent to submisssion, forms a pair with client group, to be provided to partners

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            client_group_number (str): Client group number of application submission, paris with parent entity, to be provided to partners, required in NA. [optional]  # noqa: E501
            banker_id (str): [EU] Identifier of banker responsible for submission. [optional]  # noqa: E501
            banker_partner_id (str): [EU] Identifier of banker partner responsible for submission. [optional]  # noqa: E501
            additional_shareholders ([Person]): [optional]  # noqa: E501
            fees ([Fee]): [optional]  # noqa: E501
            monetary_pricing_program (str): Pricing program also called MPP/NPP, to be provided to partners, required in EU. [optional]  # noqa: E501
            authenticate_pricing_program (str): Pricing program also called APP, to be provided to partners, required in EU. [optional]  # noqa: E501
            short_name (str): [NA]. [optional]  # noqa: E501
            fraud_check_result (FraudCheckResult): [optional]  # noqa: E501
            site_survey (SiteSurvey): [optional]  # noqa: E501
            dynamic_currency_conversion (DynamicCurrencyConversion): [optional]  # noqa: E501
            billing_statement (BillingStatement): [optional]  # noqa: E501
            funding_statement (FundingStatement): [optional]  # noqa: E501
            electronic_statement (ElectronicStatement): [optional]  # noqa: E501
            vat_invoice_statement (VatInvoiceStatement): [optional]  # noqa: E501
            billing_method (str): [NA] NETCREDIT or GROSS. [optional]  # noqa: E501
            referrer_name (str): Application submission's referrer name, to be provided to partners, required in NA. [optional]  # noqa: E501
            referrer_reference_number (str): The reference number associated with the referrer, known by Elavon.. [optional]  # noqa: E501
            previous_processor (str): [NA] Customer's previous payment processor. [optional]  # noqa: E501
            value_added_info (ValueAddedInfo): [optional]  # noqa: E501
            equipment_info (EquipmentInfo): [optional]  # noqa: E501
            branch_number (str): Bank branch number associated with application submission. [optional]  # noqa: E501
            branch_code (str): Bank branch code associated with application submission. [optional]  # noqa: E501
            self_boarded_external (bool): [NA] Flag indicating if application is self boarded externally, suppresses forms of post-boarding contact. [optional]  # noqa: E501
            employee_number (str): Number used to identify a specific employee. [optional]  # noqa: E501
            rep_referral_number (str): Number used to identify a specific representative. [optional]  # noqa: E501
            promotional_code (str): A discount/promotional code. [optional]  # noqa: E501
            chain_info (ChainInfo): [optional]  # noqa: E501
            distributions ({str: (DistributionInfo,)}): Distribution container for chargebacks and retrievals. The valid keys are as follows: CHARGEBACK, RETRIEVAL. [optional]  # noqa: E501
            additional_location_info (AdditionalLocationInfo): [optional]  # noqa: E501
            signed_date (DateComponents): [optional]  # noqa: E501
            signed_type (str): [NA] How application was signed. [optional]  # noqa: E501
            intermediary_owner_info (IntermediaryOwnerInfo): [optional]  # noqa: E501
            revenue_share_info (RevenueShareInfo): [optional]  # noqa: E501
            elavon_contract (str): [EU] Determine which Merchant Agreement customer will sign. [optional]  # noqa: E501
            internal_use_info (InternalUseInfo): [optional]  # noqa: E501
            eframe_info (EframeInfo): [optional]  # noqa: E501
            partner_info (PartnerInfo): [optional]  # noqa: E501
            alternative_payment_methods ([ApmAcquirer]): [EU] List of Alternative Payment Method Acquirers container. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.client_id = client_id
        self.unique_id = unique_id
        self.country = country
        self.principal = principal
        self.business_info = business_info
        self.financial_info = financial_info
        self.sales_rep_code = sales_rep_code
        self.contact = contact
        self.bank_accounts = bank_accounts
        self.card_pricing = card_pricing
        self.parent_entity = parent_entity
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, client_id, unique_id, country, principal, business_info, financial_info, sales_rep_code, contact, bank_accounts, card_pricing, parent_entity, *args, **kwargs):  # noqa: E501
        """ScarecrowApplication - a model defined in OpenAPI

        Args:
            client_id (str): Client id of application submission, to be provided to partners
            unique_id (str): Unique identifier of application submission, alphanumeric. Provided by the client.The uniqueId must be wholly original and never repeated. The client's name followed by a millisecond timestamp would work well.
            country (str): Country of application submission, ISO 3166-1 alpha-3 standard applies
            principal (Person):
            business_info (BusinessInfo):
            financial_info (FinancialInfo):
            sales_rep_code (str): Identifier of sales representative responsible for submission
            contact (Person):
            bank_accounts ({str: (BankingInfo,)}): Bank account container. Valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
            card_pricing (CardPricing):
            parent_entity (str): Entity that is parent to submisssion, forms a pair with client group, to be provided to partners

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            client_group_number (str): Client group number of application submission, paris with parent entity, to be provided to partners, required in NA. [optional]  # noqa: E501
            banker_id (str): [EU] Identifier of banker responsible for submission. [optional]  # noqa: E501
            banker_partner_id (str): [EU] Identifier of banker partner responsible for submission. [optional]  # noqa: E501
            additional_shareholders ([Person]): [optional]  # noqa: E501
            fees ([Fee]): [optional]  # noqa: E501
            monetary_pricing_program (str): Pricing program also called MPP/NPP, to be provided to partners, required in EU. [optional]  # noqa: E501
            authenticate_pricing_program (str): Pricing program also called APP, to be provided to partners, required in EU. [optional]  # noqa: E501
            short_name (str): [NA]. [optional]  # noqa: E501
            fraud_check_result (FraudCheckResult): [optional]  # noqa: E501
            site_survey (SiteSurvey): [optional]  # noqa: E501
            dynamic_currency_conversion (DynamicCurrencyConversion): [optional]  # noqa: E501
            billing_statement (BillingStatement): [optional]  # noqa: E501
            funding_statement (FundingStatement): [optional]  # noqa: E501
            electronic_statement (ElectronicStatement): [optional]  # noqa: E501
            vat_invoice_statement (VatInvoiceStatement): [optional]  # noqa: E501
            billing_method (str): [NA] NETCREDIT or GROSS. [optional]  # noqa: E501
            referrer_name (str): Application submission's referrer name, to be provided to partners, required in NA. [optional]  # noqa: E501
            referrer_reference_number (str): The reference number associated with the referrer, known by Elavon.. [optional]  # noqa: E501
            previous_processor (str): [NA] Customer's previous payment processor. [optional]  # noqa: E501
            value_added_info (ValueAddedInfo): [optional]  # noqa: E501
            equipment_info (EquipmentInfo): [optional]  # noqa: E501
            branch_number (str): Bank branch number associated with application submission. [optional]  # noqa: E501
            branch_code (str): Bank branch code associated with application submission. [optional]  # noqa: E501
            self_boarded_external (bool): [NA] Flag indicating if application is self boarded externally, suppresses forms of post-boarding contact. [optional]  # noqa: E501
            employee_number (str): Number used to identify a specific employee. [optional]  # noqa: E501
            rep_referral_number (str): Number used to identify a specific representative. [optional]  # noqa: E501
            promotional_code (str): A discount/promotional code. [optional]  # noqa: E501
            chain_info (ChainInfo): [optional]  # noqa: E501
            distributions ({str: (DistributionInfo,)}): Distribution container for chargebacks and retrievals. The valid keys are as follows: CHARGEBACK, RETRIEVAL. [optional]  # noqa: E501
            additional_location_info (AdditionalLocationInfo): [optional]  # noqa: E501
            signed_date (DateComponents): [optional]  # noqa: E501
            signed_type (str): [NA] How application was signed. [optional]  # noqa: E501
            intermediary_owner_info (IntermediaryOwnerInfo): [optional]  # noqa: E501
            revenue_share_info (RevenueShareInfo): [optional]  # noqa: E501
            elavon_contract (str): [EU] Determine which Merchant Agreement customer will sign. [optional]  # noqa: E501
            internal_use_info (InternalUseInfo): [optional]  # noqa: E501
            eframe_info (EframeInfo): [optional]  # noqa: E501
            partner_info (PartnerInfo): [optional]  # noqa: E501
            alternative_payment_methods ([ApmAcquirer]): [EU] List of Alternative Payment Method Acquirers container. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.client_id = client_id
        self.unique_id = unique_id
        self.country = country
        self.principal = principal
        self.business_info = business_info
        self.financial_info = financial_info
        self.sales_rep_code = sales_rep_code
        self.contact = contact
        self.bank_accounts = bank_accounts
        self.card_pricing = card_pricing
        self.parent_entity = parent_entity
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
