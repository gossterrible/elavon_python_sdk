"""
    Swagger Scarecrow

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from elavon.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from elavon.exceptions import ApiAttributeError


def lazy_import():
    from elavon.model.acting_intermediary_info import ActingIntermediaryInfo
    from elavon.model.additional_auth_pricing_program_info import AdditionalAuthPricingProgramInfo
    from elavon.model.additional_business_info import AdditionalBusinessInfo
    from elavon.model.additional_card_pricing_info import AdditionalCardPricingInfo
    from elavon.model.additional_description_info import AdditionalDescriptionInfo
    from elavon.model.additional_lease_info import AdditionalLeaseInfo
    from elavon.model.additional_site_survey_info import AdditionalSiteSurveyInfo
    from elavon.model.bank_account_additional_info import BankAccountAdditionalInfo
    from elavon.model.integrator_solution_info import IntegratorSolutionInfo
    from elavon.model.provider_info import ProviderInfo
    from elavon.model.sales_office_contact import SalesOfficeContact
    from elavon.model.scarecrow_application import ScarecrowApplication
    from elavon.model.value_added_services import ValueAddedServices
    from elavon.model.var_other_details import VarOtherDetails
    globals()['ActingIntermediaryInfo'] = ActingIntermediaryInfo
    globals()['AdditionalAuthPricingProgramInfo'] = AdditionalAuthPricingProgramInfo
    globals()['AdditionalBusinessInfo'] = AdditionalBusinessInfo
    globals()['AdditionalCardPricingInfo'] = AdditionalCardPricingInfo
    globals()['AdditionalDescriptionInfo'] = AdditionalDescriptionInfo
    globals()['AdditionalLeaseInfo'] = AdditionalLeaseInfo
    globals()['AdditionalSiteSurveyInfo'] = AdditionalSiteSurveyInfo
    globals()['BankAccountAdditionalInfo'] = BankAccountAdditionalInfo
    globals()['IntegratorSolutionInfo'] = IntegratorSolutionInfo
    globals()['ProviderInfo'] = ProviderInfo
    globals()['SalesOfficeContact'] = SalesOfficeContact
    globals()['ScarecrowApplication'] = ScarecrowApplication
    globals()['ValueAddedServices'] = ValueAddedServices
    globals()['VarOtherDetails'] = VarOtherDetails


class MerchantAgreementDocumentInput(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('funding_type',): {
            'STANDARD': "STANDARD",
            'NEXT_DAY': "NEXT_DAY",
            'FAST_TRACK': "FAST_TRACK",
            'TRUE_DAILY': "TRUE_DAILY",
        },
        ('kyc_quiz_status_map',): {
            'RESULT_FAILED_QUIZ': "KYC_RESULT_FAILED_QUIZ",
            'RESULT_PASSED_QUIZ': "KYC_RESULT_PASSED_QUIZ",
            'RESULT_ERROR': "KYC_RESULT_ERROR",
            'RESULT_NO_QUIZ': "KYC_RESULT_NO_QUIZ",
            'RESULT_QUIZ_REFUSED': "KYC_RESULT_QUIZ_REFUSED",
            'NO_QUIZ_NEEDED': "KYC_NO_QUIZ_NEEDED",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'language': (str,),  # noqa: E501
            'document_id': (str,),  # noqa: E501
            'scarecrow_application': (ScarecrowApplication,),  # noqa: E501
            'vendor_info': (ProviderInfo,),  # noqa: E501
            'bank_account_details_map': ({str: (BankAccountAdditionalInfo,)},),  # noqa: E501
            'displayed_currency': (str,),  # noqa: E501
            'agreement_id': (str,),  # noqa: E501
            'document_packet_id': (str,),  # noqa: E501
            'signed': (bool,),  # noqa: E501
            'grouped_application': (bool,),  # noqa: E501
            'wet_signed': (bool,),  # noqa: E501
            'acting_intermediary_info': (ActingIntermediaryInfo,),  # noqa: E501
            'is_tax_exempt_equipment': (bool,),  # noqa: E501
            'talech_egift_only': (bool,),  # noqa: E501
            'additional_description_info': (AdditionalDescriptionInfo,),  # noqa: E501
            'additional_value_added_service_info': (ValueAddedServices,),  # noqa: E501
            'additional_business_info': (AdditionalBusinessInfo,),  # noqa: E501
            'funding_type': (str,),  # noqa: E501
            'integrator_solution_info': (IntegratorSolutionInfo,),  # noqa: E501
            'additional_lease_info': (AdditionalLeaseInfo,),  # noqa: E501
            'marketing_data_consent_map': ({str: (bool,)},),  # noqa: E501
            'additional_site_survey_info': (AdditionalSiteSurveyInfo,),  # noqa: E501
            'kyc_quiz_status_map': ({str: (str,)},),  # noqa: E501
            'var_other_details': (VarOtherDetails,),  # noqa: E501
            'additional_card_pricing_info': (AdditionalCardPricingInfo,),  # noqa: E501
            'sales_office_contact': (SalesOfficeContact,),  # noqa: E501
            'additional_auth_pricing_program_info': (AdditionalAuthPricingProgramInfo,),  # noqa: E501
            'applicant_email': (str,),  # noqa: E501
            'application_id': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'language': 'language',  # noqa: E501
        'document_id': 'documentId',  # noqa: E501
        'scarecrow_application': 'scarecrowApplication',  # noqa: E501
        'vendor_info': 'vendorInfo',  # noqa: E501
        'bank_account_details_map': 'bankAccountDetailsMap',  # noqa: E501
        'displayed_currency': 'displayedCurrency',  # noqa: E501
        'agreement_id': 'agreementId',  # noqa: E501
        'document_packet_id': 'documentPacketId',  # noqa: E501
        'signed': 'signed',  # noqa: E501
        'grouped_application': 'groupedApplication',  # noqa: E501
        'wet_signed': 'wetSigned',  # noqa: E501
        'acting_intermediary_info': 'actingIntermediaryInfo',  # noqa: E501
        'is_tax_exempt_equipment': 'isTaxExemptEquipment',  # noqa: E501
        'talech_egift_only': 'talechEgiftOnly',  # noqa: E501
        'additional_description_info': 'additionalDescriptionInfo',  # noqa: E501
        'additional_value_added_service_info': 'additionalValueAddedServiceInfo',  # noqa: E501
        'additional_business_info': 'additionalBusinessInfo',  # noqa: E501
        'funding_type': 'fundingType',  # noqa: E501
        'integrator_solution_info': 'integratorSolutionInfo',  # noqa: E501
        'additional_lease_info': 'additionalLeaseInfo',  # noqa: E501
        'marketing_data_consent_map': 'marketingDataConsentMap',  # noqa: E501
        'additional_site_survey_info': 'additionalSiteSurveyInfo',  # noqa: E501
        'kyc_quiz_status_map': 'kycQuizStatusMap',  # noqa: E501
        'var_other_details': 'varOtherDetails',  # noqa: E501
        'additional_card_pricing_info': 'additionalCardPricingInfo',  # noqa: E501
        'sales_office_contact': 'salesOfficeContact',  # noqa: E501
        'additional_auth_pricing_program_info': 'additionalAuthPricingProgramInfo',  # noqa: E501
        'applicant_email': 'applicantEmail',  # noqa: E501
        'application_id': 'applicationId',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, language, document_id, scarecrow_application, vendor_info, bank_account_details_map, displayed_currency, *args, **kwargs):  # noqa: E501
        """MerchantAgreementDocumentInput - a model defined in OpenAPI

        Args:
            language (str): Language of document to be generated,  ISO 639-1 standard applies
            document_id (str): Unique id of document
            scarecrow_application (ScarecrowApplication):
            vendor_info (ProviderInfo):
            bank_account_details_map ({str: (BankAccountAdditionalInfo,)}): Application's additional bank account informationThe valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
            displayed_currency (str): Application's currency, ISO 4217 standard applies

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            agreement_id (str): Merchant id (MID). [optional]  # noqa: E501
            document_packet_id (str): Document packet id. [optional]  # noqa: E501
            signed (bool): Boolean flag indicating if document has been signed, true if  YES, false if NO. [optional]  # noqa: E501
            grouped_application (bool): Boolean flag indicating if document is of a group of applications, true if  YES, false if NO. [optional]  # noqa: E501
            wet_signed (bool): Boolean flag indicating if document is to be wet signed, true if  YES, false if NO. [optional]  # noqa: E501
            acting_intermediary_info (ActingIntermediaryInfo): [optional]  # noqa: E501
            is_tax_exempt_equipment (bool): Flag indicating if equipment is to be considered tax exempt, true if exempt YES, false if NOT exept. [optional]  # noqa: E501
            talech_egift_only (bool): Flag indicating if equipment is to Talech eGift, true if selected YES, false if NOT selected. [optional]  # noqa: E501
            additional_description_info (AdditionalDescriptionInfo): [optional]  # noqa: E501
            additional_value_added_service_info (ValueAddedServices): [optional]  # noqa: E501
            additional_business_info (AdditionalBusinessInfo): [optional]  # noqa: E501
            funding_type (str): Application's funding type. [optional]  # noqa: E501
            integrator_solution_info (IntegratorSolutionInfo): [optional]  # noqa: E501
            additional_lease_info (AdditionalLeaseInfo): [optional]  # noqa: E501
            marketing_data_consent_map ({str: (bool,)}): Application's consent form (POL).The valid keys are the numerical value of the marketing consent option (1, 2, 3, etc). [optional]  # noqa: E501
            additional_site_survey_info (AdditionalSiteSurveyInfo): [optional]  # noqa: E501
            kyc_quiz_status_map ({str: (str,)}): Status results of the KCY check. [optional]  # noqa: E501
            var_other_details (VarOtherDetails): [optional]  # noqa: E501
            additional_card_pricing_info (AdditionalCardPricingInfo): [optional]  # noqa: E501
            sales_office_contact (SalesOfficeContact): [optional]  # noqa: E501
            additional_auth_pricing_program_info (AdditionalAuthPricingProgramInfo): [optional]  # noqa: E501
            applicant_email (str): Applicant's email address. [optional]  # noqa: E501
            application_id (int): Application id. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.language = language
        self.document_id = document_id
        self.scarecrow_application = scarecrow_application
        self.vendor_info = vendor_info
        self.bank_account_details_map = bank_account_details_map
        self.displayed_currency = displayed_currency
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, language, document_id, scarecrow_application, vendor_info, bank_account_details_map, displayed_currency, *args, **kwargs):  # noqa: E501
        """MerchantAgreementDocumentInput - a model defined in OpenAPI

        Args:
            language (str): Language of document to be generated,  ISO 639-1 standard applies
            document_id (str): Unique id of document
            scarecrow_application (ScarecrowApplication):
            vendor_info (ProviderInfo):
            bank_account_details_map ({str: (BankAccountAdditionalInfo,)}): Application's additional bank account informationThe valid keys are as follows: BILLING, DEPOSIT, LEASE, CHARGEBACK
            displayed_currency (str): Application's currency, ISO 4217 standard applies

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            agreement_id (str): Merchant id (MID). [optional]  # noqa: E501
            document_packet_id (str): Document packet id. [optional]  # noqa: E501
            signed (bool): Boolean flag indicating if document has been signed, true if  YES, false if NO. [optional]  # noqa: E501
            grouped_application (bool): Boolean flag indicating if document is of a group of applications, true if  YES, false if NO. [optional]  # noqa: E501
            wet_signed (bool): Boolean flag indicating if document is to be wet signed, true if  YES, false if NO. [optional]  # noqa: E501
            acting_intermediary_info (ActingIntermediaryInfo): [optional]  # noqa: E501
            is_tax_exempt_equipment (bool): Flag indicating if equipment is to be considered tax exempt, true if exempt YES, false if NOT exept. [optional]  # noqa: E501
            talech_egift_only (bool): Flag indicating if equipment is to Talech eGift, true if selected YES, false if NOT selected. [optional]  # noqa: E501
            additional_description_info (AdditionalDescriptionInfo): [optional]  # noqa: E501
            additional_value_added_service_info (ValueAddedServices): [optional]  # noqa: E501
            additional_business_info (AdditionalBusinessInfo): [optional]  # noqa: E501
            funding_type (str): Application's funding type. [optional]  # noqa: E501
            integrator_solution_info (IntegratorSolutionInfo): [optional]  # noqa: E501
            additional_lease_info (AdditionalLeaseInfo): [optional]  # noqa: E501
            marketing_data_consent_map ({str: (bool,)}): Application's consent form (POL).The valid keys are the numerical value of the marketing consent option (1, 2, 3, etc). [optional]  # noqa: E501
            additional_site_survey_info (AdditionalSiteSurveyInfo): [optional]  # noqa: E501
            kyc_quiz_status_map ({str: (str,)}): Status results of the KCY check. [optional]  # noqa: E501
            var_other_details (VarOtherDetails): [optional]  # noqa: E501
            additional_card_pricing_info (AdditionalCardPricingInfo): [optional]  # noqa: E501
            sales_office_contact (SalesOfficeContact): [optional]  # noqa: E501
            additional_auth_pricing_program_info (AdditionalAuthPricingProgramInfo): [optional]  # noqa: E501
            applicant_email (str): Applicant's email address. [optional]  # noqa: E501
            application_id (int): Application id. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.language = language
        self.document_id = document_id
        self.scarecrow_application = scarecrow_application
        self.vendor_info = vendor_info
        self.bank_account_details_map = bank_account_details_map
        self.displayed_currency = displayed_currency
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
